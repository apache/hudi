"use strict";(self.webpackChunkhudi=self.webpackChunkhudi||[]).push([[4613],{3905:function(e,t,o){o.d(t,{Zo:function(){return d},kt:function(){return h}});var n=o(7294);function s(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){s(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function r(e,t){if(null==e)return{};var o,n,s=function(e,t){if(null==e)return{};var o,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(s[o]=e[o]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(s[o]=e[o])}return s}var l=n.createContext({}),c=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=c(o),h=s,p=u["".concat(l,".").concat(h)]||u[h]||m[h]||a;return o?n.createElement(p,i(i({ref:t},d),{},{components:o})):n.createElement(p,i({ref:t},d))}));function h(e,t){var o=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=o.length,i=new Array(a);i[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:s,i[1]=r;for(var c=2;c<a;c++)i[c]=o[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},8233:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var n=o(7462),s=o(3366),a=(o(7294),o(3905)),i=["components"],r={version:"0.5.2",title:"Docker Demo",keywords:["hudi","docker","demo"],toc:!0,last_modified_at:new Date("2019-12-30T19:59:57.000Z"),language:"cn"},l=void 0,c={unversionedId:"docker_demo",id:"version-0.5.2/docker_demo",isDocsHomePage:!1,title:"Docker Demo",description:"A Demo using docker containers",source:"@site/i18n/cn/docusaurus-plugin-content-docs/version-0.5.2/docker_demo.md",sourceDirName:".",slug:"/docker_demo",permalink:"/cn/docs/0.5.2/docker_demo",editUrl:"https://github.com/apache/hudi/edit/asf-site/website/docs/versioned_docs/version-0.5.2/docker_demo.md",version:"0.5.2",frontMatter:{version:"0.5.2",title:"Docker Demo",keywords:["hudi","docker","demo"],toc:!0,last_modified_at:"2019-12-30T19:59:57.000Z",language:"cn"},sidebar:"version-0.5.2/docs",previous:{title:"GCS Filesystem",permalink:"/cn/docs/0.5.2/gcs_hoodie"},next:{title:"Privacy Policy",permalink:"/cn/docs/0.5.2/privacy"}},d=[{value:"A Demo using docker containers",id:"a-demo-using-docker-containers",children:[{value:"Prerequisites",id:"prerequisites",children:[]}]},{value:"Setting up Docker Cluster",id:"setting-up-docker-cluster",children:[{value:"Build Hudi",id:"build-hudi",children:[]},{value:"Bringing up Demo Cluster",id:"bringing-up-demo-cluster",children:[]}]},{value:"Demo",id:"demo",children:[{value:"Step 1 : Publish the first batch to Kafka",id:"step-1--publish-the-first-batch-to-kafka",children:[]},{value:"Step 2: Incrementally ingest data from Kafka topic",id:"step-2-incrementally-ingest-data-from-kafka-topic",children:[]},{value:"Step 3: Sync with Hive",id:"step-3-sync-with-hive",children:[]},{value:"Step 4 (a): Run Hive Queries",id:"step-4-a-run-hive-queries",children:[]},{value:"Step 4 (b): Run Spark-SQL Queries",id:"step-4-b-run-spark-sql-queries",children:[]},{value:"Step 4 (c): Run Presto Queries",id:"step-4-c-run-presto-queries",children:[]},{value:"Step 5: Upload second batch to Kafka and run DeltaStreamer to ingest",id:"step-5-upload-second-batch-to-kafka-and-run-deltastreamer-to-ingest",children:[]},{value:"Step 6(a): Run Hive Queries",id:"step-6a-run-hive-queries",children:[]},{value:"Step 6(b): Run Spark SQL Queries",id:"step-6b-run-spark-sql-queries",children:[]},{value:"Step 6(c): Run Presto Queries",id:"step-6c-run-presto-queries",children:[]},{value:"Step 7 : Incremental Query for COPY-ON-WRITE Table",id:"step-7--incremental-query-for-copy-on-write-table",children:[]},{value:"Incremental Query with Spark SQL:",id:"incremental-query-with-spark-sql",children:[]},{value:"Step 8: Schedule and Run Compaction for Merge-On-Read dataset",id:"step-8-schedule-and-run-compaction-for-merge-on-read-dataset",children:[]},{value:"Step 9: Run Hive Queries including incremental queries",id:"step-9-run-hive-queries-including-incremental-queries",children:[]},{value:"Step 10: Read Optimized and Realtime Views for MOR with Spark-SQL after compaction",id:"step-10-read-optimized-and-realtime-views-for-mor-with-spark-sql-after-compaction",children:[]},{value:"Step 11:  Presto queries over Read Optimized View on MOR dataset after compaction",id:"step-11--presto-queries-over-read-optimized-view-on-mor-dataset-after-compaction",children:[]}]},{value:"Testing Hudi in Local Docker environment",id:"testing-hudi-in-local-docker-environment",children:[{value:"Building Local Docker Containers:",id:"building-local-docker-containers",children:[]}]}],m={toc:d};function u(e){var t=e.components,o=(0,s.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"a-demo-using-docker-containers"},"A Demo using docker containers"),(0,a.kt)("p",null,"Lets use a real world example to see how hudi works end to end. For this purpose, a self contained\ndata infrastructure is brought up in a local docker cluster within your computer."),(0,a.kt)("p",null,"The steps have been tested on a Mac laptop"),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Docker Setup :  For Mac, Please follow the steps as defined in ","[https://docs.docker.com/v17.12/docker-for-mac/install/]",". For running Spark-SQL queries, please ensure atleast 6 GB and 4 CPUs are allocated to Docker (See Docker -> Preferences -> Advanced). Otherwise, spark-SQL queries could be killed because of memory issues."),(0,a.kt)("li",{parentName:"ul"},"kafkacat : A command-line utility to publish/consume from kafka topics. Use ",(0,a.kt)("inlineCode",{parentName:"li"},"brew install kafkacat")," to install kafkacat"),(0,a.kt)("li",{parentName:"ul"},"/etc/hosts : The demo references many services running in container by the hostname. Add the following settings to /etc/hosts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"   127.0.0.1 adhoc-1\n   127.0.0.1 adhoc-2\n   127.0.0.1 namenode\n   127.0.0.1 datanode1\n   127.0.0.1 hiveserver\n   127.0.0.1 hivemetastore\n   127.0.0.1 kafkabroker\n   127.0.0.1 sparkmaster\n   127.0.0.1 zookeeper\n")),(0,a.kt)("p",null,"Also, this has not been tested on some environments like Docker on Windows."),(0,a.kt)("h2",{id:"setting-up-docker-cluster"},"Setting up Docker Cluster"),(0,a.kt)("h3",{id:"build-hudi"},"Build Hudi"),(0,a.kt)("p",null,"The first step is to build hudi"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"cd <HUDI_WORKSPACE>\nmvn package -DskipTests\n")),(0,a.kt)("h3",{id:"bringing-up-demo-cluster"},"Bringing up Demo Cluster"),(0,a.kt)("p",null,"The next step is to run the docker compose script and setup configs for bringing up the cluster.\nThis should pull the docker images from docker hub and setup docker cluster."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'cd docker\n./setup_demo.sh\n....\n....\n....\nStopping spark-worker-1            ... done\nStopping hiveserver                ... done\nStopping hivemetastore             ... done\nStopping historyserver             ... done\n.......\n......\nCreating network "hudi_demo" with the default driver\nCreating hive-metastore-postgresql ... done\nCreating namenode                  ... done\nCreating zookeeper                 ... done\nCreating kafkabroker               ... done\nCreating hivemetastore             ... done\nCreating historyserver             ... done\nCreating hiveserver                ... done\nCreating datanode1                 ... done\nCreating presto-coordinator-1      ... done\nCreating sparkmaster               ... done\nCreating presto-worker-1           ... done\nCreating adhoc-1                   ... done\nCreating adhoc-2                   ... done\nCreating spark-worker-1            ... done\nCopying spark default config and setting up configs\nCopying spark default config and setting up configs\nCopying spark default config and setting up configs\n$ docker ps\n')),(0,a.kt)("p",null,"At this point, the docker cluster will be up and running. The demo cluster brings up the following services"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"HDFS Services (NameNode, DataNode)"),(0,a.kt)("li",{parentName:"ul"},"Spark Master and Worker"),(0,a.kt)("li",{parentName:"ul"},"Hive Services (Metastore, HiveServer2 along with PostgresDB)"),(0,a.kt)("li",{parentName:"ul"},"Kafka Broker and a Zookeeper Node (Kakfa will be used as upstream source for the demo)"),(0,a.kt)("li",{parentName:"ul"},"Adhoc containers to run Hudi/Hive CLI commands")),(0,a.kt)("h2",{id:"demo"},"Demo"),(0,a.kt)("p",null,"Stock Tracker data will be used to showcase both different Hudi Views and the effects of Compaction."),(0,a.kt)("p",null,"Take a look at the directory ",(0,a.kt)("inlineCode",{parentName:"p"},"docker/demo/data"),". There are 2 batches of stock data - each at 1 minute granularity.\nThe first batch contains stocker tracker data for some stock symbols during the first hour of trading window\n(9:30 a.m to 10:30 a.m). The second batch contains tracker data for next 30 mins (10:30 - 11 a.m). Hudi will\nbe used to ingest these batches to a dataset which will contain the latest stock tracker data at hour level granularity.\nThe batches are windowed intentionally so that the second batch contains updates to some of the rows in the first batch."),(0,a.kt)("h3",{id:"step-1--publish-the-first-batch-to-kafka"},"Step 1 : Publish the first batch to Kafka"),(0,a.kt)("p",null,"Upload the first batch to Kafka topic 'stock ticks' ",(0,a.kt)("inlineCode",{parentName:"p"},"cat docker/demo/data/batch_1.json | kafkacat -b kafkabroker -t stock_ticks -P")),(0,a.kt)("p",null,"To check if the new topic shows up, use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'kafkacat -b kafkabroker -L -J | jq .\n{\n  "originating_broker": {\n    "id": 1001,\n    "name": "kafkabroker:9092/1001"\n  },\n  "query": {\n    "topic": "*"\n  },\n  "brokers": [\n    {\n      "id": 1001,\n      "name": "kafkabroker:9092"\n    }\n  ],\n  "topics": [\n    {\n      "topic": "stock_ticks",\n      "partitions": [\n        {\n          "partition": 0,\n          "leader": 1001,\n          "replicas": [\n            {\n              "id": 1001\n            }\n          ],\n          "isrs": [\n            {\n              "id": 1001\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n\n')),(0,a.kt)("h3",{id:"step-2-incrementally-ingest-data-from-kafka-topic"},"Step 2: Incrementally ingest data from Kafka topic"),(0,a.kt)("p",null,"Hudi comes with a tool named DeltaStreamer. This tool can connect to variety of data sources (including Kafka) to\npull changes and apply to Hudi dataset using upsert/insert primitives. Here, we will use the tool to download\njson data from kafka topic and ingest to both COW and MOR tables we initialized in the previous step. This tool\nautomatically initializes the datasets in the file-system if they do not exist yet."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"docker exec -it adhoc-2 /bin/bash\n\n# Run the following spark-submit command to execute the delta-streamer and ingest to stock_ticks_cow dataset in HDFS\nspark-submit --class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer $HUDI_UTILITIES_BUNDLE --storage-type COPY_ON_WRITE --source-class org.apache.hudi.utilities.sources.JsonKafkaSource --source-ordering-field ts  --target-base-path /user/hive/warehouse/stock_ticks_cow --target-table stock_ticks_cow --props /var/demo/config/kafka-source.properties --schemaprovider-class org.apache.hudi.utilities.schema.FilebasedSchemaProvider\n\n\n# Run the following spark-submit command to execute the delta-streamer and ingest to stock_ticks_mor dataset in HDFS\nspark-submit --class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer $HUDI_UTILITIES_BUNDLE --storage-type MERGE_ON_READ --source-class org.apache.hudi.utilities.sources.JsonKafkaSource --source-ordering-field ts  --target-base-path /user/hive/warehouse/stock_ticks_mor --target-table stock_ticks_mor --props /var/demo/config/kafka-source.properties --schemaprovider-class org.apache.hudi.utilities.schema.FilebasedSchemaProvider --disable-compaction\n\n\n# As part of the setup (Look at setup_demo.sh), the configs needed for DeltaStreamer is uploaded to HDFS. The configs\n# contain mostly Kafa connectivity settings, the avro-schema to be used for ingesting along with key and partitioning fields.\n\nexit\n")),(0,a.kt)("p",null,"You can use HDFS web-browser to look at the datasets\n",(0,a.kt)("inlineCode",{parentName:"p"},"http://namenode:50070/explorer#/user/hive/warehouse/stock_ticks_cow"),"."),(0,a.kt)("p",null,'You can explore the new partition folder created in the dataset along with a "deltacommit"\nfile under .hoodie which signals a successful commit.'),(0,a.kt)("p",null,"There will be a similar setup when you browse the MOR dataset\n",(0,a.kt)("inlineCode",{parentName:"p"},"http://namenode:50070/explorer#/user/hive/warehouse/stock_ticks_mor")),(0,a.kt)("h3",{id:"step-3-sync-with-hive"},"Step 3: Sync with Hive"),(0,a.kt)("p",null,"At this step, the datasets are available in HDFS. We need to sync with Hive to create new Hive tables and add partitions\ninorder to run Hive queries against those datasets."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"docker exec -it adhoc-2 /bin/bash\n\n# THis command takes in HIveServer URL and COW Hudi Dataset location in HDFS and sync the HDFS state to Hive\n/var/hoodie/ws/hudi-hive-sync/run_sync_tool.sh  --jdbc-url jdbc:hive2://hiveserver:10000 --user hive --pass hive --partitioned-by dt --base-path /user/hive/warehouse/stock_ticks_cow --database default --table stock_ticks_cow\n.....\n2018-09-24 22:22:45,568 INFO  [main] hive.HiveSyncTool (HiveSyncTool.java:syncHoodieTable(112)) - Sync complete for stock_ticks_cow\n.....\n\n# Now run hive-sync for the second data-set in HDFS using Merge-On-Read (MOR storage)\n/var/hoodie/ws/hudi-hive-sync/run_sync_tool.sh  --jdbc-url jdbc:hive2://hiveserver:10000 --user hive --pass hive --partitioned-by dt --base-path /user/hive/warehouse/stock_ticks_mor --database default --table stock_ticks_mor\n...\n2018-09-24 22:23:09,171 INFO  [main] hive.HiveSyncTool (HiveSyncTool.java:syncHoodieTable(112)) - Sync complete for stock_ticks_mor\n...\n2018-09-24 22:23:09,559 INFO  [main] hive.HiveSyncTool (HiveSyncTool.java:syncHoodieTable(112)) - Sync complete for stock_ticks_mor_rt\n....\nexit\n")),(0,a.kt)("p",null,"After executing the above command, you will notice"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"A hive table named ",(0,a.kt)("inlineCode",{parentName:"li"},"stock_ticks_cow")," created which provides Read-Optimized view for the Copy On Write dataset."),(0,a.kt)("li",{parentName:"ol"},"Two new tables ",(0,a.kt)("inlineCode",{parentName:"li"},"stock_ticks_mor")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"stock_ticks_mor_rt")," created for the Merge On Read dataset. The former\nprovides the ReadOptimized view for the Hudi dataset and the later provides the realtime-view for the dataset.")),(0,a.kt)("h3",{id:"step-4-a-run-hive-queries"},"Step 4 (a): Run Hive Queries"),(0,a.kt)("p",null,"Run a hive query to find the latest timestamp ingested for stock symbol 'GOOG'. You will notice that both read-optimized\n(for both COW and MOR dataset)and realtime views (for MOR dataset)give the same value \"10:29 a.m\" as Hudi create a\nparquet file for the first batch of data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"docker exec -it adhoc-2 /bin/bash\nbeeline -u jdbc:hive2://hiveserver:10000 --hiveconf hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat --hiveconf hive.stats.autogather=false\n# List Tables\n0: jdbc:hive2://hiveserver:10000> show tables;\n+---------------------+--+\n|      tab_name       |\n+---------------------+--+\n| stock_ticks_cow     |\n| stock_ticks_mor     |\n| stock_ticks_mor_rt  |\n+---------------------+--+\n2 rows selected (0.801 seconds)\n0: jdbc:hive2://hiveserver:10000>\n\n\n# Look at partitions that were added\n0: jdbc:hive2://hiveserver:10000> show partitions stock_ticks_mor_rt;\n+----------------+--+\n|   partition    |\n+----------------+--+\n| dt=2018-08-31  |\n+----------------+--+\n1 row selected (0.24 seconds)\n\n\n# COPY-ON-WRITE Queries:\n=========================\n\n\n0: jdbc:hive2://hiveserver:10000> select symbol, max(ts) from stock_ticks_cow group by symbol HAVING symbol = 'GOOG';\n+---------+----------------------+--+\n| symbol  |         _c1          |\n+---------+----------------------+--+\n| GOOG    | 2018-08-31 10:29:00  |\n+---------+----------------------+--+\n\nNow, run a projection query:\n\n0: jdbc:hive2://hiveserver:10000> select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_cow where  symbol = 'GOOG';\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924221953       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924221953       | GOOG    | 2018-08-31 10:29:00  | 3391    | 1230.1899  | 1230.085  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\n\n# Merge-On-Read Queries:\n==========================\n\nLets run similar queries against M-O-R dataset. Lets look at both\nReadOptimized and Realtime views supported by M-O-R dataset\n\n# Run against ReadOptimized View. Notice that the latest timestamp is 10:29\n0: jdbc:hive2://hiveserver:10000> select symbol, max(ts) from stock_ticks_mor group by symbol HAVING symbol = 'GOOG';\nWARNING: Hive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. spark, tez) or using Hive 1.X releases.\n+---------+----------------------+--+\n| symbol  |         _c1          |\n+---------+----------------------+--+\n| GOOG    | 2018-08-31 10:29:00  |\n+---------+----------------------+--+\n1 row selected (6.326 seconds)\n\n\n# Run against Realtime View. Notice that the latest timestamp is again 10:29\n\n0: jdbc:hive2://hiveserver:10000> select symbol, max(ts) from stock_ticks_mor_rt group by symbol HAVING symbol = 'GOOG';\nWARNING: Hive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. spark, tez) or using Hive 1.X releases.\n+---------+----------------------+--+\n| symbol  |         _c1          |\n+---------+----------------------+--+\n| GOOG    | 2018-08-31 10:29:00  |\n+---------+----------------------+--+\n1 row selected (1.606 seconds)\n\n\n# Run projection query against Read Optimized and Realtime tables\n\n0: jdbc:hive2://hiveserver:10000> select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor where  symbol = 'GOOG';\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924222155       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924222155       | GOOG    | 2018-08-31 10:29:00  | 3391    | 1230.1899  | 1230.085  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\n0: jdbc:hive2://hiveserver:10000> select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor_rt where  symbol = 'GOOG';\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924222155       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924222155       | GOOG    | 2018-08-31 10:29:00  | 3391    | 1230.1899  | 1230.085  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\nexit\nexit\n")),(0,a.kt)("h3",{id:"step-4-b-run-spark-sql-queries"},"Step 4 (b): Run Spark-SQL Queries"),(0,a.kt)("p",null,"Hudi support Spark as query processor just like Hive. Here are the same hive queries\nrunning in spark-sql"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'docker exec -it adhoc-1 /bin/bash\n$SPARK_INSTALL/bin/spark-shell --jars $HUDI_SPARK_BUNDLE --master local[2] --driver-class-path $HADOOP_CONF_DIR --conf spark.sql.hive.convertMetastoreParquet=false --deploy-mode client  --driver-memory 1G --executor-memory 3G --num-executors 1  --packages com.databricks:spark-avro_2.11:4.0.0\n...\n\nWelcome to\n      ____              __\n     / __/__  ___ _____/ /__\n    _\\ \\/ _ \\/ _ `/ __/  \'_/\n   /___/ .__/\\_,_/_/ /_/\\_\\   version 2.3.1\n      /_/\n\nUsing Scala version 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_181)\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala>\nscala> spark.sql("show tables").show(100, false)\n+--------+------------------+-----------+\n|database|tableName         |isTemporary|\n+--------+------------------+-----------+\n|default |stock_ticks_cow   |false      |\n|default |stock_ticks_mor   |false      |\n|default |stock_ticks_mor_rt|false      |\n+--------+------------------+-----------+\n\n# Copy-On-Write Table\n\n## Run max timestamp query against COW table\n\nscala> spark.sql("select symbol, max(ts) from stock_ticks_cow group by symbol HAVING symbol = \'GOOG\'").show(100, false)\n[Stage 0:>                                                          (0 + 1) / 1]SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes#StaticLoggerBinder for further details.\n+------+-------------------+\n|symbol|max(ts)            |\n+------+-------------------+\n|GOOG  |2018-08-31 10:29:00|\n+------+-------------------+\n\n## Projection Query\n\nscala> spark.sql("select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_cow where  symbol = \'GOOG\'").show(100, false)\n+-------------------+------+-------------------+------+---------+--------+\n|_hoodie_commit_time|symbol|ts                 |volume|open     |close   |\n+-------------------+------+-------------------+------+---------+--------+\n|20180924221953     |GOOG  |2018-08-31 09:59:00|6330  |1230.5   |1230.02 |\n|20180924221953     |GOOG  |2018-08-31 10:29:00|3391  |1230.1899|1230.085|\n+-------------------+------+-------------------+------+---------+--------+\n\n# Merge-On-Read Queries:\n==========================\n\nLets run similar queries against M-O-R dataset. Lets look at both\nReadOptimized and Realtime views supported by M-O-R dataset\n\n# Run against ReadOptimized View. Notice that the latest timestamp is 10:29\nscala> spark.sql("select symbol, max(ts) from stock_ticks_mor group by symbol HAVING symbol = \'GOOG\'").show(100, false)\n+------+-------------------+\n|symbol|max(ts)            |\n+------+-------------------+\n|GOOG  |2018-08-31 10:29:00|\n+------+-------------------+\n\n\n# Run against Realtime View. Notice that the latest timestamp is again 10:29\n\nscala> spark.sql("select symbol, max(ts) from stock_ticks_mor_rt group by symbol HAVING symbol = \'GOOG\'").show(100, false)\n+------+-------------------+\n|symbol|max(ts)            |\n+------+-------------------+\n|GOOG  |2018-08-31 10:29:00|\n+------+-------------------+\n\n# Run projection query against Read Optimized and Realtime tables\n\nscala> spark.sql("select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor where  symbol = \'GOOG\'").show(100, false)\n+-------------------+------+-------------------+------+---------+--------+\n|_hoodie_commit_time|symbol|ts                 |volume|open     |close   |\n+-------------------+------+-------------------+------+---------+--------+\n|20180924222155     |GOOG  |2018-08-31 09:59:00|6330  |1230.5   |1230.02 |\n|20180924222155     |GOOG  |2018-08-31 10:29:00|3391  |1230.1899|1230.085|\n+-------------------+------+-------------------+------+---------+--------+\n\nscala> spark.sql("select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor_rt where  symbol = \'GOOG\'").show(100, false)\n+-------------------+------+-------------------+------+---------+--------+\n|_hoodie_commit_time|symbol|ts                 |volume|open     |close   |\n+-------------------+------+-------------------+------+---------+--------+\n|20180924222155     |GOOG  |2018-08-31 09:59:00|6330  |1230.5   |1230.02 |\n|20180924222155     |GOOG  |2018-08-31 10:29:00|3391  |1230.1899|1230.085|\n+-------------------+------+-------------------+------+---------+--------+\n\n')),(0,a.kt)("h3",{id:"step-4-c-run-presto-queries"},"Step 4 (c): Run Presto Queries"),(0,a.kt)("p",null,"Here are the Presto queries for similar Hive and Spark queries. Currently, Hudi does not support Presto queries on realtime views."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"docker exec -it presto-worker-1 presto --server presto-coordinator-1:8090\npresto> show catalogs;\n  Catalog\n-----------\n hive\n jmx\n localfile\n system\n(4 rows)\n\nQuery 20190817_134851_00000_j8rcz, FINISHED, 1 node\nSplits: 19 total, 19 done (100.00%)\n0:04 [0 rows, 0B] [0 rows/s, 0B/s]\n\npresto> use hive.default;\nUSE\npresto:default> show tables;\n       Table\n--------------------\n stock_ticks_cow\n stock_ticks_mor\n stock_ticks_mor_rt\n(3 rows)\n\nQuery 20190822_181000_00001_segyw, FINISHED, 2 nodes\nSplits: 19 total, 19 done (100.00%)\n0:05 [3 rows, 99B] [0 rows/s, 18B/s]\n\n\n# COPY-ON-WRITE Queries:\n=========================\n\n\npresto:default> select symbol, max(ts) from stock_ticks_cow group by symbol HAVING symbol = 'GOOG';\n symbol |        _col1\n--------+---------------------\n GOOG   | 2018-08-31 10:29:00\n(1 row)\n\nQuery 20190822_181011_00002_segyw, FINISHED, 1 node\nSplits: 49 total, 49 done (100.00%)\n0:12 [197 rows, 613B] [16 rows/s, 50B/s]\n\npresto:default> select \"_hoodie_commit_time\", symbol, ts, volume, open, close from stock_ticks_cow where symbol = 'GOOG';\n _hoodie_commit_time | symbol |         ts          | volume |   open    |  close\n---------------------+--------+---------------------+--------+-----------+----------\n 20190822180221      | GOOG   | 2018-08-31 09:59:00 |   6330 |    1230.5 |  1230.02\n 20190822180221      | GOOG   | 2018-08-31 10:29:00 |   3391 | 1230.1899 | 1230.085\n(2 rows)\n\nQuery 20190822_181141_00003_segyw, FINISHED, 1 node\nSplits: 17 total, 17 done (100.00%)\n0:02 [197 rows, 613B] [109 rows/s, 341B/s]\n\n\n# Merge-On-Read Queries:\n==========================\n\nLets run similar queries against M-O-R dataset. \n\n# Run against ReadOptimized View. Notice that the latest timestamp is 10:29\npresto:default> select symbol, max(ts) from stock_ticks_mor group by symbol HAVING symbol = 'GOOG';\n symbol |        _col1\n--------+---------------------\n GOOG   | 2018-08-31 10:29:00\n(1 row)\n\nQuery 20190822_181158_00004_segyw, FINISHED, 1 node\nSplits: 49 total, 49 done (100.00%)\n0:02 [197 rows, 613B] [110 rows/s, 343B/s]\n\n\npresto:default>  select \"_hoodie_commit_time\", symbol, ts, volume, open, close  from stock_ticks_mor where  symbol = 'GOOG';\n _hoodie_commit_time | symbol |         ts          | volume |   open    |  close\n---------------------+--------+---------------------+--------+-----------+----------\n 20190822180250      | GOOG   | 2018-08-31 09:59:00 |   6330 |    1230.5 |  1230.02\n 20190822180250      | GOOG   | 2018-08-31 10:29:00 |   3391 | 1230.1899 | 1230.085\n(2 rows)\n\nQuery 20190822_181256_00006_segyw, FINISHED, 1 node\nSplits: 17 total, 17 done (100.00%)\n0:02 [197 rows, 613B] [92 rows/s, 286B/s]\n\npresto:default> exit\n")),(0,a.kt)("h3",{id:"step-5-upload-second-batch-to-kafka-and-run-deltastreamer-to-ingest"},"Step 5: Upload second batch to Kafka and run DeltaStreamer to ingest"),(0,a.kt)("p",null,"Upload the second batch of data and ingest this batch using delta-streamer. As this batch does not bring in any new\npartitions, there is no need to run hive-sync"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"cat docker/demo/data/batch_2.json | kafkacat -b kafkabroker -t stock_ticks -P\n\n# Within Docker container, run the ingestion command\ndocker exec -it adhoc-2 /bin/bash\n\n# Run the following spark-submit command to execute the delta-streamer and ingest to stock_ticks_cow dataset in HDFS\nspark-submit --class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer $HUDI_UTILITIES_BUNDLE --storage-type COPY_ON_WRITE --source-class org.apache.hudi.utilities.sources.JsonKafkaSource --source-ordering-field ts  --target-base-path /user/hive/warehouse/stock_ticks_cow --target-table stock_ticks_cow --props /var/demo/config/kafka-source.properties --schemaprovider-class org.apache.hudi.utilities.schema.FilebasedSchemaProvider\n\n\n# Run the following spark-submit command to execute the delta-streamer and ingest to stock_ticks_mor dataset in HDFS\nspark-submit --class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer $HUDI_UTILITIES_BUNDLE --storage-type MERGE_ON_READ --source-class org.apache.hudi.utilities.sources.JsonKafkaSource --source-ordering-field ts  --target-base-path /user/hive/warehouse/stock_ticks_mor --target-table stock_ticks_mor --props /var/demo/config/kafka-source.properties --schemaprovider-class org.apache.hudi.utilities.schema.FilebasedSchemaProvider --disable-compaction\n\nexit\n")),(0,a.kt)("p",null,"With Copy-On-Write table, the second ingestion by DeltaStreamer resulted in a new version of Parquet file getting created.\nSee ",(0,a.kt)("inlineCode",{parentName:"p"},"http://namenode:50070/explorer#/user/hive/warehouse/stock_ticks_cow/2018/08/31")),(0,a.kt)("p",null,"With Merge-On-Read table, the second ingestion merely appended the batch to an unmerged delta (log) file.\nTake a look at the HDFS filesystem to get an idea: ",(0,a.kt)("inlineCode",{parentName:"p"},"http://namenode:50070/explorer#/user/hive/warehouse/stock_ticks_mor/2018/08/31")),(0,a.kt)("h3",{id:"step-6a-run-hive-queries"},"Step 6(a): Run Hive Queries"),(0,a.kt)("p",null,"With Copy-On-Write table, the read-optimized view immediately sees the changes as part of second batch once the batch\ngot committed as each ingestion creates newer versions of parquet files."),(0,a.kt)("p",null,'With Merge-On-Read table, the second ingestion merely appended the batch to an unmerged delta (log) file.\nThis is the time, when ReadOptimized and Realtime views will provide different results. ReadOptimized view will still\nreturn "10:29 am" as it will only read from the Parquet file. Realtime View will do on-the-fly merge and return\nlatest committed data which is "10:59 a.m".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"docker exec -it adhoc-2 /bin/bash\nbeeline -u jdbc:hive2://hiveserver:10000 --hiveconf hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat --hiveconf hive.stats.autogather=false\n\n# Copy On Write Table:\n\n0: jdbc:hive2://hiveserver:10000> select symbol, max(ts) from stock_ticks_cow group by symbol HAVING symbol = 'GOOG';\nWARNING: Hive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. spark, tez) or using Hive 1.X releases.\n+---------+----------------------+--+\n| symbol  |         _c1          |\n+---------+----------------------+--+\n| GOOG    | 2018-08-31 10:59:00  |\n+---------+----------------------+--+\n1 row selected (1.932 seconds)\n\n0: jdbc:hive2://hiveserver:10000> select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_cow where  symbol = 'GOOG';\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924221953       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924224524       | GOOG    | 2018-08-31 10:59:00  | 9021    | 1227.1993  | 1227.215  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\nAs you can notice, the above queries now reflect the changes that came as part of ingesting second batch.\n\n\n# Merge On Read Table:\n\n# Read Optimized View\n0: jdbc:hive2://hiveserver:10000> select symbol, max(ts) from stock_ticks_mor group by symbol HAVING symbol = 'GOOG';\nWARNING: Hive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. spark, tez) or using Hive 1.X releases.\n+---------+----------------------+--+\n| symbol  |         _c1          |\n+---------+----------------------+--+\n| GOOG    | 2018-08-31 10:29:00  |\n+---------+----------------------+--+\n1 row selected (1.6 seconds)\n\n0: jdbc:hive2://hiveserver:10000> select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor where  symbol = 'GOOG';\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924222155       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924222155       | GOOG    | 2018-08-31 10:29:00  | 3391    | 1230.1899  | 1230.085  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\n# Realtime View\n0: jdbc:hive2://hiveserver:10000> select symbol, max(ts) from stock_ticks_mor_rt group by symbol HAVING symbol = 'GOOG';\nWARNING: Hive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. spark, tez) or using Hive 1.X releases.\n+---------+----------------------+--+\n| symbol  |         _c1          |\n+---------+----------------------+--+\n| GOOG    | 2018-08-31 10:59:00  |\n+---------+----------------------+--+\n\n0: jdbc:hive2://hiveserver:10000> select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor_rt where  symbol = 'GOOG';\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924222155       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924224537       | GOOG    | 2018-08-31 10:59:00  | 9021    | 1227.1993  | 1227.215  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\nexit\nexit\n")),(0,a.kt)("h3",{id:"step-6b-run-spark-sql-queries"},"Step 6(b): Run Spark SQL Queries"),(0,a.kt)("p",null,"Running the same queries in Spark-SQL:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"docker exec -it adhoc-1 /bin/bash\nbash-4.4# $SPARK_INSTALL/bin/spark-shell --jars $HUDI_SPARK_BUNDLE --driver-class-path $HADOOP_CONF_DIR --conf spark.sql.hive.convertMetastoreParquet=false --deploy-mode client  --driver-memory 1G --master local[2] --executor-memory 3G --num-executors 1  --packages com.databricks:spark-avro_2.11:4.0.0\n\n# Copy On Write Table:\n\nscala> spark.sql(\"select symbol, max(ts) from stock_ticks_cow group by symbol HAVING symbol = 'GOOG'\").show(100, false)\n+------+-------------------+\n|symbol|max(ts)            |\n+------+-------------------+\n|GOOG  |2018-08-31 10:59:00|\n+------+-------------------+\n\nscala> spark.sql(\"select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_cow where  symbol = 'GOOG'\").show(100, false)\n\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924221953       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924224524       | GOOG    | 2018-08-31 10:59:00  | 9021    | 1227.1993  | 1227.215  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\nAs you can notice, the above queries now reflect the changes that came as part of ingesting second batch.\n\n\n# Merge On Read Table:\n\n# Read Optimized View\nscala> spark.sql(\"select symbol, max(ts) from stock_ticks_mor group by symbol HAVING symbol = 'GOOG'\").show(100, false)\n+---------+----------------------+--+\n| symbol  |         _c1          |\n+---------+----------------------+--+\n| GOOG    | 2018-08-31 10:29:00  |\n+---------+----------------------+--+\n1 row selected (1.6 seconds)\n\nscala> spark.sql(\"select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor where  symbol = 'GOOG'\").show(100, false)\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924222155       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924222155       | GOOG    | 2018-08-31 10:29:00  | 3391    | 1230.1899  | 1230.085  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\n# Realtime View\nscala> spark.sql(\"select symbol, max(ts) from stock_ticks_mor_rt group by symbol HAVING symbol = 'GOOG'\").show(100, false)\n+---------+----------------------+--+\n| symbol  |         _c1          |\n+---------+----------------------+--+\n| GOOG    | 2018-08-31 10:59:00  |\n+---------+----------------------+--+\n\nscala> spark.sql(\"select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor_rt where  symbol = 'GOOG'\").show(100, false)\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924222155       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924224537       | GOOG    | 2018-08-31 10:59:00  | 9021    | 1227.1993  | 1227.215  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\nexit\nexit\n")),(0,a.kt)("h3",{id:"step-6c-run-presto-queries"},"Step 6(c): Run Presto Queries"),(0,a.kt)("p",null,"Running the same queries on Presto for ReadOptimized views. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"docker exec -it presto-worker-1 presto --server presto-coordinator-1:8090\npresto> use hive.default;\nUSE\n\n# Copy On Write Table:\n\npresto:default>select symbol, max(ts) from stock_ticks_cow group by symbol HAVING symbol = 'GOOG';\n symbol |        _col1\n--------+---------------------\n GOOG   | 2018-08-31 10:59:00\n(1 row)\n\nQuery 20190822_181530_00007_segyw, FINISHED, 1 node\nSplits: 49 total, 49 done (100.00%)\n0:02 [197 rows, 613B] [125 rows/s, 389B/s]\n\npresto:default>select \"_hoodie_commit_time\", symbol, ts, volume, open, close  from stock_ticks_cow where  symbol = 'GOOG';\n _hoodie_commit_time | symbol |         ts          | volume |   open    |  close\n---------------------+--------+---------------------+--------+-----------+----------\n 20190822180221      | GOOG   | 2018-08-31 09:59:00 |   6330 |    1230.5 |  1230.02\n 20190822181433      | GOOG   | 2018-08-31 10:59:00 |   9021 | 1227.1993 | 1227.215\n(2 rows)\n\nQuery 20190822_181545_00008_segyw, FINISHED, 1 node\nSplits: 17 total, 17 done (100.00%)\n0:02 [197 rows, 613B] [106 rows/s, 332B/s]\n\nAs you can notice, the above queries now reflect the changes that came as part of ingesting second batch.\n\n\n# Merge On Read Table:\n\n# Read Optimized View\npresto:default> select symbol, max(ts) from stock_ticks_mor group by symbol HAVING symbol = 'GOOG';\n symbol |        _col1\n--------+---------------------\n GOOG   | 2018-08-31 10:29:00\n(1 row)\n\nQuery 20190822_181602_00009_segyw, FINISHED, 1 node\nSplits: 49 total, 49 done (100.00%)\n0:01 [197 rows, 613B] [139 rows/s, 435B/s]\n\npresto:default>select \"_hoodie_commit_time\", symbol, ts, volume, open, close  from stock_ticks_mor where  symbol = 'GOOG';\n _hoodie_commit_time | symbol |         ts          | volume |   open    |  close\n---------------------+--------+---------------------+--------+-----------+----------\n 20190822180250      | GOOG   | 2018-08-31 09:59:00 |   6330 |    1230.5 |  1230.02\n 20190822180250      | GOOG   | 2018-08-31 10:29:00 |   3391 | 1230.1899 | 1230.085\n(2 rows)\n\nQuery 20190822_181615_00010_segyw, FINISHED, 1 node\nSplits: 17 total, 17 done (100.00%)\n0:01 [197 rows, 613B] [154 rows/s, 480B/s]\n\npresto:default> exit\n")),(0,a.kt)("h3",{id:"step-7--incremental-query-for-copy-on-write-table"},"Step 7 : Incremental Query for COPY-ON-WRITE Table"),(0,a.kt)("p",null,"With 2 batches of data ingested, lets showcase the support for incremental queries in Hudi Copy-On-Write datasets"),(0,a.kt)("p",null,"Lets take the same projection query example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"docker exec -it adhoc-2 /bin/bash\nbeeline -u jdbc:hive2://hiveserver:10000 --hiveconf hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat --hiveconf hive.stats.autogather=false\n\n0: jdbc:hive2://hiveserver:10000> select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_cow where  symbol = 'GOOG';\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924064621       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924065039       | GOOG    | 2018-08-31 10:59:00  | 9021    | 1227.1993  | 1227.215  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n")),(0,a.kt)("p",null,"As you notice from the above queries, there are 2 commits - 20180924064621 and 20180924065039 in timeline order.\nWhen you follow the steps, you will be getting different timestamps for commits. Substitute them\nin place of the above timestamps."),(0,a.kt)("p",null,"To show the effects of incremental-query, let us assume that a reader has already seen the changes as part of\ningesting first batch. Now, for the reader to see effect of the second batch, he/she has to keep the start timestamp to\nthe commit time of the first batch (20180924064621) and run incremental query"),(0,a.kt)("p",null,"Hudi incremental mode provides efficient scanning for incremental queries by filtering out files that do not have any\ncandidate rows using hudi-managed metadata."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"docker exec -it adhoc-2 /bin/bash\nbeeline -u jdbc:hive2://hiveserver:10000 --hiveconf hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat --hiveconf hive.stats.autogather=false\n0: jdbc:hive2://hiveserver:10000> set hoodie.stock_ticks_cow.consume.mode=INCREMENTAL;\nNo rows affected (0.009 seconds)\n0: jdbc:hive2://hiveserver:10000>  set hoodie.stock_ticks_cow.consume.max.commits=3;\nNo rows affected (0.009 seconds)\n0: jdbc:hive2://hiveserver:10000> set hoodie.stock_ticks_cow.consume.start.timestamp=20180924064621;\n")),(0,a.kt)("p",null,"With the above setting, file-ids that do not have any updates from the commit 20180924065039 is filtered out without scanning.\nHere is the incremental query :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"0: jdbc:hive2://hiveserver:10000>\n0: jdbc:hive2://hiveserver:10000> select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_cow where  symbol = 'GOOG' and `_hoodie_commit_time` > '20180924064621';\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924065039       | GOOG    | 2018-08-31 10:59:00  | 9021    | 1227.1993  | 1227.215  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n1 row selected (0.83 seconds)\n0: jdbc:hive2://hiveserver:10000>\n")),(0,a.kt)("h3",{id:"incremental-query-with-spark-sql"},"Incremental Query with Spark SQL:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'docker exec -it adhoc-1 /bin/bash\nbash-4.4# $SPARK_INSTALL/bin/spark-shell --jars $HUDI_SPARK_BUNDLE --driver-class-path $HADOOP_CONF_DIR --conf spark.sql.hive.convertMetastoreParquet=false --deploy-mode client  --driver-memory 1G --master local[2] --executor-memory 3G --num-executors 1  --packages com.databricks:spark-avro_2.11:4.0.0\nWelcome to\n      ____              __\n     / __/__  ___ _____/ /__\n    _\\ \\/ _ \\/ _ `/ __/  \'_/\n   /___/ .__/\\_,_/_/ /_/\\_\\   version 2.3.1\n      /_/\n\nUsing Scala version 2.11.8 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_181)\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala> import org.apache.hudi.DataSourceReadOptions\nimport org.apache.hudi.DataSourceReadOptions\n\n# In the below query, 20180925045257 is the first commit\'s timestamp\nscala> val hoodieIncViewDF =  spark.read.format("org.apache.hudi").option(DataSourceReadOptions.VIEW_TYPE_OPT_KEY, DataSourceReadOptions.VIEW_TYPE_INCREMENTAL_OPT_VAL).option(DataSourceReadOptions.BEGIN_INSTANTTIME_OPT_KEY, "20180924064621").load("/user/hive/warehouse/stock_ticks_cow")\nSLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes#StaticLoggerBinder for further details.\nhoodieIncViewDF: org.apache.spark.sql.DataFrame = [_hoodie_commit_time: string, _hoodie_commit_seqno: string ... 15 more fields]\n\nscala> hoodieIncViewDF.registerTempTable("stock_ticks_cow_incr_tmp1")\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nscala> spark.sql("select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_cow_incr_tmp1 where  symbol = \'GOOG\'").show(100, false);\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924065039       | GOOG    | 2018-08-31 10:59:00  | 9021    | 1227.1993  | 1227.215  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\n')),(0,a.kt)("h3",{id:"step-8-schedule-and-run-compaction-for-merge-on-read-dataset"},"Step 8: Schedule and Run Compaction for Merge-On-Read dataset"),(0,a.kt)("p",null,"Lets schedule and run a compaction to create a new version of columnar  file so that read-optimized readers will see fresher data.\nAgain, You can use Hudi CLI to manually schedule and run compaction"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'docker exec -it adhoc-1 /bin/bash\nroot@adhoc-1:/opt#   /var/hoodie/ws/hudi-cli/hudi-cli.sh\n============================================\n*                                          *\n*     _    _           _   _               *\n*    | |  | |         | | (_)              *\n*    | |__| |       __| |  -               *\n*    |  __  ||   | / _` | ||               *\n*    | |  | ||   || (_| | ||               *\n*    |_|  |_|\\___/ \\____/ ||               *\n*                                          *\n============================================\n\nWelcome to Hoodie CLI. Please type help if you are looking for help.\nhudi->connect --path /user/hive/warehouse/stock_ticks_mor\n18/09/24 06:59:34 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n18/09/24 06:59:35 INFO table.HoodieTableMetaClient: Loading HoodieTableMetaClient from /user/hive/warehouse/stock_ticks_mor\n18/09/24 06:59:35 INFO util.FSUtils: Hadoop Configuration: fs.defaultFS: [hdfs://namenode:8020], Config:[Configuration: core-default.xml, core-site.xml, mapred-default.xml, mapred-site.xml, yarn-default.xml, yarn-site.xml, hdfs-default.xml, hdfs-site.xml], FileSystem: [DFS[DFSClient[clientName=DFSClient_NONMAPREDUCE_-1261652683_11, ugi=root (auth:SIMPLE)]]]\n18/09/24 06:59:35 INFO table.HoodieTableConfig: Loading dataset properties from /user/hive/warehouse/stock_ticks_mor/.hoodie/hoodie.properties\n18/09/24 06:59:36 INFO table.HoodieTableMetaClient: Finished Loading Table of type MERGE_ON_READ from /user/hive/warehouse/stock_ticks_mor\nMetadata for table stock_ticks_mor loaded\n\n# Ensure no compactions are present\n\nhoodie:stock_ticks_mor->compactions show all\n18/09/24 06:59:54 INFO timeline.HoodieActiveTimeline: Loaded instants [[20180924064636__clean__COMPLETED], [20180924064636__deltacommit__COMPLETED], [20180924065057__clean__COMPLETED], [20180924065057__deltacommit__COMPLETED]]\n    ___________________________________________________________________\n    | Compaction Instant Time| State    | Total FileIds to be Compacted|\n    |==================================================================|\n\n\n\n\n# Schedule a compaction. This will use Spark Launcher to schedule compaction\nhoodie:stock_ticks_mor->compaction schedule\n....\nCompaction successfully completed for 20180924070031\n\n# Now refresh and check again. You will see that there is a new compaction requested\n\nhoodie:stock_ticks->connect --path /user/hive/warehouse/stock_ticks_mor\n18/09/24 07:01:16 INFO table.HoodieTableMetaClient: Loading HoodieTableMetaClient from /user/hive/warehouse/stock_ticks_mor\n18/09/24 07:01:16 INFO util.FSUtils: Hadoop Configuration: fs.defaultFS: [hdfs://namenode:8020], Config:[Configuration: core-default.xml, core-site.xml, mapred-default.xml, mapred-site.xml, yarn-default.xml, yarn-site.xml, hdfs-default.xml, hdfs-site.xml], FileSystem: [DFS[DFSClient[clientName=DFSClient_NONMAPREDUCE_-1261652683_11, ugi=root (auth:SIMPLE)]]]\n18/09/24 07:01:16 INFO table.HoodieTableConfig: Loading dataset properties from /user/hive/warehouse/stock_ticks_mor/.hoodie/hoodie.properties\n18/09/24 07:01:16 INFO table.HoodieTableMetaClient: Finished Loading Table of type MERGE_ON_READ from /user/hive/warehouse/stock_ticks_mor\nMetadata for table stock_ticks_mor loaded\n\n\n\nhoodie:stock_ticks_mor->compactions show all\n18/09/24 06:34:12 INFO timeline.HoodieActiveTimeline: Loaded instants [[20180924041125__clean__COMPLETED], [20180924041125__deltacommit__COMPLETED], [20180924042735__clean__COMPLETED], [20180924042735__deltacommit__COMPLETED], [==>20180924063245__compaction__REQUESTED]]\n    ___________________________________________________________________\n    | Compaction Instant Time| State    | Total FileIds to be Compacted|\n    |==================================================================|\n    | 20180924070031         | REQUESTED| 1                            |\n\n\n\n\n# Execute the compaction. The compaction instant value passed below must be the one displayed in the above "compactions show all" query\nhoodie:stock_ticks_mor->compaction run --compactionInstant  20180924070031 --parallelism 2 --sparkMemory 1G  --schemaFilePath /var/demo/config/schema.avsc --retry 1  \n....\nCompaction successfully completed for 20180924070031\n\n\n## Now check if compaction is completed\n\nhoodie:stock_ticks_mor->connect --path /user/hive/warehouse/stock_ticks_mor\n18/09/24 07:03:00 INFO table.HoodieTableMetaClient: Loading HoodieTableMetaClient from /user/hive/warehouse/stock_ticks_mor\n18/09/24 07:03:00 INFO util.FSUtils: Hadoop Configuration: fs.defaultFS: [hdfs://namenode:8020], Config:[Configuration: core-default.xml, core-site.xml, mapred-default.xml, mapred-site.xml, yarn-default.xml, yarn-site.xml, hdfs-default.xml, hdfs-site.xml], FileSystem: [DFS[DFSClient[clientName=DFSClient_NONMAPREDUCE_-1261652683_11, ugi=root (auth:SIMPLE)]]]\n18/09/24 07:03:00 INFO table.HoodieTableConfig: Loading dataset properties from /user/hive/warehouse/stock_ticks_mor/.hoodie/hoodie.properties\n18/09/24 07:03:00 INFO table.HoodieTableMetaClient: Finished Loading Table of type MERGE_ON_READ from /user/hive/warehouse/stock_ticks_mor\nMetadata for table stock_ticks_mor loaded\n\n\n\nhoodie:stock_ticks->compactions show all\n18/09/24 07:03:15 INFO timeline.HoodieActiveTimeline: Loaded instants [[20180924064636__clean__COMPLETED], [20180924064636__deltacommit__COMPLETED], [20180924065057__clean__COMPLETED], [20180924065057__deltacommit__COMPLETED], [20180924070031__commit__COMPLETED]]\n    ___________________________________________________________________\n    | Compaction Instant Time| State    | Total FileIds to be Compacted|\n    |==================================================================|\n    | 20180924070031         | COMPLETED| 1                            |\n\n')),(0,a.kt)("h3",{id:"step-9-run-hive-queries-including-incremental-queries"},"Step 9: Run Hive Queries including incremental queries"),(0,a.kt)("p",null,"You will see that both ReadOptimized and Realtime Views will show the latest committed data.\nLets also run the incremental query for MOR table.\nFrom looking at the below query output, it will be clear that the fist commit time for the MOR table is 20180924064636\nand the second commit time is 20180924070031"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"docker exec -it adhoc-2 /bin/bash\nbeeline -u jdbc:hive2://hiveserver:10000 --hiveconf hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat --hiveconf hive.stats.autogather=false\n\n# Read Optimized View\n0: jdbc:hive2://hiveserver:10000> select symbol, max(ts) from stock_ticks_mor group by symbol HAVING symbol = 'GOOG';\nWARNING: Hive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. spark, tez) or using Hive 1.X releases.\n+---------+----------------------+--+\n| symbol  |         _c1          |\n+---------+----------------------+--+\n| GOOG    | 2018-08-31 10:59:00  |\n+---------+----------------------+--+\n1 row selected (1.6 seconds)\n\n0: jdbc:hive2://hiveserver:10000> select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor where  symbol = 'GOOG';\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924064636       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924070031       | GOOG    | 2018-08-31 10:59:00  | 9021    | 1227.1993  | 1227.215  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\n# Realtime View\n0: jdbc:hive2://hiveserver:10000> select symbol, max(ts) from stock_ticks_mor_rt group by symbol HAVING symbol = 'GOOG';\nWARNING: Hive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. spark, tez) or using Hive 1.X releases.\n+---------+----------------------+--+\n| symbol  |         _c1          |\n+---------+----------------------+--+\n| GOOG    | 2018-08-31 10:59:00  |\n+---------+----------------------+--+\n\n0: jdbc:hive2://hiveserver:10000> select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor_rt where  symbol = 'GOOG';\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924064636       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924070031       | GOOG    | 2018-08-31 10:59:00  | 9021    | 1227.1993  | 1227.215  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\n# Incremental View:\n\n0: jdbc:hive2://hiveserver:10000> set hoodie.stock_ticks_mor.consume.mode=INCREMENTAL;\nNo rows affected (0.008 seconds)\n# Max-Commits covers both second batch and compaction commit\n0: jdbc:hive2://hiveserver:10000> set hoodie.stock_ticks_mor.consume.max.commits=3;\nNo rows affected (0.007 seconds)\n0: jdbc:hive2://hiveserver:10000> set hoodie.stock_ticks_mor.consume.start.timestamp=20180924064636;\nNo rows affected (0.013 seconds)\n# Query:\n0: jdbc:hive2://hiveserver:10000> select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor where  symbol = 'GOOG' and `_hoodie_commit_time` > '20180924064636';\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924070031       | GOOG    | 2018-08-31 10:59:00  | 9021    | 1227.1993  | 1227.215  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\nexit\nexit\n")),(0,a.kt)("h3",{id:"step-10-read-optimized-and-realtime-views-for-mor-with-spark-sql-after-compaction"},"Step 10: Read Optimized and Realtime Views for MOR with Spark-SQL after compaction"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"docker exec -it adhoc-1 /bin/bash\nbash-4.4# $SPARK_INSTALL/bin/spark-shell --jars $HUDI_SPARK_BUNDLE --driver-class-path $HADOOP_CONF_DIR --conf spark.sql.hive.convertMetastoreParquet=false --deploy-mode client  --driver-memory 1G --master local[2] --executor-memory 3G --num-executors 1  --packages com.databricks:spark-avro_2.11:4.0.0\n\n# Read Optimized View\nscala> spark.sql(\"select symbol, max(ts) from stock_ticks_mor group by symbol HAVING symbol = 'GOOG'\").show(100, false)\n+---------+----------------------+--+\n| symbol  |         _c1          |\n+---------+----------------------+--+\n| GOOG    | 2018-08-31 10:59:00  |\n+---------+----------------------+--+\n1 row selected (1.6 seconds)\n\nscala> spark.sql(\"select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor where  symbol = 'GOOG'\").show(100, false)\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924064636       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924070031       | GOOG    | 2018-08-31 10:59:00  | 9021    | 1227.1993  | 1227.215  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n\n# Realtime View\nscala> spark.sql(\"select symbol, max(ts) from stock_ticks_mor_rt group by symbol HAVING symbol = 'GOOG'\").show(100, false)\n+---------+----------------------+--+\n| symbol  |         _c1          |\n+---------+----------------------+--+\n| GOOG    | 2018-08-31 10:59:00  |\n+---------+----------------------+--+\n\nscala> spark.sql(\"select `_hoodie_commit_time`, symbol, ts, volume, open, close  from stock_ticks_mor_rt where  symbol = 'GOOG'\").show(100, false)\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| _hoodie_commit_time  | symbol  |          ts          | volume  |    open    |   close   |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n| 20180924064636       | GOOG    | 2018-08-31 09:59:00  | 6330    | 1230.5     | 1230.02   |\n| 20180924070031       | GOOG    | 2018-08-31 10:59:00  | 9021    | 1227.1993  | 1227.215  |\n+----------------------+---------+----------------------+---------+------------+-----------+--+\n")),(0,a.kt)("h3",{id:"step-11--presto-queries-over-read-optimized-view-on-mor-dataset-after-compaction"},"Step 11:  Presto queries over Read Optimized View on MOR dataset after compaction"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"docker exec -it presto-worker-1 presto --server presto-coordinator-1:8090\npresto> use hive.default;\nUSE\n\n# Read Optimized View\nresto:default> select symbol, max(ts) from stock_ticks_mor group by symbol HAVING symbol = 'GOOG';\n  symbol |        _col1\n--------+---------------------\n GOOG   | 2018-08-31 10:59:00\n(1 row)\n\nQuery 20190822_182319_00011_segyw, FINISHED, 1 node\nSplits: 49 total, 49 done (100.00%)\n0:01 [197 rows, 613B] [133 rows/s, 414B/s]\n\npresto:default> select \"_hoodie_commit_time\", symbol, ts, volume, open, close  from stock_ticks_mor where  symbol = 'GOOG';\n _hoodie_commit_time | symbol |         ts          | volume |   open    |  close\n---------------------+--------+---------------------+--------+-----------+----------\n 20190822180250      | GOOG   | 2018-08-31 09:59:00 |   6330 |    1230.5 |  1230.02\n 20190822181944      | GOOG   | 2018-08-31 10:59:00 |   9021 | 1227.1993 | 1227.215\n(2 rows)\n\nQuery 20190822_182333_00012_segyw, FINISHED, 1 node\nSplits: 17 total, 17 done (100.00%)\n0:02 [197 rows, 613B] [98 rows/s, 307B/s]\n\npresto:default>\n\n")),(0,a.kt)("p",null,"This brings the demo to an end."),(0,a.kt)("h2",{id:"testing-hudi-in-local-docker-environment"},"Testing Hudi in Local Docker environment"),(0,a.kt)("p",null,"You can bring up a hadoop docker environment containing Hadoop, Hive and Spark services with support for hudi."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"$ mvn pre-integration-test -DskipTests\n")),(0,a.kt)("p",null,"The above command builds docker images for all the services with\ncurrent Hudi source installed at /var/hoodie/ws and also brings up the services using a compose file. We\ncurrently use Hadoop (v2.8.4), Hive (v2.3.3) and Spark (v2.3.1) in docker images."),(0,a.kt)("p",null,"To bring down the containers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"$ cd hudi-integ-test\n$ mvn docker-compose:down\n")),(0,a.kt)("p",null,"If you want to bring up the docker containers, use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"$ cd hudi-integ-test\n$  mvn docker-compose:up -DdetachedMode=true\n")),(0,a.kt)("p",null,"Hudi is a library that is operated in a broader data analytics/ingestion environment\ninvolving Hadoop, Hive and Spark. Interoperability with all these systems is a key objective for us. We are\nactively adding integration-tests under ",(0,a.kt)("strong",{parentName:"p"},"hudi-integ-test/src/test/java")," that makes use of this\ndocker environment (See ",(0,a.kt)("strong",{parentName:"p"},"hudi-integ-test/src/test/java/org/apache/hudi/integ/ITTestHoodieSanity.java")," )"),(0,a.kt)("h3",{id:"building-local-docker-containers"},"Building Local Docker Containers:"),(0,a.kt)("p",null,"The docker images required for demo and running integration test are already in docker-hub. The docker images\nand compose scripts are carefully implemented so that they serve dual-purpose"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The docker images have inbuilt hudi jar files with environment variable pointing to those jars (HUDI_HADOOP_BUNDLE, ...)"),(0,a.kt)("li",{parentName:"ol"},"For running integration-tests, we need the jars generated locally to be used for running services within docker. The\ndocker-compose scripts (see ",(0,a.kt)("inlineCode",{parentName:"li"},"docker/compose/docker-compose_hadoop284_hive233_spark231.yml"),") ensures local jars override\ninbuilt jars by mounting local HUDI workspace over the docker location")),(0,a.kt)("p",null,"This helps avoid maintaining separate docker images and avoids the costly step of building HUDI docker images locally.\nBut if users want to test hudi from locations with lower network bandwidth, they can still build local images\nrun the script\n",(0,a.kt)("inlineCode",{parentName:"p"},"docker/build_local_docker_images.sh")," to build local docker images before running ",(0,a.kt)("inlineCode",{parentName:"p"},"docker/setup_demo.sh")),(0,a.kt)("p",null,"Here are the commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"cd docker\n./build_local_docker_images.sh\n.....\n\n[INFO] Reactor Summary:\n[INFO]\n[INFO] hoodie ............................................. SUCCESS [  1.709 s]\n[INFO] hudi-common ...................................... SUCCESS [  9.015 s]\n[INFO] hudi-hadoop-mr ................................... SUCCESS [  1.108 s]\n[INFO] hudi-client ...................................... SUCCESS [  4.409 s]\n[INFO] hudi-hive ........................................ SUCCESS [  0.976 s]\n[INFO] hudi-spark ....................................... SUCCESS [ 26.522 s]\n[INFO] hudi-utilities ................................... SUCCESS [ 16.256 s]\n[INFO] hudi-cli ......................................... SUCCESS [ 11.341 s]\n[INFO] hudi-hadoop-mr-bundle ............................ SUCCESS [  1.893 s]\n[INFO] hudi-hive-bundle ................................. SUCCESS [ 14.099 s]\n[INFO] hudi-spark-bundle ................................ SUCCESS [ 58.252 s]\n[INFO] hudi-hadoop-docker ............................... SUCCESS [  0.612 s]\n[INFO] hudi-hadoop-base-docker .......................... SUCCESS [04:04 min]\n[INFO] hudi-hadoop-namenode-docker ...................... SUCCESS [  6.142 s]\n[INFO] hudi-hadoop-datanode-docker ...................... SUCCESS [  7.763 s]\n[INFO] hudi-hadoop-history-docker ....................... SUCCESS [  5.922 s]\n[INFO] hudi-hadoop-hive-docker .......................... SUCCESS [ 56.152 s]\n[INFO] hudi-hadoop-sparkbase-docker ..................... SUCCESS [01:18 min]\n[INFO] hudi-hadoop-sparkmaster-docker ................... SUCCESS [  2.964 s]\n[INFO] hudi-hadoop-sparkworker-docker ................... SUCCESS [  3.032 s]\n[INFO] hudi-hadoop-sparkadhoc-docker .................... SUCCESS [  2.764 s]\n[INFO] hudi-integ-test .................................. SUCCESS [  1.785 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 09:15 min\n[INFO] Finished at: 2018-09-10T17:47:37-07:00\n[INFO] Final Memory: 236M/1848M\n[INFO] ------------------------------------------------------------------------\n")))}u.isMDXComponent=!0}}]);