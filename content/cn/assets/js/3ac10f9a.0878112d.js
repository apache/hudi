"use strict";(self.webpackChunkhudi=self.webpackChunkhudi||[]).push([[68839],{31599:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"quick-start-guide","title":"Spark Guide","description":"This guide provides a quick peek at Hudi\'s capabilities using spark-shell. Using Spark datasources, we will walk through","source":"@site/versioned_docs/version-0.9.0/quick-start-guide.md","sourceDirName":".","slug":"/quick-start-guide","permalink":"/cn/docs/0.9.0/quick-start-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/hudi/tree/asf-site/website/versioned_docs/version-0.9.0/quick-start-guide.md","tags":[],"version":"0.9.0","sidebarPosition":2,"frontMatter":{"title":"Spark Guide","sidebar_position":2,"toc":true,"last_modified_at":"2019-12-30T19:59:57.000Z"},"sidebar":"docs","previous":{"title":"\u6982\u5ff5","permalink":"/cn/docs/0.9.0/overview"},"next":{"title":"Flink \u6307\u5357","permalink":"/cn/docs/0.9.0/flink-quick-start-guide"}}');var r=n(74848),i=n(28453),s=n(11470),o=n(19365);const l={title:"Spark Guide",sidebar_position:2,toc:!0,last_modified_at:new Date("2019-12-30T19:59:57.000Z")},d=void 0,c={},h=[{value:"Setup",id:"setup",level:2},{value:"Create Table",id:"create-table",level:2},{value:"Insert data",id:"insert-data",level:2},{value:"Query data",id:"query-data",level:2},{value:"Time Travel Query",id:"time-travel-query",level:3},{value:"Time Travel Query",id:"time-travel-query-1",level:3},{value:"Update data",id:"update-data",level:2},{value:"MergeInto",id:"mergeinto",level:3},{value:"Update",id:"update",level:3},{value:"Incremental query",id:"incremental-query",level:2},{value:"Structured Streaming",id:"structured-streaming",level:2},{value:"Streaming Read",id:"streaming-read",level:3},{value:"Streaming Write",id:"streaming-write",level:3},{value:"Point in time query",id:"point-in-time-query",level:2},{value:"Delete data",id:"deletes",level:2},{value:"Insert Overwrite Table",id:"insert-overwrite-table",level:2},{value:"Insert Overwrite",id:"insert-overwrite",level:2},{value:"More Spark Sql Commands",id:"more-spark-sql-commands",level:2},{value:"AlterTable",id:"altertable",level:3},{value:"Use set command",id:"use-set-command",level:3},{value:"Set with table options",id:"set-with-table-options",level:3},{value:"Where to go from here?",id:"where-to-go-from-here",level:2}];function p(e){const a={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.p,{children:["This guide provides a quick peek at Hudi's capabilities using spark-shell. Using Spark datasources, we will walk through\ncode snippets that allows you to insert and update a Hudi table of default table type:\n",(0,r.jsx)(a.a,{href:"/docs/concepts#copy-on-write-table",children:"Copy on Write"}),".\nAfter each write operation we will also show how to read the data both snapshot and incrementally."]}),"\n",(0,r.jsx)(a.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsxs)(a.p,{children:["Hudi works with Spark-2.4.3+ & Spark 3.x versions. You can follow instructions ",(0,r.jsx)(a.a,{href:"https://spark.apache.org/downloads",children:"here"})," for setting up spark.\nWith 0.9.0 release, spark-sql dml support has been added and is experimental."]}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Python",value:"python"},{label:"SparkSQL",value:"sparksql"}],children:[(0,r.jsxs)(o.A,{value:"scala",children:[(0,r.jsx)(a.p,{children:"From the extracted directory run spark-shell with Hudi as:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-shell",children:"# spark-shell for spark 3\nspark-shell \\\n  --packages org.apache.hudi:hudi-spark3-bundle_2.12:0.9.0,org.apache.spark:spark-avro_2.12:3.0.1 \\\n  --conf 'spark.serializer=org.apache.spark.serializer.KryoSerializer'\n  \n# spark-shell for spark 2 with scala 2.12\nspark-shell \\\n  --packages org.apache.hudi:hudi-spark-bundle_2.12:0.9.0,org.apache.spark:spark-avro_2.12:2.4.4 \\\n  --conf 'spark.serializer=org.apache.spark.serializer.KryoSerializer'\n  \n# spark-shell for spark 2 with scala 2.11\nspark-shell \\\n  --packages org.apache.hudi:hudi-spark-bundle_2.11:0.9.0,org.apache.spark:spark-avro_2.11:2.4.4 \\\n  --conf 'spark.serializer=org.apache.spark.serializer.KryoSerializer'\n"})})]}),(0,r.jsxs)(o.A,{value:"sparksql",children:[(0,r.jsxs)(a.p,{children:["Hudi support using spark sql to write and read data with the ",(0,r.jsx)(a.strong,{children:"HoodieSparkSessionExtension"})," sql extension.\nFrom the extracted directory run spark-sql with Hudi as:"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-shell",children:"# spark sql for spark 3\nspark-sql --packages org.apache.hudi:hudi-spark3-bundle_2.12:0.9.0,org.apache.spark:spark-avro_2.12:3.0.1 \\\n--conf 'spark.serializer=org.apache.spark.serializer.KryoSerializer' \\\n--conf 'spark.sql.extensions=org.apache.spark.sql.hudi.HoodieSparkSessionExtension'\n\n# spark-sql for spark 2 with scala 2.11\nspark-sql --packages org.apache.hudi:hudi-spark-bundle_2.11:0.9.0,org.apache.spark:spark-avro_2.11:2.4.4 \\\n--conf 'spark.serializer=org.apache.spark.serializer.KryoSerializer' \\\n--conf 'spark.sql.extensions=org.apache.spark.sql.hudi.HoodieSparkSessionExtension'\n\n# spark-sql for spark 2 with scala 2.12\nspark-sql \\\n  --packages org.apache.hudi:hudi-spark-bundle_2.12:0.9.0,org.apache.spark:spark-avro_2.12:2.4.4 \\\n  --conf 'spark.serializer=org.apache.spark.serializer.KryoSerializer' \\\n  --conf 'spark.sql.extensions=org.apache.spark.sql.hudi.HoodieSparkSessionExtension'\n"})})]}),(0,r.jsxs)(o.A,{value:"python",children:[(0,r.jsx)(a.p,{children:"From the extracted directory run pyspark with Hudi as:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-shell",children:"# pyspark\nexport PYSPARK_PYTHON=$(which python3)\n\n# for spark3\npyspark \\\n--packages org.apache.hudi:hudi-spark3-bundle_2.12:0.9.0,org.apache.spark:spark-avro_2.12:3.0.1 \\\n--conf 'spark.serializer=org.apache.spark.serializer.KryoSerializer'\n\n# for spark2 with scala 2.12\npyspark \\\n--packages org.apache.hudi:hudi-spark-bundle_2.12:0.9.0,org.apache.spark:spark-avro_2.12:2.4.4 \\\n--conf 'spark.serializer=org.apache.spark.serializer.KryoSerializer'\n\n# for spark2 with scala 2.11\npyspark \\\n--packages org.apache.hudi:hudi-spark-bundle_2.11:0.9.0,org.apache.spark:spark-avro_2.11:2.4.4 \\\n--conf 'spark.serializer=org.apache.spark.serializer.KryoSerializer'\n"})})]})]}),"\n",(0,r.jsx)(a.admonition,{title:"Please note the following",type:"note",children:(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"spark-avro module needs to be specified in --packages as it is not included with spark-shell by default"}),(0,r.jsx)("li",{children:"spark-avro and spark versions must match (we have used 3.0.1 for both above)"}),(0,r.jsx)("li",{children:"we have used hudi-spark-bundle built for scala 2.12 since the spark-avro module used also depends on 2.12.\nIf spark-avro_2.11 is used, correspondingly hudi-spark-bundle_2.11 needs to be used. "})]})}),"\n",(0,r.jsx)(a.p,{children:"Setup table name, base path and a data generator to generate records for this guide."}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Python",value:"python"}],children:[(0,r.jsx)(o.A,{value:"scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'// spark-shell\nimport org.apache.hudi.QuickstartUtils._\nimport scala.collection.JavaConversions._\nimport org.apache.spark.sql.SaveMode._\nimport org.apache.hudi.DataSourceReadOptions._\nimport org.apache.hudi.DataSourceWriteOptions._\nimport org.apache.hudi.config.HoodieWriteConfig._\n\nval tableName = "hudi_trips_cow"\nval basePath = "file:///tmp/hudi_trips_cow"\nval dataGen = new DataGenerator\n'})})}),(0,r.jsx)(o.A,{value:"python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'# pyspark\ntableName = "hudi_trips_cow"\nbasePath = "file:///tmp/hudi_trips_cow"\ndataGen = sc._jvm.org.apache.hudi.QuickstartUtils.DataGenerator()\n'})})})]}),"\n",(0,r.jsx)(a.admonition,{type:"tip",children:(0,r.jsxs)(a.p,{children:["The ",(0,r.jsx)(a.a,{href:"https://github.com/apache/hudi/blob/master/hudi-spark/src/main/java/org/apache/hudi/QuickstartUtils.java#L50",children:"DataGenerator"}),"\ncan generate sample inserts and updates based on the the sample trip schema ",(0,r.jsx)(a.a,{href:"https://github.com/apache/hudi/blob/master/hudi-spark-datasource/hudi-spark/src/main/java/org/apache/hudi/QuickstartUtils.java#L58",children:"here"})]})}),"\n",(0,r.jsx)(a.h2,{id:"create-table",children:"Create Table"}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Python",value:"python"},{label:"SparkSQL",value:"sparksql"}],children:[(0,r.jsx)(o.A,{value:"scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:"// scala\n// No separate create table command required in spark. First batch of write to a table will create the table if not exists. \n"})})}),(0,r.jsx)(o.A,{value:"python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:"# pyspark\n# No separate create table command required in spark. First batch of write to a table will create the table if not exists.\n"})})}),(0,r.jsxs)(o.A,{value:"sparksql",children:[(0,r.jsx)(a.p,{children:"Spark-sql needs an explicit create table command."}),(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:"Table types:\nBoth types of hudi tables (CopyOnWrite (COW) and MergeOnRead (MOR)) can be created using spark-sql."}),"\n",(0,r.jsxs)(a.p,{children:["While creating the table, table type can be specified using ",(0,r.jsx)(a.strong,{children:"type"})," option. ",(0,r.jsx)(a.strong,{children:"type = 'cow'"})," represents COW table, while ",(0,r.jsx)(a.strong,{children:"type = 'mor'"})," represents MOR table."]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:["Partitioned & Non-Partitioned table:\nUsers can create a partitioned table or non-partitioned table in spark-sql.\nTo create a partitioned table, one needs to use ",(0,r.jsx)(a.strong,{children:"partitioned by"})," statement to specify the partition columns to create a partitioned table.\nWhen there is no ",(0,r.jsx)(a.strong,{children:"partitioned by"})," statement with create table command, table is considered to be a non-partitioned table."]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:["Managed & External table:\nIn general, spark-sql supports two kinds of tables, namely managed and external. If one specifies a location using ",(0,r.jsx)(a.strong,{children:"location"})," statement, it is an external table, else its considered a managed table. You can read more about external vs managed tables ",(0,r.jsx)(a.a,{href:"https://sparkbyexamples.com/apache-hive/difference-between-hive-internal-tables-and-external-tables/",children:"here"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:["Table with primary key:\nUsers can choose to create a table with primary key as required. Else table is considered a non-primary keyed table.\nOne needs to set ",(0,r.jsx)(a.strong,{children:"primaryKey"})," column in options to create a primary key table.\nIf you are using any of the built-in key generators in Hudi, likely it is a primary key table."]}),"\n"]}),"\n"]}),(0,r.jsx)(a.p,{children:"Let's go over some of the create table commands."}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Create a Non-Partitioned Table"})}),(0,r.jsx)(a.p,{children:"Here is an example of creating a managed non-partitioned COW managed table with a primary key 'id'."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"-- create a managed cow table\ncreate table if not exists hudi_table0 (\n  id int, \n  name string, \n  price double\n) using hudi\noptions (\n  type = 'cow',\n  primaryKey = 'id'\n);\n"})}),(0,r.jsxs)(a.p,{children:["Here is an example of creating an MOR external table (location needs to be specified). The ",(0,r.jsx)(a.strong,{children:"preCombineField"})," option\nis used to specify the preCombine field for merge."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"-- create an external mor table\ncreate table if not exists hudi_table1 (\n  id int, \n  name string, \n  price double,\n  ts bigint\n) using hudi\nlocation '/tmp/hudi/hudi_table1'  \noptions (\n  type = 'mor',\n  primaryKey = 'id,name',\n  preCombineField = 'ts' \n);\n"})}),(0,r.jsx)(a.p,{children:"Here is an example of creating a COW table without primary key."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"-- create a non-primary key table\ncreate table if not exists hudi_table2(\n  id int, \n  name string, \n  price double\n) using hudi\noptions (\n  type = 'cow'\n);\n"})}),(0,r.jsx)(a.p,{children:"Here is an example of creating an external COW partitioned table."}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Create Partitioned Table"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"create table if not exists hudi_table_p0 (\nid bigint,\nname string,\ndt string,\nhh string  \n) using hudi\nlocation '/tmp/hudi/hudi_table_p0'\noptions (\n  type = 'cow',\n  primaryKey = 'id',\n  preCombineField = 'ts'\n ) \npartitioned by (dt, hh);\n"})}),(0,r.jsx)(a.p,{children:"If you wish to use spark-sql for an already existing hudi table (created pre 0.9.0), it is possible with the below command."}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Create Table for an existing Hudi Table"})}),(0,r.jsx)(a.p,{children:"We can create a table on an existing hudi table(created with spark-shell or deltastreamer). This is useful to\nread/write to/from a pre-existing hudi table."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:" create table h_p1 using hudi \n options (\n    primaryKey = 'id',\n    preCombineField = 'ts'\n )\n partitioned by (dt)\n location '/path/to/hudi';\n"})}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"CTAS"})}),(0,r.jsxs)(a.p,{children:["Hudi supports CTAS(Create table as select) on spark sql. ",(0,r.jsx)("br",{}),"\nNote: For better performance to load data to hudi table, CTAS uses the ",(0,r.jsx)(a.strong,{children:"bulk insert"})," as the write operation."]}),(0,r.jsx)(a.p,{children:"Example CTAS command to create a partitioned, primary key COW table."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"create table h2 using hudi\noptions (type = 'cow', primaryKey = 'id')\npartitioned by (dt)\nas\nselect 1 as id, 'a1' as name, 10 as price, 1000 as dt;\n"})}),(0,r.jsx)(a.p,{children:"Example CTAS command to create a non-partitioned COW table."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"create table h3 using hudi\nas\nselect 1 as id, 'a1' as name, 10 as price;\n"})}),(0,r.jsx)(a.p,{children:"Example CTAS command to load data from another table."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"# create managed parquet table \ncreate table parquet_mngd using parquet location 'file:///tmp/parquet_dataset/*.parquet';\n\n# CTAS by loading data into hudi table\ncreate table hudi_tbl using hudi location 'file:/tmp/hudi/hudi_tbl/' options ( \n  type = 'cow', \n  primaryKey = 'id', \n  preCombineField = 'ts' \n ) \npartitioned by (datestr) as select * from parquet_mngd;\n"})}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Create Table Options"})}),(0,r.jsx)(a.p,{children:"Users can set table options while creating a hudi table. Critical options are listed here."}),(0,r.jsxs)(a.table,{children:[(0,r.jsx)(a.thead,{children:(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.th,{children:"Parameter Name"}),(0,r.jsx)(a.th,{children:"Introduction"})]})}),(0,r.jsxs)(a.tbody,{children:[(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"primaryKey"}),(0,r.jsx)(a.td,{children:"The primary key names of the table, multiple fields separated by commas."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"type"}),(0,r.jsx)(a.td,{children:"The table type to create. type = 'cow' means a COPY-ON-WRITE table,while type = 'mor' means a MERGE-ON-READ table. Default value is 'cow' without specified this option."})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"preCombineField"}),(0,r.jsx)(a.td,{children:"The Pre-Combine field of the table."})]})]})]}),(0,r.jsx)(a.p,{children:'To set any custom hudi config(like index type, max parquet size, etc), see the  "Set hudi config section" .'})]})]}),"\n",(0,r.jsx)(a.h2,{id:"insert-data",children:"Insert data"}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Python",value:"python"},{label:"SparkSQL",value:"sparksql"}],children:[(0,r.jsxs)(o.A,{value:"scala",children:[(0,r.jsx)(a.p,{children:"Generate some new trips, load them into a DataFrame and write the DataFrame into the Hudi table as below."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'// spark-shell\nval inserts = convertToStringList(dataGen.generateInserts(10))\nval df = spark.read.json(spark.sparkContext.parallelize(inserts, 2))\ndf.write.format("hudi").\n  options(getQuickstartWriteConfigs).\n  option(PRECOMBINE_FIELD.key(), "ts").\n  option(RECORDKEY_FIELD.key(), "uuid").\n  option(PARTITIONPATH_FIELD.key(), "partitionpath").\n  option(TBL_NAME.key(), tableName).\n  mode(Overwrite).\n  save(basePath)\n'})}),(0,r.jsx)(a.admonition,{type:"info",children:(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"mode(Overwrite)"})," overwrites and recreates the table if it already exists.\nYou can check the data generated under ",(0,r.jsx)(a.code,{children:"/tmp/hudi_trips_cow/<region>/<country>/<city>/"}),". We provided a record key\n(",(0,r.jsx)(a.code,{children:"uuid"})," in ",(0,r.jsx)(a.a,{href:"https://github.com/apache/hudi/blob/master/hudi-spark/src/main/java/org/apache/hudi/QuickstartUtils.java#L58",children:"schema"}),"), partition field (",(0,r.jsx)(a.code,{children:"region/country/city"}),") and combine logic (",(0,r.jsx)(a.code,{children:"ts"})," in\n",(0,r.jsx)(a.a,{href:"https://github.com/apache/hudi/blob/master/hudi-spark/src/main/java/org/apache/hudi/QuickstartUtils.java#L58",children:"schema"}),") to ensure trip records are unique within each partition. For more info, refer to\n",(0,r.jsx)(a.a,{href:"https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=113709185#FAQ-HowdoImodelthedatastoredinHudi",children:"Modeling data stored in Hudi"}),"\nand for info on ways to ingest data into Hudi, refer to ",(0,r.jsx)(a.a,{href:"/docs/writing_data",children:"Writing Hudi Tables"}),".\nHere we are using the default write operation : ",(0,r.jsx)(a.code,{children:"upsert"}),". If you have a workload without updates, you can also issue\n",(0,r.jsx)(a.code,{children:"insert"})," or ",(0,r.jsx)(a.code,{children:"bulk_insert"})," operations which could be faster. To know more, refer to ",(0,r.jsx)(a.a,{href:"/docs/writing_data#write-operations",children:"Write operations"})]})})]}),(0,r.jsxs)(o.A,{value:"python",children:[(0,r.jsx)(a.p,{children:"Generate some new trips, load them into a DataFrame and write the DataFrame into the Hudi table as below."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:"# pyspark\ninserts = sc._jvm.org.apache.hudi.QuickstartUtils.convertToStringList(dataGen.generateInserts(10))\ndf = spark.read.json(spark.sparkContext.parallelize(inserts, 2))\n\nhudi_options = {\n    'hoodie.table.name': tableName,\n    'hoodie.datasource.write.recordkey.field': 'uuid',\n    'hoodie.datasource.write.partitionpath.field': 'partitionpath',\n    'hoodie.datasource.write.table.name': tableName,\n    'hoodie.datasource.write.operation': 'upsert',\n    'hoodie.datasource.write.precombine.field': 'ts',\n    'hoodie.upsert.shuffle.parallelism': 2,\n    'hoodie.insert.shuffle.parallelism': 2\n}\n\ndf.write.format(\"hudi\").\n    options(**hudi_options).\n    mode(\"overwrite\").\n    save(basePath)\n"})}),(0,r.jsx)(a.admonition,{type:"info",children:(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"mode(Overwrite)"})," overwrites and recreates the table if it already exists.\nYou can check the data generated under ",(0,r.jsx)(a.code,{children:"/tmp/hudi_trips_cow/<region>/<country>/<city>/"}),". We provided a record key\n(",(0,r.jsx)(a.code,{children:"uuid"})," in ",(0,r.jsx)(a.a,{href:"https://github.com/apache/hudi/blob/master/hudi-spark/src/main/java/org/apache/hudi/QuickstartUtils.java#L58",children:"schema"}),"), partition field (",(0,r.jsx)(a.code,{children:"region/country/city"}),") and combine logic (",(0,r.jsx)(a.code,{children:"ts"})," in\n",(0,r.jsx)(a.a,{href:"https://github.com/apache/hudi/blob/master/hudi-spark/src/main/java/org/apache/hudi/QuickstartUtils.java#L58",children:"schema"}),") to ensure trip records are unique within each partition. For more info, refer to\n",(0,r.jsx)(a.a,{href:"https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=113709185#FAQ-HowdoImodelthedatastoredinHudi",children:"Modeling data stored in Hudi"}),"\nand for info on ways to ingest data into Hudi, refer to ",(0,r.jsx)(a.a,{href:"/docs/writing_data",children:"Writing Hudi Tables"}),".\nHere we are using the default write operation : ",(0,r.jsx)(a.code,{children:"upsert"}),". If you have a workload without updates, you can also issue\n",(0,r.jsx)(a.code,{children:"insert"})," or ",(0,r.jsx)(a.code,{children:"bulk_insert"})," operations which could be faster. To know more, refer to ",(0,r.jsx)(a.a,{href:"/docs/writing_data#write-operations",children:"Write operations"})]})})]}),(0,r.jsxs)(o.A,{value:"sparksql",children:[(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"insert into h0 select 1, 'a1', 20;\n\n-- insert static partition\ninsert into h_p0 partition(dt = '2021-01-02') select 1, 'a1';\n\n-- insert dynamic partition\ninsert into h_p0 select 1, 'a1', dt;\n\n-- insert dynamic partition\ninsert into h_p1 select 1 as id, 'a1', '2021-01-03' as dt, '19' as hh;\n\n-- insert overwrite table\ninsert overwrite table h0 select 1, 'a1', 20;\n\n-- insert overwrite table with static partition\ninsert overwrite h_p0 partition(dt = '2021-01-02') select 1, 'a1';\n\n-- insert overwrite table with dynamic partition\n  insert overwrite table h_p1 select 2 as id, 'a2', '2021-01-03' as dt, '19' as hh;\n"})}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"NOTICE"})}),(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:["Insert mode : Hudi supports two insert modes when inserting data to a table with primary key(we call it pk-table as followed): ",(0,r.jsx)("br",{}),"\nUsing ",(0,r.jsx)(a.code,{children:"strict"})," mode, insert statement will keep the primary key uniqueness constraint for COW table which do not allow\nduplicate records. If a record already exists during insert, a HoodieDuplicateKeyException will be thrown\nfor COW table. For MOR table, updates are allowed to existing record.",(0,r.jsx)("br",{}),"\nUsing ",(0,r.jsx)(a.code,{children:"non-strict"})," mode, hudi uses the same code path used by ",(0,r.jsx)(a.code,{children:"insert"})," operation in spark data source for the pk-table.",(0,r.jsx)("br",{}),"\nOne can set the insert mode by using the config: ",(0,r.jsx)(a.strong,{children:"hoodie.sql.insert.mode"})]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:["Bulk Insert : By default, hudi uses the normal insert operation for insert statements. Users can set ",(0,r.jsx)(a.strong,{children:"hoodie.sql.bulk.insert.enable"}),"\nto true to enable the bulk insert for insert statement."]}),"\n"]}),"\n"]})]})]}),"\n",(0,r.jsxs)(a.p,{children:["Checkout ",(0,r.jsx)(a.a,{href:"https://hudi.apache.org/blog/2021/02/13/hudi-key-generators",children:"https://hudi.apache.org/blog/2021/02/13/hudi-key-generators"})," for various key generator options, like Timestamp based,\ncomplex, custom, NonPartitioned Key gen, etc."]}),"\n",(0,r.jsx)(a.h2,{id:"query-data",children:"Query data"}),"\n",(0,r.jsx)(a.p,{children:"Load the data files into a DataFrame."}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Python",value:"python"},{label:"SparkSQL",value:"sparksql"}],children:[(0,r.jsxs)(o.A,{value:"scala",children:[(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'// spark-shell\nval tripsSnapshotDF = spark.\n  read.\n  format("hudi").\n  load(basePath)\n//load(basePath) use "/partitionKey=partitionValue" folder structure for Spark auto partition discovery\ntripsSnapshotDF.createOrReplaceTempView("hudi_trips_snapshot")\n\nspark.sql("select fare, begin_lon, begin_lat, ts from  hudi_trips_snapshot where fare > 20.0").show()\nspark.sql("select _hoodie_commit_time, _hoodie_record_key, _hoodie_partition_path, rider, driver, fare from  hudi_trips_snapshot").show()\n'})}),(0,r.jsx)(a.h3,{id:"time-travel-query",children:"Time Travel Query"}),(0,r.jsx)(a.p,{children:"Hudi support time travel query since 0.9.0. Currently three query time formats are supported as given below."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'spark.read.\n  format("hudi").\n  option("as.of.instant", "20210728141108").\n  load(basePath)\n\nspark.read.\n  format("hudi").\n  option("as.of.instant", "2021-07-28 14: 11: 08").\n  load(basePath)\n\n// It is equal to "as.of.instant = 2021-07-28 00:00:00"\nspark.read.\n  format("hudi").\n  option("as.of.instant", "2021-07-28").\n  load(basePath)\n\n'})}),(0,r.jsx)(a.admonition,{type:"info",children:(0,r.jsxs)(a.p,{children:["Since 0.9.0 hudi has support a hudi built-in FileIndex: ",(0,r.jsx)(a.strong,{children:"HoodieFileIndex"}),' to query hudi table,\nwhich supports partition pruning and metatable for query. This will help improve query performance.\nIt also supports non-global query path which means users can query the table by the base path without\nspecifing the "*" in the query path. This feature has enabled by default for the non-global query path.\nFor the global query path, hudi uses the old query path.\nRefer to ',(0,r.jsx)(a.a,{href:"/docs/concepts#table-types--queries",children:"Table types and queries"})," for more info on all table types and query types supported."]})})]}),(0,r.jsx)(o.A,{value:"sparksql",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:" select fare, begin_lon, begin_lat, ts from  hudi_trips_snapshot where fare > 20.0\n"})})}),(0,r.jsxs)(o.A,{value:"python",children:[(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'# pyspark\ntripsSnapshotDF = spark. \\\n  read. \\\n  format("hudi"). \\\n  load(basePath)\n# load(basePath) use "/partitionKey=partitionValue" folder structure for Spark auto partition discovery\n\ntripsSnapshotDF.createOrReplaceTempView("hudi_trips_snapshot")\n\nspark.sql("select fare, begin_lon, begin_lat, ts from  hudi_trips_snapshot where fare > 20.0").show()\nspark.sql("select _hoodie_commit_time, _hoodie_record_key, _hoodie_partition_path, rider, driver, fare from  hudi_trips_snapshot").show()\n'})}),(0,r.jsx)(a.h3,{id:"time-travel-query-1",children:"Time Travel Query"}),(0,r.jsx)(a.p,{children:"Hudi support time travel query since 0.9.0. Currently three query time formats are supported as given below."}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'spark.read.\n        format("hudi").\n        option("as.of.instant", "20210728141108").\n        load(basePath)\n\nspark.read.\n        format("hudi").\n        option("as.of.instant", "2021-07-28 14: 11: 08").\n        load(basePath)\n\n// It is equal to "as.of.instant = 2021-07-28 00:00:00"\nspark.read.\n        format("hudi").\n        option("as.of.instant", "2021-07-28").\n        load(basePath)\n'})}),(0,r.jsx)(a.admonition,{type:"info",children:(0,r.jsxs)(a.p,{children:["Since 0.9.0 hudi has support a hudi built-in FileIndex: ",(0,r.jsx)(a.strong,{children:"HoodieFileIndex"}),' to query hudi table,\nwhich supports partition pruning and metatable for query. This will help improve query performance.\nIt also supports non-global query path which means users can query the table by the base path without\nspecifing the "*" in the query path. This feature has enabled by default for the non-global query path.\nFor the global query path, hudi uses the old query path.\nRefer to ',(0,r.jsx)(a.a,{href:"/docs/concepts#table-types--queries",children:"Table types and queries"})," for more info on all table types and query types supported."]})})]})]}),"\n",(0,r.jsx)(a.h2,{id:"update-data",children:"Update data"}),"\n",(0,r.jsx)(a.p,{children:"This is similar to inserting new data. Generate updates to existing trips using the data generator, load into a DataFrame\nand write DataFrame into the hudi table."}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Python",value:"python"},{label:"SparkSQL",value:"sparksql"}],children:[(0,r.jsxs)(o.A,{value:"scala",children:[(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'// spark-shell\nval updates = convertToStringList(dataGen.generateUpdates(10))\nval df = spark.read.json(spark.sparkContext.parallelize(updates, 2))\ndf.write.format("hudi").\n  options(getQuickstartWriteConfigs).\n  option(PRECOMBINE_FIELD.key(), "ts").\n  option(RECORDKEY_FIELD.key(), "uuid").\n  option(PARTITIONPATH_FIELD.key(), "partitionpath").\n  option(TBL_NAME.key(), tableName).\n  mode(Append).\n  save(basePath)\n'})}),(0,r.jsx)(a.admonition,{type:"note",children:(0,r.jsxs)(a.p,{children:["Notice that the save mode is now ",(0,r.jsx)(a.code,{children:"Append"}),". In general, always use append mode unless you are trying to create the table for the first time.\n",(0,r.jsx)(a.a,{href:"#query-data",children:"Querying"})," the data again will now show updated trips. Each write operation generates a new ",(0,r.jsx)(a.a,{href:"/docs/concepts",children:"commit"}),"\ndenoted by the timestamp. Look for changes in ",(0,r.jsx)(a.code,{children:"_hoodie_commit_time"}),", ",(0,r.jsx)(a.code,{children:"rider"}),", ",(0,r.jsx)(a.code,{children:"driver"})," fields for the same ",(0,r.jsx)(a.code,{children:"_hoodie_record_key"}),"s in previous commit."]})})]}),(0,r.jsxs)(o.A,{value:"sparksql",children:[(0,r.jsx)(a.p,{children:"Spark sql supports two kinds of DML to update hudi table: Merge-Into and Update."}),(0,r.jsx)(a.h3,{id:"mergeinto",children:"MergeInto"}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Syntax"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"MERGE INTO tableIdentifier AS target_alias\nUSING (sub_query | tableIdentifier) AS source_alias\nON <merge_condition>\n[ WHEN MATCHED [ AND <condition> ] THEN <matched_action> ]\n[ WHEN NOT MATCHED [ AND <condition> ]  THEN <not_matched_action> ]\n\n<merge_condition> =A equal bool condition \n<matched_action>  =\n  DELETE  |\n  UPDATE SET *  |\n  UPDATE SET column1 = expression1 [, column2 = expression2 ...]\n<not_matched_action>  =\n  INSERT *  |\n  INSERT (column1 [, column2 ...]) VALUES (value1 [, value2 ...])\n"})}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Example"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"merge into h0 as target\nusing (\n  select id, name, price, flag from s\n) source\non target.id = source.id\nwhen matched then update set *\nwhen not matched then insert *\n;\n\nmerge into h0\nusing (\n  select id, name, price, flag from s\n) source\non h0.id = source.id\nwhen matched and flag != 'delete' then update set id = source.id, name = source.name, price = source.price * 2\nwhen matched and flag = 'delete' then delete\nwhen not matched then insert (id,name,price) values(id, name, price)\n;\n"})}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Notice"})}),(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"The merge-on condition can be only on primary keys. Support to merge based on other fields will be added in future."}),"\n",(0,r.jsx)(a.li,{children:"Support for partial updates is supported for cow table.\ne.g."}),"\n"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:" merge into h0 using s0\n on h0.id = s0.id\n when matched then update set price = s0.price * 2\n"})}),(0,r.jsxs)(a.p,{children:["This works well for Cow-On-Write table which supports update based on the ",(0,r.jsx)(a.strong,{children:"price"})," field.\nFor Merge-on-Read table this will be supported in the future."]}),(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Target table's fields cannot be the right-value of the update expression for Merge-On-Read table.\ne.g."}),"\n"]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:" merge into h0 using s0\n on h0.id = s0.id\n when matched then update set id = s0.id, \n                   name = h0.name,\n                   price = s0.price + h0.price\n"})}),(0,r.jsx)(a.p,{children:"This can work well for Cow-On-Write table, but not yet supported for Merge-On-Read table."}),(0,r.jsx)(a.h3,{id:"update",children:"Update"}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Syntax"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:" UPDATE tableIdentifier SET column = EXPRESSION(,column = EXPRESSION) [ WHERE boolExpression]\n"})}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Case"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:" update h0 set price = price + 20 where id = 1;\n update h0 set price = price *2, name = 'a2' where id = 2;\n"})})]}),(0,r.jsxs)(o.A,{value:"python",children:[(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'# pyspark\nupdates = sc._jvm.org.apache.hudi.QuickstartUtils.convertToStringList(dataGen.generateUpdates(10))\ndf = spark.read.json(spark.sparkContext.parallelize(updates, 2))\ndf.write.format("hudi"). \\\n  options(**hudi_options). \\\n  mode("append"). \\\n  save(basePath)\n'})}),(0,r.jsx)(a.admonition,{type:"note",children:(0,r.jsxs)(a.p,{children:["Notice that the save mode is now ",(0,r.jsx)(a.code,{children:"Append"}),". In general, always use append mode unless you are trying to create the table for the first time.\n",(0,r.jsx)(a.a,{href:"#query-data",children:"Querying"})," the data again will now show updated trips. Each write operation generates a new ",(0,r.jsx)(a.a,{href:"/docs/concepts",children:"commit"}),"\ndenoted by the timestamp. Look for changes in ",(0,r.jsx)(a.code,{children:"_hoodie_commit_time"}),", ",(0,r.jsx)(a.code,{children:"rider"}),", ",(0,r.jsx)(a.code,{children:"driver"})," fields for the same ",(0,r.jsx)(a.code,{children:"_hoodie_record_key"}),"s in previous commit."]})})]})]}),"\n",(0,r.jsx)(a.h2,{id:"incremental-query",children:"Incremental query"}),"\n",(0,r.jsx)(a.p,{children:"Hudi also provides capability to obtain a stream of records that changed since given commit timestamp.\nThis can be achieved using Hudi's incremental querying and providing a begin time from which changes need to be streamed.\nWe do not need to specify endTime, if we want all changes after the given commit (as is the common case)."}),"\n",(0,r.jsx)(a.admonition,{type:"note",children:(0,r.jsxs)(a.p,{children:["Note that the amount of data you can incrementally pull from a table depends on the amount of retained commits.\nHudi automatically cleans old commits, the amount of retained commits can be specified using ",(0,r.jsx)(a.code,{children:"CLEAN_RETAIN_COMMITS"})," parameter."]})}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Python",value:"python"}],children:[(0,r.jsx)(o.A,{value:"scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'// spark-shell\n// reload data\nspark.\n  read.\n  format("hudi").\n  load(basePath).\n  createOrReplaceTempView("hudi_trips_snapshot")\n\nval commits = spark.sql("select distinct(_hoodie_commit_time) as commitTime from  hudi_trips_snapshot order by commitTime").map(k => k.getString(0)).take(50)\nval beginTime = commits(commits.length - 2) // commit time we are interested in\n\n// incrementally query data\nval tripsIncrementalDF = spark.read.format("hudi").\n  option(QUERY_TYPE.key(), QUERY_TYPE_INCREMENTAL_OPT_VAL).\n  option(BEGIN_INSTANTTIME.key(), beginTime).\n  load(basePath)\ntripsIncrementalDF.createOrReplaceTempView("hudi_trips_incremental")\n\nspark.sql("select `_hoodie_commit_time`, fare, begin_lon, begin_lat, ts from  hudi_trips_incremental where fare > 20.0").show()\n'})})}),(0,r.jsx)(o.A,{value:"python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:'# pyspark\n# reload data\nspark. \\\n  read. \\\n  format("hudi"). \\\n  load(basePath). \\\n  createOrReplaceTempView("hudi_trips_snapshot")\n\ncommits = list(map(lambda row: row[0], spark.sql("select distinct(_hoodie_commit_time) as commitTime from  hudi_trips_snapshot order by commitTime").limit(50).collect()))\nbeginTime = commits[len(commits) - 2] # commit time we are interested in\n\n# incrementally query data\nincremental_read_options = {\n  \'hoodie.datasource.query.type\': \'incremental\',\n  \'hoodie.datasource.read.begin.instanttime\': beginTime,\n}\n\ntripsIncrementalDF = spark.read.format("hudi"). \\\n  options(**incremental_read_options). \\\n  load(basePath)\ntripsIncrementalDF.createOrReplaceTempView("hudi_trips_incremental")\n\nspark.sql("select `_hoodie_commit_time`, fare, begin_lon, begin_lat, ts from  hudi_trips_incremental where fare > 20.0").show()\n'})})})]}),"\n",(0,r.jsx)(a.admonition,{type:"info",children:(0,r.jsx)(a.p,{children:"This will give all changes that happened after the beginTime commit with the filter of fare > 20.0. The unique thing about this\nfeature is that it now lets you author streaming pipelines on batch data."})}),"\n",(0,r.jsx)(a.h2,{id:"structured-streaming",children:"Structured Streaming"}),"\n",(0,r.jsx)(a.p,{children:"Hudi supports Spark Structured Streaming reads and writes.\nStructured Streaming reads are based on Hudi Incremental Query feature, therefore streaming read can return data for which commits and base files were not yet removed by the cleaner. You can control commits retention time."}),"\n",(0,r.jsx)(a.h3,{id:"streaming-read",children:"Streaming Read"}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Python",value:"python"}],children:[(0,r.jsx)(o.A,{value:"scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'// spark-shell\n// reload data\ndf.write.format("hudi").\n  options(getQuickstartWriteConfigs).\n  option(PRECOMBINE_FIELD_OPT_KEY, "ts").\n  option(RECORDKEY_FIELD_OPT_KEY, "uuid").\n  option(PARTITIONPATH_FIELD_OPT_KEY, "partitionpath").\n  option(TABLE_NAME, tableName).\n  mode(Overwrite).\n  save(basePath)\n\n// read stream and output results to console\nspark.readStream.\n  format("hudi").\n  load(basePath).\n  writeStream.\n  format("console").\n  start()\n\n// read stream to streaming df\nval df = spark.readStream.\n        format("hudi").\n        load(basePath)\n\n'})})}),(0,r.jsx)(o.A,{value:"python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:"# pyspark\n# reload data\ninserts = sc._jvm.org.apache.hudi.QuickstartUtils.convertToStringList(\n    dataGen.generateInserts(10))\ndf = spark.read.json(spark.sparkContext.parallelize(inserts, 2))\n\nhudi_options = {\n    'hoodie.table.name': tableName,\n    'hoodie.datasource.write.recordkey.field': 'uuid',\n    'hoodie.datasource.write.partitionpath.field': 'partitionpath',\n    'hoodie.datasource.write.table.name': tableName,\n    'hoodie.datasource.write.operation': 'upsert',\n    'hoodie.datasource.write.precombine.field': 'ts',\n    'hoodie.upsert.shuffle.parallelism': 2,\n    'hoodie.insert.shuffle.parallelism': 2\n}\n\ndf.write.format(\"hudi\"). \\\n    options(**hudi_options). \\\n    mode(\"overwrite\"). \\\n    save(basePath)\n\n# read stream to streaming df\ndf = spark.readStream \\\n    .format(\"hudi\") \\\n    .load(basePath)\n\n# read stream and output results to console\nspark.readStream \\\n    .format(\"hudi\") \\\n    .load(basePath) \\\n    .writeStream \\\n    .format(\"console\") \\\n    .start()\n\n"})})})]}),"\n",(0,r.jsx)(a.h3,{id:"streaming-write",children:"Streaming Write"}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Python",value:"python"}],children:[(0,r.jsx)(o.A,{value:"scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'// spark-shell\n// prepare to stream write to new table\nimport org.apache.spark.sql.streaming.Trigger\n\nval streamingTableName = "hudi_trips_cow_streaming"\nval baseStreamingPath = "file:///tmp/hudi_trips_cow_streaming"\nval checkpointLocation = "file:///tmp/checkpoints/hudi_trips_cow_streaming"\n\n// create streaming df\nval df = spark.readStream.\n        format("hudi").\n        load(basePath)\n\n// write stream to new hudi table\ndf.writeStream.format("hudi").\n  options(getQuickstartWriteConfigs).\n  option(PRECOMBINE_FIELD_OPT_KEY, "ts").\n  option(RECORDKEY_FIELD_OPT_KEY, "uuid").\n  option(PARTITIONPATH_FIELD_OPT_KEY, "partitionpath").\n  option(TABLE_NAME, streamingTableName).\n  outputMode("append").\n  option("path", baseStreamingPath).\n  option("checkpointLocation", checkpointLocation).\n  trigger(Trigger.Once()).\n  start()\n\n'})})}),(0,r.jsx)(o.A,{value:"python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:"# pyspark\n# prepare to stream write to new table\nstreamingTableName = \"hudi_trips_cow_streaming\"\nbaseStreamingPath = \"file:///tmp/hudi_trips_cow_streaming\"\ncheckpointLocation = \"file:///tmp/checkpoints/hudi_trips_cow_streaming\"\n\nhudi_streaming_options = {\n    'hoodie.table.name': streamingTableName,\n    'hoodie.datasource.write.recordkey.field': 'uuid',\n    'hoodie.datasource.write.partitionpath.field': 'partitionpath',\n    'hoodie.datasource.write.table.name': streamingTableName,\n    'hoodie.datasource.write.operation': 'upsert',\n    'hoodie.datasource.write.precombine.field': 'ts',\n    'hoodie.upsert.shuffle.parallelism': 2,\n    'hoodie.insert.shuffle.parallelism': 2\n}\n\n# create streaming df\ndf = spark.readStream \\\n    .format(\"hudi\") \\\n    .load(basePath)\n\n# write stream to new hudi table\ndf.writeStream.format(\"hudi\") \\\n    .options(**hudi_streaming_options) \\\n    .outputMode(\"append\") \\\n    .option(\"path\", baseStreamingPath) \\\n    .option(\"checkpointLocation\", checkpointLocation) \\\n    .trigger(once=True) \\\n    .start()\n\n"})})})]}),"\n",(0,r.jsx)(a.admonition,{type:"info",children:(0,r.jsx)(a.p,{children:"Spark SQL can be used within ForeachBatch sink to do INSERT, UPDATE, DELETE and MERGE INTO.\nTarget table must exist before write."})}),"\n",(0,r.jsx)(a.h2,{id:"point-in-time-query",children:"Point in time query"}),"\n",(0,r.jsx)(a.p,{children:'Lets look at how to query data as of a specific time. The specific time can be represented by pointing endTime to a\nspecific commit time and beginTime to "000" (denoting earliest possible commit time).'}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Python",value:"python"}],children:[(0,r.jsx)(o.A,{value:"scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'// spark-shell\nval beginTime = "000" // Represents all commits > this time.\nval endTime = commits(commits.length - 2) // commit time we are interested in\n\n//incrementally query data\nval tripsPointInTimeDF = spark.read.format("hudi").\n  option(QUERY_TYPE.key(), QUERY_TYPE_INCREMENTAL_OPT_VAL).\n  option(BEGIN_INSTANTTIME.key(), beginTime).\n  option(END_INSTANTTIME.key(), endTime).\n  load(basePath)\ntripsPointInTimeDF.createOrReplaceTempView("hudi_trips_point_in_time")\nspark.sql("select `_hoodie_commit_time`, fare, begin_lon, begin_lat, ts from hudi_trips_point_in_time where fare > 20.0").show()\n'})})}),(0,r.jsx)(o.A,{value:"python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:"# pyspark\nbeginTime = \"000\" # Represents all commits > this time.\nendTime = commits[len(commits) - 2]\n\n# query point in time data\npoint_in_time_read_options = {\n  'hoodie.datasource.query.type': 'incremental',\n  'hoodie.datasource.read.end.instanttime': endTime,\n  'hoodie.datasource.read.begin.instanttime': beginTime\n}\n\ntripsPointInTimeDF = spark.read.format(\"hudi\"). \\\n  options(**point_in_time_read_options). \\\n  load(basePath)\n\ntripsPointInTimeDF.createOrReplaceTempView(\"hudi_trips_point_in_time\")\nspark.sql(\"select `_hoodie_commit_time`, fare, begin_lon, begin_lat, ts from hudi_trips_point_in_time where fare > 20.0\").show()\n"})})})]}),"\n",(0,r.jsx)(a.h2,{id:"deletes",children:"Delete data"}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Python",value:"python"},{label:"SparkSQL",value:"sparksql"}],children:[(0,r.jsxs)(o.A,{value:"scala",children:[(0,r.jsxs)(a.p,{children:["Delete records for the HoodieKeys passed in.",(0,r.jsx)("br",{})]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'// spark-shell\n// fetch total records count\nspark.sql("select uuid, partitionpath from hudi_trips_snapshot").count()\n// fetch two records to be deleted\nval ds = spark.sql("select uuid, partitionpath from hudi_trips_snapshot").limit(2)\n\n// issue deletes\nval deletes = dataGen.generateDeletes(ds.collectAsList())\nval df = spark.read.json(spark.sparkContext.parallelize(deletes, 2))\n\ndf.write.format("hudi").\n  options(getQuickstartWriteConfigs).\n  option(OPERATION.key(),"delete").\n  option(PRECOMBINE_FIELD.key(), "ts").\n  option(RECORDKEY_FIELD.key(), "uuid").\n  option(PARTITIONPATH_FIELD.key(), "partitionpath").\n  option(TBL_NAME.key(), tableName).\n  mode(Append).\n  save(basePath)\n\n// run the same read query as above.\nval roAfterDeleteViewDF = spark.\n  read.\n  format("hudi").\n  load(basePath)\n\nroAfterDeleteViewDF.registerTempTable("hudi_trips_snapshot")\n// fetch should return (total - 2) records\nspark.sql("select uuid, partitionpath from hudi_trips_snapshot").count()\n'})}),(0,r.jsx)(a.admonition,{type:"note",children:(0,r.jsxs)(a.p,{children:["Only ",(0,r.jsx)(a.code,{children:"Append"})," mode is supported for delete operation."]})})]}),(0,r.jsxs)(o.A,{value:"sparksql",children:[(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Syntax"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:" DELETE FROM tableIdentifier [ WHERE BOOL_EXPRESSION]\n"})}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Example"})}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"delete from h0 where id = 1;\n"})})]}),(0,r.jsxs)(o.A,{value:"python",children:[(0,r.jsxs)(a.p,{children:["Delete records for the HoodieKeys passed in.",(0,r.jsx)("br",{})]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-python",children:"# pyspark\n# fetch total records count\nspark.sql(\"select uuid, partitionpath from hudi_trips_snapshot\").count()\n# fetch two records to be deleted\nds = spark.sql(\"select uuid, partitionpath from hudi_trips_snapshot\").limit(2)\n\n# issue deletes\nhudi_delete_options = {\n  'hoodie.table.name': tableName,\n  'hoodie.datasource.write.recordkey.field': 'uuid',\n  'hoodie.datasource.write.partitionpath.field': 'partitionpath',\n  'hoodie.datasource.write.table.name': tableName,\n  'hoodie.datasource.write.operation': 'delete',\n  'hoodie.datasource.write.precombine.field': 'ts',\n  'hoodie.upsert.shuffle.parallelism': 2, \n  'hoodie.insert.shuffle.parallelism': 2\n}\n\nfrom pyspark.sql.functions import lit\ndeletes = list(map(lambda row: (row[0], row[1]), ds.collect()))\ndf = spark.sparkContext.parallelize(deletes).toDF(['uuid', 'partitionpath']).withColumn('ts', lit(0.0))\ndf.write.format(\"hudi\"). \\\n  options(**hudi_delete_options). \\\n  mode(\"append\"). \\\n  save(basePath)\n\n# run the same read query as above.\nroAfterDeleteViewDF = spark. \\\n  read. \\\n  format(\"hudi\"). \\\n  load(basePath) \nroAfterDeleteViewDF.registerTempTable(\"hudi_trips_snapshot\")\n# fetch should return (total - 2) records\nspark.sql(\"select uuid, partitionpath from hudi_trips_snapshot\").count()\n"})}),(0,r.jsx)(a.admonition,{type:"note",children:(0,r.jsxs)(a.p,{children:["Only ",(0,r.jsx)(a.code,{children:"Append"})," mode is supported for delete operation."]})})]})]}),"\n",(0,r.jsxs)(a.p,{children:["See the ",(0,r.jsx)(a.a,{href:"/docs/writing_data#deletes",children:"deletion section"})," of the writing data page for more details."]}),"\n",(0,r.jsx)(a.h2,{id:"insert-overwrite-table",children:"Insert Overwrite Table"}),"\n",(0,r.jsxs)(a.p,{children:["Generate some new trips, overwrite the table logically at the Hudi metadata level. The Hudi cleaner will eventually\nclean up the previous table snapshot's file groups. This can be faster than deleting the older table and recreating\nin ",(0,r.jsx)(a.code,{children:"Overwrite"})," mode."]}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"SparkSQL",value:"sparksql"}],children:[(0,r.jsx)(o.A,{value:"scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'// spark-shell\nspark.\n  read.format("hudi").\n  load(basePath).\n  select("uuid","partitionpath").\n  show(10, false)\n\nval inserts = convertToStringList(dataGen.generateInserts(10))\nval df = spark.read.json(spark.sparkContext.parallelize(inserts, 2))\ndf.write.format("hudi").\n  options(getQuickstartWriteConfigs).\n  option(OPERATION.key(),"insert_overwrite_table").\n  option(PRECOMBINE_FIELD.key(), "ts").\n  option(RECORDKEY_FIELD.key(), "uuid").\n  option(PARTITIONPATH_FIELD.key(), "partitionpath").\n  option(TBL_NAME.key(), tableName).\n  mode(Append).\n  save(basePath)\n\n// Should have different keys now, from query before.\nspark.\n  read.format("hudi").\n  load(basePath).\n  select("uuid","partitionpath").\n  show(10, false)\n\n'})})}),(0,r.jsxs)(o.A,{value:"sparksql",children:[(0,r.jsxs)(a.p,{children:["The insert overwrite non-partitioned table sql statement will convert to the ",(0,r.jsx)(a.em,{children:(0,r.jsx)(a.strong,{children:"insert_overwrite_table"})})," operation.\ne.g."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"insert overwrite table h0 select 1, 'a1', 20;\n"})})]})]}),"\n",(0,r.jsx)(a.h2,{id:"insert-overwrite",children:"Insert Overwrite"}),"\n",(0,r.jsxs)(a.p,{children:["Generate some new trips, overwrite the all the partitions that are present in the input. This operation can be faster\nthan ",(0,r.jsx)(a.code,{children:"upsert"})," for batch ETL jobs, that are recomputing entire target partitions at once (as opposed to incrementally\nupdating the target tables). This is because, we are able to bypass indexing, precombining and other repartitioning\nsteps in the upsert write path completely."]}),"\n",(0,r.jsxs)(s.A,{defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"SparkSQL",value:"sparksql"}],children:[(0,r.jsx)(o.A,{value:"scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:'// spark-shell\nspark.\n  read.format("hudi").\n  load(basePath).\n  select("uuid","partitionpath").\n  sort("partitionpath","uuid").\n  show(100, false)\n\nval inserts = convertToStringList(dataGen.generateInserts(10))\nval df = spark.\n  read.json(spark.sparkContext.parallelize(inserts, 2)).\n  filter("partitionpath = \'americas/united_states/san_francisco\'")\ndf.write.format("hudi").\n  options(getQuickstartWriteConfigs).\n  option(OPERATION.key(),"insert_overwrite").\n  option(PRECOMBINE_FIELD.key(), "ts").\n  option(RECORDKEY_FIELD.key(), "uuid").\n  option(PARTITIONPATH_FIELD.key(), "partitionpath").\n  option(TBL_NAME.key(), tableName).\n  mode(Append).\n  save(basePath)\n\n// Should have different keys now for San Francisco alone, from query before.\nspark.\n  read.format("hudi").\n  load(basePath).\n  select("uuid","partitionpath").\n  sort("partitionpath","uuid").\n  show(100, false)\n'})})}),(0,r.jsxs)(o.A,{value:"sparksql",children:[(0,r.jsxs)(a.p,{children:["The insert overwrite partitioned table sql statement will convert to the ",(0,r.jsx)(a.em,{children:(0,r.jsx)(a.strong,{children:"insert_overwrite"})})," operation.\ne.g."]}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"insert overwrite table h_p1 select 2 as id, 'a2', '2021-01-03' as dt, '19' as hh;\n"})})]})]}),"\n",(0,r.jsx)(a.h2,{id:"more-spark-sql-commands",children:"More Spark Sql Commands"}),"\n",(0,r.jsx)(a.h3,{id:"altertable",children:"AlterTable"}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Syntax"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"-- Alter table name\nALTER TABLE oldTableName RENAME TO newTableName\n\n-- Alter table add columns\nALTER TABLE tableIdentifier ADD COLUMNS(colAndType (,colAndType)*)\n\n-- Alter table column type\nALTER TABLE tableIdentifier CHANGE COLUMN colName colName colType\n"})}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Examples"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"alter table h0 rename to h0_1;\n\nalter table h0_1 add columns(ext0 string);\n\nalter table h0_1 change column id id bigint;\n"})}),"\n",(0,r.jsx)(a.h3,{id:"use-set-command",children:"Use set command"}),"\n",(0,r.jsxs)(a.p,{children:["You can use the ",(0,r.jsx)(a.strong,{children:"set"})," command to set any custom hudi's config, which will work for the\nwhole spark session scope."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"set hoodie.insert.shuffle.parallelism = 100;\nset hoodie.upsert.shuffle.parallelism = 100;\nset hoodie.delete.shuffle.parallelism = 100;\n"})}),"\n",(0,r.jsx)(a.h3,{id:"set-with-table-options",children:"Set with table options"}),"\n",(0,r.jsx)(a.p,{children:"You can also set the config with table options when creating table which will work for\nthe table scope only and override the config set by the SET command."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"create table if not exists h3(\n  id bigint, \n  name string, \n  price double\n) using hudi\noptions (\n  primaryKey = 'id',\n  type = 'mor',\n  ${hoodie.config.key1} = '${hoodie.config.value2}',\n  ${hoodie.config.key2} = '${hoodie.config.value2}',\n  ....\n);\n\ne.g.\ncreate table if not exists h3(\n  id bigint, \n  name string, \n  price double\n) using hudi\noptions (\n  primaryKey = 'id',\n  type = 'mor',\n  hoodie.cleaner.fileversions.retained = '20',\n  hoodie.keep.max.commits = '20'\n);\n"})}),"\n",(0,r.jsxs)(a.p,{children:["You can also alter the write config for a table by the ",(0,r.jsx)(a.strong,{children:"ALTER SERDEPROPERTIES"})]}),"\n",(0,r.jsx)(a.p,{children:"e.g."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:" alter table h3 set serdeproperties (hoodie.keep.max.commits = '10') \n"})}),"\n",(0,r.jsx)(a.h2,{id:"where-to-go-from-here",children:"Where to go from here?"}),"\n",(0,r.jsxs)(a.p,{children:["You can also do the quickstart by ",(0,r.jsx)(a.a,{href:"https://github.com/apache/hudi#building-apache-hudi-from-source",children:"building hudi yourself"}),",\nand using ",(0,r.jsx)(a.code,{children:"--jars <path to hudi_code>/packaging/hudi-spark-bundle/target/hudi-spark-bundle_2.1?-*.*.*-SNAPSHOT.jar"})," in the spark-shell command above\ninstead of ",(0,r.jsx)(a.code,{children:"--packages org.apache.hudi:hudi-spark3-bundle_2.12:0.9.0"}),". Hudi also supports scala 2.12. Refer ",(0,r.jsx)(a.a,{href:"https://github.com/apache/hudi#build-with-scala-212",children:"build with scala 2.12"}),"\nfor more info."]}),"\n",(0,r.jsxs)(a.p,{children:["Also, we used Spark here to show case the capabilities of Hudi. However, Hudi can support multiple table types/query types and\nHudi tables can be queried from query engines like Hive, Spark, Presto and much more. We have put together a\n",(0,r.jsx)(a.a,{href:"https://www.youtube.com/watch?v=VhNgUsxdrD0",children:"demo video"})," that show cases all of this on a docker based setup with all\ndependent systems running locally. We recommend you replicate the same setup and run the demo yourself, by following\nsteps ",(0,r.jsx)(a.a,{href:"/docs/docker_demo",children:"here"})," to get a taste for it. Also, if you are looking for ways to migrate your existing data\nto Hudi, refer to ",(0,r.jsx)(a.a,{href:"/docs/migration_guide",children:"migration guide"}),"."]})]})}function u(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},19365:(e,a,n)=>{n.d(a,{A:()=>s});n(96540);var t=n(34164);const r={tabItem:"tabItem_Ymn6"};var i=n(74848);function s(e){let{children:a,hidden:n,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,s),hidden:n,children:a})}},11470:(e,a,n)=>{n.d(a,{A:()=>w});var t=n(96540),r=n(34164),i=n(23104),s=n(56347),o=n(205),l=n(57485),d=n(31682),c=n(70679);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:a,children:n}=e;return(0,t.useMemo)((()=>{const e=a??function(e){return h(e).map((e=>{let{props:{value:a,label:n,attributes:t,default:r}}=e;return{value:a,label:n,attributes:t,default:r}}))}(n);return function(e){const a=(0,d.XI)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,n])}function u(e){let{value:a,tabValues:n}=e;return n.some((e=>e.value===a))}function m(e){let{queryString:a=!1,groupId:n}=e;const r=(0,s.W6)(),i=function(e){let{queryString:a=!1,groupId:n}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:a,groupId:n});return[(0,l.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const a=new URLSearchParams(r.location.search);a.set(i,e),r.replace({...r.location,search:a.toString()})}),[i,r])]}function g(e){const{defaultValue:a,queryString:n=!1,groupId:r}=e,i=p(e),[s,l]=(0,t.useState)((()=>function(e){let{defaultValue:a,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!u({value:a,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:a,tabValues:i}))),[d,h]=m({queryString:n,groupId:r}),[g,b]=function(e){let{groupId:a}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,i]=(0,c.Dv)(n);return[r,(0,t.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),f=(()=>{const e=d??g;return u({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{f&&l(f)}),[f]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),b(e)}),[h,b,i]),tabValues:i}}var b=n(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=n(74848);function j(e){let{className:a,block:n,selectedValue:t,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const a=e.currentTarget,n=l.indexOf(a),r=o[n].value;r!==t&&(d(a),s(r))},h=e=>{let a=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;a=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;a=l[n]??l[l.length-1];break}}a?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},a),children:o.map((e=>{let{value:a,label:n,attributes:i}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:t===a?0:-1,"aria-selected":t===a,ref:e=>l.push(e),onKeyDown:h,onClick:c,...i,className:(0,r.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":t===a}),children:n??a},a)}))})}function k(e){let{lazy:a,children:n,selectedValue:i}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(a){const e=s.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,a)=>(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==i})))})}function y(e){const a=g(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",f.tabList),children:[(0,x.jsx)(j,{...a,...e}),(0,x.jsx)(k,{...a,...e})]})}function w(e){const a=(0,b.A)();return(0,x.jsx)(y,{...e,children:h(e.children)},String(a))}},28453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>o});var t=n(96540);const r={},i=t.createContext(r);function s(e){const a=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:a},e.children)}}}]);