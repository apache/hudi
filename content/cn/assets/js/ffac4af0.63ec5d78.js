"use strict";(self.webpackChunkhudi=self.webpackChunkhudi||[]).push([[83371],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(a),d=r,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return a?n.createElement(g,i(i({ref:t},p),{},{components:a})):n.createElement(g,i({ref:t},p))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},48214:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={title:"Apache Hudi - The Data Lake Platform",excerpt:"It's been called many things. But, we have always been building a data lake platform",author:"vinoth",category:"blog",image:"/assets/images/blog/hudi_streaming.png",tags:["datalake platform","blog","apache hudi"]},i=void 0,l={permalink:"/cn/blog/2021/07/21/streaming-data-lake-platform",editUrl:"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-07-21-streaming-data-lake-platform.md",source:"@site/blog/2021-07-21-streaming-data-lake-platform.md",title:"Apache Hudi - The Data Lake Platform",description:"As early as 2016, we set out a bold, new vision reimagining batch data processing through a new \u201cincremental\u201d data processing stack - alongside the existing batch and streaming stacks.",date:"2021-07-21T00:00:00.000Z",formattedDate:"July 21, 2021",tags:[{label:"datalake platform",permalink:"/cn/blog/tags/datalake-platform"},{label:"blog",permalink:"/cn/blog/tags/blog"},{label:"apache hudi",permalink:"/cn/blog/tags/apache-hudi"}],readingTime:28.99,truncated:!0,authors:[{name:"vinoth"}],prevItem:{title:"Baixin bank\u2019s real-time data lake evolution scheme based on Apache Hudi",permalink:"/cn/blog/2021/07/26/Baixin-banksreal-time-data-lake-evolution-scheme-based-on-Apache-Hudi"},nextItem:{title:"Amazon Athena expands Apache Hudi support",permalink:"/cn/blog/2021/07/16/Amazon-Athena-expands-Apache-Hudi-support"}},s={authorsImageUrls:[void 0]},c=[],p={toc:c},m="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"As early as 2016, we set out a ",(0,r.kt)("a",{parentName:"p",href:"https://www.oreilly.com/content/ubers-case-for-incremental-processing-on-hadoop/"},"bold, new vision")," reimagining batch data processing through a new \u201c",(0,r.kt)("strong",{parentName:"p"},"incremental"),"\u201d data processing stack - alongside the existing batch and streaming stacks.\nWhile a stream processing pipeline does row-oriented processing, delivering a few seconds of processing latency, an incremental pipeline would apply the same principles to ",(0,r.kt)("em",{parentName:"p"},"columnar")," data in the data lake,\ndelivering orders of magnitude improvements in processing efficiency within few minutes, on extremely scalable batch storage/compute infrastructure. This new stack would be able to effortlessly support regular batch processing for bulk reprocessing/backfilling as well.\nHudi was built as the manifestation of this vision, rooted in real, hard problems faced at ",(0,r.kt)("a",{parentName:"p",href:"https://eng.uber.com/uber-big-data-platform/"},"Uber")," and later took a life of its own in the open source community. Together, we have been able to\nusher in fully incremental data ingestion and moderately complex ETLs on data lakes already."))}u.isMDXComponent=!0}}]);