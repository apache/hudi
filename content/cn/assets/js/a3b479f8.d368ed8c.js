"use strict";(globalThis.webpackChunkhudi=globalThis.webpackChunkhudi||[]).push([[52835],{14678:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var a=t(91112),n=t(74848),s=t(28453);const r={title:"Scaling Complex Data Workflows at Uber Using Apache Hudi",excerpt:"How Uber's Core Services Data Engineering team supports a wide range of use cases with Apache Hudi",author:"Ankit Shrivastava in collaboration with Dipankar",category:"blog",image:"/assets/images/blog/uber1200x600.jpg",tags:["Apache Hudi","Uber","Community"]},l=void 0,o={authorsImageUrls:[void 0]},d=[{value:"The Challenge: Scale, Latency, and Complexity",id:"the-challenge-scale-latency-and-complexity",level:2},{value:"Rigid SQL and Tight Coupling",id:"rigid-sql-and-tight-coupling",level:2},{value:"How We Solved It?",id:"how-we-solved-it",level:2},{value:"Final Architecture",id:"final-architecture",level:2},{value:"The Wins with Hudi",id:"the-wins-with-hudi",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.admonition,{title:"TL;DR",type:"tip",children:(0,n.jsx)(i.p,{children:"Uber\u2019s trip and order collection pipelines grew highly complex, with long runtimes, massive DAGs, and rigid SQL logic that hampered scalability and maintainability. By adopting Apache Hudi, Uber re-architected these pipelines to enable incremental processing, custom merge behavior, and rule-based functional transformations. This reduced runtime from 20 hours to 4 hours, improved test coverage to 95%, cut costs by 60%, and delivered a composable, explainable, and scalable data workflow architecture."})}),"\n",(0,n.jsx)(i.p,{children:"At Uber, the Core Services Data Engineering team supports a wide range of use cases across products like Uber Mobility and Uber Eats. One critical use case is computing the collection - the net payable amount - from a trip or an order. While this sounds straightforward at first, it quickly becomes a complex data problem when you factor in real-world scenarios like refunds, tips, driver disputes, location updates, and settlement adjustments across multiple verticals."}),"\n",(0,n.jsxs)(i.p,{children:["To solve this problem at scale, Uber re-architected their pipelines using ",(0,n.jsx)(i.a,{href:"https://hudi.apache.org/",children:"Apache Hudi"})," to enable low-latency, incremental, and rule-based processing. This post outlines the challenges they faced, the architectural shifts they made, and the measurable outcomes they achieved in production."]}),"\n",(0,n.jsx)(i.h2,{id:"the-challenge-scale-latency-and-complexity",children:"The Challenge: Scale, Latency, and Complexity"}),"\n",(0,n.jsx)("img",{src:"/assets/images/blog/figure2_uber.png",alt:"challenge",width:"800",align:"middle"}),"\n",(0,n.jsx)(i.p,{children:"Our original data pipelines were processing nearly 90 million records a day, but the nature of updates made them inefficient. For instance, a trip taken three years ago could still be updated due to a late settlement. Our statistical analysis showed most updates occur within 180 days, so we designed the system to read and write a 180-day window every day - leading to severe read and write amplification."}),"\n",(0,n.jsx)(i.p,{children:"The pipeline itself was a massive DAG with over 50\u201360 tasks, taking close to 20 hours to complete. These long runtimes made recovery difficult and introduced operational risks. Making a change meant tracing the logic across this sprawling DAG, which affected developer productivity and increased the chances of regressions."}),"\n",(0,n.jsx)(i.p,{children:"Despite the large window, we still missed updates that fell outside the 180-day mark, leading to data quality issues. The long development cycles and heavy debugging effort further hindered our ability to iterate and maintain the system."}),"\n",(0,n.jsx)(i.h2,{id:"rigid-sql-and-tight-coupling",children:"Rigid SQL and Tight Coupling"}),"\n",(0,n.jsx)(i.p,{children:"Digging deeper, we identified multiple underlying causes. The pipeline relied heavily on SQL for all transformations. But expressing the evolving business rules for different Uber products in SQL was limiting. The logic had grown too complex to be managed effectively, and granular transformations led to a proliferation of intermediate stages. This made unit testing and debugging difficult, and the absence of structured logging made observability poor."}),"\n",(0,n.jsx)("img",{src:"/assets/images/blog/figure3_uber.png",alt:"redshift",width:"800",align:"middle"}),"\n",(0,n.jsx)(i.p,{children:"Additionally, data and logic were tightly coupled. The system often required joining tables at very fine granularities, introducing redundancy and making logic harder to reason about. Complex joins, table scans, and late-arriving data amplified processing costs. It was also difficult to trace how a specific row was transformed through the DAG, making explainability a real challenge."}),"\n",(0,n.jsx)(i.h2,{id:"how-we-solved-it",children:"How We Solved It?"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.strong,{children:"Solving Read Amplification"})}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["The first step in addressing inefficiencies was eliminating the brute-force strategy of scanning and processing a 180-day window of data on every pipeline run. With the help of Apache Hudi\u2019s ",(0,n.jsxs)(i.a,{href:"https://hudi.apache.org/docs/table_types#incremental-queries",children:[(0,n.jsx)(i.em,{children:"incremental"})," ",(0,n.jsx)(i.em,{children:"read"})]})," capabilities, we restructured the ingestion layer to read only the records that had mutated since the last checkpoint."]}),"\n",(0,n.jsx)("img",{src:"/assets/images/blog/fig4_uber.png",alt:"redshift",width:"800",align:"middle"}),"\n",(0,n.jsx)(i.p,{children:"We introduced an intermediate Hudi table that consolidated all related records for a trip or order into a single row, using complex data types such as structs, lists, and maps. This model allowed us to capture the complete state of a trip - including all updates, tips, disputes, and refunds in one place, without scattering information across multiple joins."}),"\n",(0,n.jsx)(i.p,{children:"By using this intermediate table as the foundation, all downstream logic could operate on change-driven inputs. The result was a pipeline that avoided unnecessary scans, improved correctness by processing all real changes (not just those in a time window), and reduced overall I/O dramatically."}),"\n",(0,n.jsxs)(i.ol,{start:"2",children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.strong,{children:"Eliminating Self Joins with Custom Payloads"})}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"Self joins - especially for reconciling updates to the same trip were one of the costliest operations in our original pipeline."}),"\n",(0,n.jsx)("img",{src:"/assets/images/blog/fig5_uber.png",alt:"redshift",width:"800",align:"middle"}),"\n",(0,n.jsxs)(i.p,{children:["To solve this, we implemented a custom Hudi payload class that allows us to control how updates are applied during the merge phase. This class overrides methods such as ",(0,n.jsx)(i.code,{children:"combineAndGetUpdateValue"})," and ",(0,n.jsx)(i.code,{children:"getInsertValue"}),", and executes the merge logic as part of the write path, eliminating the need for a full table scan or shuffle."]}),"\n",(0,n.jsx)(i.p,{children:"This approach helped us efficiently handle updates to complex, nested records in the intermediate Hudi table, and dramatically reduced the cost associated with self joins."}),"\n",(0,n.jsxs)(i.ol,{start:"3",children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.strong,{children:"Simplifying Processing with a Rule-Based Framework"})}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"To move away from the rigidity of SQL, we designed a rule engine framework based on functional programming principles."}),"\n",(0,n.jsx)(i.p,{children:"Instead of expressing business logic as large, monolithic SQL queries, we cast each input row (from the intermediate table) into a strongly typed object (e.g., a Trip object). These objects were then passed through a series of declarative rules - each consisting of a condition and an action."}),"\n",(0,n.jsx)("img",{src:"/assets/images/blog/fig6_uber.png",alt:"redshift",width:"800",align:"middle"}),"\n",(0,n.jsxs)(i.p,{children:["This framework was implemented as a custom ",(0,n.jsx)(i.a,{href:"https://hudi.apache.org/docs/hoodie_streaming_ingestion#transformers",children:(0,n.jsx)(i.em,{children:"transformer"})})," plugged into ",(0,n.jsx)(i.a,{href:"https://hudi.apache.org/docs/hoodie_streaming_ingestion",children:"HudiStreamer"}),". The transformer intercepts the ingested data, applies the rule engine logic, and emits the transformed object to the final Hudi output table. We also built in capabilities for:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Logging and observability (for metrics and debugging)"}),"\n",(0,n.jsx)(i.li,{children:"Unreachable state detection (flagging invalid rows)"}),"\n",(0,n.jsx)(i.li,{children:"Unit testing support for each rule independently"}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"This architecture replaced the huge DAG with modular, testable, and composable rule definitions, dramatically improving developer productivity and data pipeline clarity."}),"\n",(0,n.jsx)(i.h2,{id:"final-architecture",children:"Final Architecture"}),"\n",(0,n.jsx)("img",{src:"/assets/images/blog/fig7_uber.png",alt:"redshift",width:"800",align:"middle"}),"\n",(0,n.jsx)(i.p,{children:"The redesigned system follows a clean, composable structure:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Incremental ingestion from the data lake is done using HudiStreamer, which writes to an intermediate Hudi table."}),"\n",(0,n.jsx)(i.li,{children:"The intermediate table consolidates all records for a trip using complex types, serving as the central input for downstream processing."}),"\n",(0,n.jsx)(i.li,{children:"A custom Transformer intercepts the records, casts them into typed domain objects, and passes them through a rule engine."}),"\n",(0,n.jsx)(i.li,{children:"The rule engine applies business logic declaratively and emits fully processed objects."}),"\n",(0,n.jsx)(i.li,{children:"The output is written to a final Hudi table that supports efficient, incremental consumption."}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"This design eliminates redundant scans, reduces shuffle overhead, enables full test coverage, and offers detailed observability across all transformation stages."}),"\n",(0,n.jsx)(i.h2,{id:"the-wins-with-hudi",children:"The Wins with Hudi"}),"\n",(0,n.jsx)(i.p,{children:"The improvements were substantial and measurable:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Runtime reduced from ~20 hours to ~4 hours (~75% improvement)"}),"\n",(0,n.jsx)(i.li,{children:"Test coverage increased to 95% for transformation logic"}),"\n",(0,n.jsx)(i.li,{children:"Single run cost reduced by 60%"}),"\n",(0,n.jsx)(i.li,{children:"Improved data completeness, processing all updates\u2014not just those in a statistical window"}),"\n",(0,n.jsx)(i.li,{children:"Reusable and modular logic, reducing DAG complexity"}),"\n",(0,n.jsx)(i.li,{children:"Higher developer productivity, with isolated unit testing and simplified debugging"}),"\n",(0,n.jsx)(i.li,{children:"Improved self-join performance through custom payloads"}),"\n",(0,n.jsx)(i.li,{children:"A generic rule engine design, portable across Spark and Flink"}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"Apache Hudi has been central to Nexus\u2019 success, providing the core data lake storage layer for scalable ingestion, updates, and metadata management. It enables fast, incremental updates at massive scale while maintaining transactional guarantees on top of Amazon S3."}),"\n",(0,n.jsx)(i.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,n.jsx)(i.p,{children:"By redesigning the system around Apache Hudi and adopting functional, rule-based processing, Uber was able to transform a brittle, long-running pipeline into a maintainable and efficient architecture. The changes allowed them to scale their data workflows to meet the needs of complex, multi-product use cases without compromising on performance, observability, or data quality."}),"\n",(0,n.jsx)(i.p,{children:"This work highlights the power of pairing the right storage format with a principled architectural approach. Apache Hudi was instrumental in helping achieve these outcomes and continues to play a key role in Uber\u2019s evolving data platform."}),"\n",(0,n.jsxs)(i.p,{children:["This blog is based on Uber\u2019s presentation at the Apache Hudi Community Sync. If you are interested in watching the recorded version of the video, you can find it ",(0,n.jsx)(i.a,{href:"https://www.youtube.com/watch?v=VpdimpH_nsI",children:"here"}),"."]}),"\n",(0,n.jsx)(i.hr,{})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>r,x:()=>l});var a=t(96540);const n={},s=a.createContext(n);function r(e){const i=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(s.Provider,{value:i},e.children)}},91112:e=>{e.exports=JSON.parse('{"permalink":"/cn/blog/2025/06/30/uber-hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2025-06-30-uber-hudi.md","source":"@site/blog/2025-06-30-uber-hudi.md","title":"Scaling Complex Data Workflows at Uber Using Apache Hudi","description":"Uber\u2019s trip and order collection pipelines grew highly complex, with long runtimes, massive DAGs, and rigid SQL logic that hampered scalability and maintainability. By adopting Apache Hudi, Uber re-architected these pipelines to enable incremental processing, custom merge behavior, and rule-based functional transformations. This reduced runtime from 20 hours to 4 hours, improved test coverage to 95%, cut costs by 60%, and delivered a composable, explainable, and scalable data workflow architecture.","date":"2025-06-30T00:00:00.000Z","tags":[{"inline":true,"label":"Apache Hudi","permalink":"/cn/blog/tags/apache-hudi"},{"inline":true,"label":"Uber","permalink":"/cn/blog/tags/uber"},{"inline":true,"label":"Community","permalink":"/cn/blog/tags/community"}],"readingTime":6.78,"hasTruncateMarker":false,"authors":[{"name":"Ankit Shrivastava in collaboration with Dipankar","key":null,"page":null}],"frontMatter":{"title":"Scaling Complex Data Workflows at Uber Using Apache Hudi","excerpt":"How Uber\'s Core Services Data Engineering team supports a wide range of use cases with Apache Hudi","author":"Ankit Shrivastava in collaboration with Dipankar","category":"blog","image":"/assets/images/blog/uber1200x600.jpg","tags":["Apache Hudi","Uber","Community"]},"unlisted":false,"prevItem":{"title":"Lakehouse Architecture - Apache Hudi and Apache Iceberg","permalink":"/cn/blog/2025/07/02/Lakehouse-Architecture-apache-hudi-and-apache-iceberg"},"nextItem":{"title":"Apache Hudi does XYZ (1/10): File pruning with multi-modal index","permalink":"/cn/blog/2025/06/16/Apache-Hudi-does-XYZ-110"}}')}}]);