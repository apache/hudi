"use strict";(self.webpackChunkhudi=self.webpackChunkhudi||[]).push([[22534],{15680:(e,a,t)=>{t.d(a,{xA:()=>m,yg:()=>u});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var g=n.createContext({}),d=function(e){var a=n.useContext(g),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},m=function(e){var a=d(e.components);return n.createElement(g.Provider,{value:a},e.children)},s="mdxType",y={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},p=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,g=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=d(t),p=r,u=s["".concat(g,".").concat(p)]||s[p]||y[p]||i;return t?n.createElement(u,l(l({ref:a},m),{},{components:t})):n.createElement(u,l({ref:a},m))}));function u(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=p;var o={};for(var g in a)hasOwnProperty.call(a,g)&&(o[g]=a[g]);o.originalType=e,o[s]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=t[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},98029:(e,a,t)=>{t.r(a),t.d(a,{contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>g});var n=t(58168),r=(t(96540),t(15680));const i={title:"All Configurations",keywords:["configurations","default","flink options","spark","configs","parameters"],permalink:"/docs/configurations.html",summary:"This page covers the different ways of configuring your job to write/read Hudi tables. At a high level, you can control behaviour at few levels.",toc_min_heading_level:2,toc_max_heading_level:4,last_modified_at:new Date("2024-01-03T18:52:29.379Z")},l=void 0,o={unversionedId:"configurations",id:"version-0.14.1/configurations",title:"All Configurations",description:"This page covers the different ways of configuring your job to write/read Hudi tables. At a high level, you can control behaviour at few levels.",source:"@site/versioned_docs/version-0.14.1/configurations.md",sourceDirName:".",slug:"/configurations",permalink:"/cn/docs/configurations",editUrl:"https://github.com/apache/hudi/tree/asf-site/website/versioned_docs/version-0.14.1/configurations.md",tags:[],version:"0.14.1",frontMatter:{title:"All Configurations",keywords:["configurations","default","flink options","spark","configs","parameters"],permalink:"/docs/configurations.html",summary:"This page covers the different ways of configuring your job to write/read Hudi tables. At a high level, you can control behaviour at few levels.",toc_min_heading_level:2,toc_max_heading_level:4,last_modified_at:"2024-01-03T18:52:29.379Z"},sidebar:"docs",previous:{title:"Basic Configurations",permalink:"/cn/docs/basic_configurations"},next:{title:"Performance",permalink:"/cn/docs/performance"}},g=[{value:"Externalized Config File",id:"externalized-config-file",children:[],level:2},{value:"Spark Datasource Configs",id:"SPARK_DATASOURCE",children:[{value:"Read Options",id:"Read-Options",children:[],level:3},{value:"Write Options",id:"Write-Options",children:[],level:3},{value:"PreCommit Validator Configurations",id:"PreCommit-Validator-Configurations",children:[],level:3}],level:2},{value:"Flink Sql Configs",id:"FLINK_SQL",children:[{value:"Flink Options",id:"Flink-Options",children:[],level:3}],level:2},{value:"Write Client Configs",id:"WRITE_CLIENT",children:[{value:"Common Configurations",id:"Common-Configurations",children:[],level:3},{value:"Metadata Configs",id:"Metadata-Configs",children:[],level:3},{value:"Metaserver Configs",id:"Metaserver-Configs",children:[],level:3},{value:"Storage Configs",id:"Storage-Configs",children:[],level:3},{value:"Consistency Guard Configurations",id:"Consistency-Guard-Configurations",children:[],level:3},{value:"FileSystem Guard Configurations",id:"FileSystem-Guard-Configurations",children:[],level:3},{value:"File System View Storage Configurations",id:"File-System-View-Storage-Configurations",children:[],level:3},{value:"Archival Configs",id:"Archival-Configs",children:[],level:3},{value:"Bootstrap Configs",id:"Bootstrap-Configs",children:[],level:3},{value:"Clean Configs",id:"Clean-Configs",children:[],level:3},{value:"Clustering Configs",id:"Clustering-Configs",children:[],level:3},{value:"Compaction Configs",id:"Compaction-Configs",children:[],level:3},{value:"Layout Configs",id:"Layout-Configs",children:[],level:3},{value:"Memory Configurations",id:"Memory-Configurations",children:[],level:3},{value:"Write Configurations",id:"Write-Configurations",children:[],level:3},{value:"Commit Callback Configs",id:"COMMIT_CALLBACK",children:[{value:"Write commit callback configs",id:"Write-commit-callback-configs",children:[],level:4},{value:"Write commit Kafka callback configs",id:"Write-commit-Kafka-callback-configs",children:[],level:4},{value:"Write commit pulsar callback configs",id:"Write-commit-pulsar-callback-configs",children:[],level:4}],level:3},{value:"Lock Configs",id:"LOCK",children:[{value:"Common Lock Configurations",id:"Common-Lock-Configurations",children:[],level:4},{value:"DynamoDB based Locks Configurations",id:"DynamoDB-based-Locks-Configurations",children:[],level:4}],level:3},{value:"Key Generator Configs",id:"KEY_GENERATOR",children:[{value:"Key Generator Options",id:"Key-Generator-Options",children:[],level:4}],level:3},{value:"Index Configs",id:"INDEX",children:[{value:"Common Index Configs",id:"Common-Index-Configs",children:[],level:4},{value:"HBase Index Configs",id:"HBase-Index-Configs",children:[],level:4}],level:3}],level:2},{value:"Metastore and Catalog Sync Configs",id:"META_SYNC",children:[{value:"Common Metadata Sync Configs",id:"Common-Metadata-Sync-Configs",children:[],level:3},{value:"Glue catalog sync based client Configurations",id:"Glue-catalog-sync-based-client-Configurations",children:[],level:3},{value:"BigQuery Sync Configs",id:"BigQuery-Sync-Configs",children:[],level:3},{value:"Hive Sync Configs",id:"Hive-Sync-Configs",children:[],level:3},{value:"Global Hive Sync Configs",id:"Global-Hive-Sync-Configs",children:[],level:3},{value:"DataHub Sync Configs",id:"DataHub-Sync-Configs",children:[],level:3}],level:2},{value:"Metrics Configs",id:"METRICS",children:[{value:"Metrics Configurations for Amazon CloudWatch",id:"Metrics-Configurations-for-Amazon-CloudWatch",children:[],level:3},{value:"Metrics Configurations",id:"Metrics-Configurations",children:[],level:3},{value:"Metrics Configurations for Datadog reporter",id:"Metrics-Configurations-for-Datadog-reporter",children:[],level:3},{value:"Metrics Configurations for Graphite",id:"Metrics-Configurations-for-Graphite",children:[],level:3},{value:"Metrics Configurations for Jmx",id:"Metrics-Configurations-for-Jmx",children:[],level:3},{value:"Metrics Configurations for Prometheus",id:"Metrics-Configurations-for-Prometheus",children:[],level:3}],level:2},{value:"Record Payload Config",id:"RECORD_PAYLOAD",children:[{value:"Payload Configurations",id:"Payload-Configurations",children:[],level:3}],level:2},{value:"Kafka Connect Configs",id:"KAFKA_CONNECT",children:[{value:"Kafka Sink Connect Configurations",id:"Kafka-Sink-Connect-Configurations",children:[],level:3}],level:2},{value:"Amazon Web Services Configs",id:"AWS",children:[{value:"Amazon Web Services Configs",id:"Amazon-Web-Services-Configs",children:[],level:3}],level:2},{value:"Hudi Streamer Configs",id:"HUDI_STREAMER",children:[{value:"Hudi Streamer Configs",id:"Hudi-Streamer-Configs",children:[],level:3},{value:"Hudi Streamer SQL Transformer Configs",id:"Hudi-Streamer-SQL-Transformer-Configs",children:[],level:3},{value:"Hudi Streamer Source Configs",id:"DELTA_STREAMER_SOURCE",children:[{value:"Cloud Source Configs",id:"Cloud-Source-Configs",children:[],level:4},{value:"DFS Path Selector Configs",id:"DFS-Path-Selector-Configs",children:[],level:4},{value:"Date Partition Path Selector Configs",id:"Date-Partition-Path-Selector-Configs",children:[],level:4},{value:"GCS Events Source Configs",id:"GCS-Events-Source-Configs",children:[],level:4},{value:"Hive Incremental Pulling Source Configs",id:"Hive-Incremental-Pulling-Source-Configs",children:[],level:4},{value:"Hudi Incremental Source Configs",id:"Hudi-Incremental-Source-Configs",children:[],level:4},{value:"JDBC Source Configs",id:"JDBC-Source-Configs",children:[],level:4},{value:"Json Kafka Post Processor Configs",id:"Json-Kafka-Post-Processor-Configs",children:[],level:4},{value:"Kafka Source Configs",id:"Kafka-Source-Configs",children:[],level:4},{value:"Pulsar Source Configs",id:"Pulsar-Source-Configs",children:[],level:4},{value:"S3 Event-based Hudi Incremental Source Configs",id:"S3-Event-based-Hudi-Incremental-Source-Configs",children:[],level:4},{value:"S3 Source Configs",id:"S3-Source-Configs",children:[],level:4},{value:"SQL Source Configs",id:"SQL-Source-Configs",children:[],level:4}],level:3},{value:"Hudi Streamer Schema Provider Configs",id:"SCHEMA_PROVIDER",children:[{value:"Hudi Streamer Schema Provider Configs",id:"Hudi-Streamer-Schema-Provider-Configs",children:[],level:4},{value:"File-based Schema Provider Configs",id:"File-based-Schema-Provider-Configs",children:[],level:4},{value:"Hive Schema Provider Configs",id:"Hive-Schema-Provider-Configs",children:[],level:4},{value:"JDBC-based Schema Provider Configs",id:"JDBC-based-Schema-Provider-Configs",children:[],level:4},{value:"JDBC-based Schema Provider Configs",id:"JDBC-based-Schema-Provider-Configs",children:[],level:4},{value:"Schema Post Processor Config Configs",id:"Schema-Post-Processor-Config-Configs",children:[],level:4}],level:3}],level:2}],d={toc:g},m="wrapper";function s(e){let{components:a,...t}=e;return(0,r.yg)(m,(0,n.A)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"This page covers the different ways of configuring your job to write/read Hudi tables. At a high level, you can control behaviour at few levels."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#ENVIRONMENT_CONFIG"},(0,r.yg)("strong",{parentName:"a"},"Environment Config")),": Hudi supports passing configurations via a configuration file ",(0,r.yg)("inlineCode",{parentName:"li"},"hudi-default.conf")," in which each line consists of a key and a value separated by whitespace or = sign. For example:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"hoodie.datasource.hive_sync.mode               jdbc\nhoodie.datasource.hive_sync.jdbcurl            jdbc:hive2://localhost:10000\nhoodie.datasource.hive_sync.support_timestamp  false\n")),(0,r.yg)("p",null,"It helps to have a central configuration file for your common cross job configurations/tunings, so all the jobs on your cluster can utilize it. It also works with Spark SQL DML/DDL, and helps avoid having to pass configs inside the SQL statements."),(0,r.yg)("p",null,"By default, Hudi would load the configuration file under ",(0,r.yg)("inlineCode",{parentName:"p"},"/etc/hudi/conf")," directory. You can specify a different configuration directory location by setting the ",(0,r.yg)("inlineCode",{parentName:"p"},"HUDI_CONF_DIR")," environment variable."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#SPARK_DATASOURCE"},(0,r.yg)("strong",{parentName:"a"},"Spark Datasource Configs")),": These configs control the Hudi Spark Datasource, providing ability to define keys/partitioning, pick out the write operation, specify how to merge records or choosing query type to read."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#FLINK_SQL"},(0,r.yg)("strong",{parentName:"a"},"Flink Sql Configs")),": These configs control the Hudi Flink SQL source/sink connectors, providing ability to define record keys, pick out the write operation, specify how to merge records, enable/disable asynchronous compaction or choosing query type to read."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#WRITE_CLIENT"},(0,r.yg)("strong",{parentName:"a"},"Write Client Configs")),": Internally, the Hudi datasource uses a RDD based HoodieWriteClient API to actually perform writes to storage. These configs provide deep control over lower level aspects like file sizing, compression, parallelism, compaction, write schema, cleaning etc. Although Hudi provides sane defaults, from time-time these configs may need to be tweaked to optimize for specific workloads."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#META_SYNC"},(0,r.yg)("strong",{parentName:"a"},"Metastore and Catalog Sync Configs")),": Configurations used by the Hudi to sync metadata to external metastores and catalogs."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#METRICS"},(0,r.yg)("strong",{parentName:"a"},"Metrics Configs")),": These set of configs are used to enable monitoring and reporting of key Hudi stats and metrics."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#RECORD_PAYLOAD"},(0,r.yg)("strong",{parentName:"a"},"Record Payload Config")),": This is the lowest level of customization offered by Hudi. Record payloads define how to produce new values to upsert based on incoming new record and stored old record. Hudi provides default implementations such as OverwriteWithLatestAvroPayload which simply update table with the latest/last-written record. This can be overridden to a custom class extending HoodieRecordPayload class, on both datasource and WriteClient levels."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#KAFKA_CONNECT"},(0,r.yg)("strong",{parentName:"a"},"Kafka Connect Configs")),": These set of configs are used for Kafka Connect Sink Connector for writing Hudi Tables"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#AWS"},(0,r.yg)("strong",{parentName:"a"},"Amazon Web Services Configs")),": Configurations specific to Amazon Web Services."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#HUDI_STREAMER"},(0,r.yg)("strong",{parentName:"a"},"Hudi Streamer Configs")),": These set of configs are used for Hudi Streamer utility which provides the way to ingest from different sources such as DFS or Kafka.")),(0,r.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"In the tables below ",(0,r.yg)("strong",{parentName:"p"},"(N/A)")," means there is no default value set"))),(0,r.yg)("h2",{id:"externalized-config-file"},"Externalized Config File"),(0,r.yg)("p",null,"Instead of directly passing configuration settings to every Hudi job, you can also centrally set them in a configuration\nfile ",(0,r.yg)("inlineCode",{parentName:"p"},"hudi-default.conf"),". By default, Hudi would load the configuration file under ",(0,r.yg)("inlineCode",{parentName:"p"},"/etc/hudi/conf")," directory. You can\nspecify a different configuration directory location by setting the ",(0,r.yg)("inlineCode",{parentName:"p"},"HUDI_CONF_DIR")," environment variable. This can be\nuseful for uniformly enforcing repeated configs (like Hive sync or write/index tuning), across your entire data lake."),(0,r.yg)("h2",{id:"SPARK_DATASOURCE"},"Spark Datasource Configs"),(0,r.yg)("p",null,"These configs control the Hudi Spark Datasource, providing ability to define keys/partitioning, pick out the write operation, specify how to merge records or choosing query type to read."),(0,r.yg)("h3",{id:"Read-Options"},"Read Options"),(0,r.yg)("p",null,"Options useful for reading tables via ",(0,r.yg)("inlineCode",{parentName:"p"},"read.format.option(...)")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Read-Options-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcereadbegininstanttime"},"hoodie.datasource.read.begin.instanttime")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Required when ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.datasource.query.type")," is set to ",(0,r.yg)("inlineCode",{parentName:"td"},"incremental"),". Represents the instant time to start incrementally pulling data from. The instanttime here need not necessarily correspond to an instant on the timeline. New data written with an instant_time ",">"," BEGIN_INSTANTTIME are fetched out. For e.g: \u201820170901080000\u2019 will get all new data written after Sep 1, 2017 08:00AM. Note that if ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.read.timeline.holes.resolution.policy")," set to USE_TRANSITION_TIME, will use instant's ",(0,r.yg)("inlineCode",{parentName:"td"},"stateTransitionTime")," to perform comparison.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BEGIN_INSTANTTIME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcereadendinstanttime"},"hoodie.datasource.read.end.instanttime")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Used when ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.datasource.query.type")," is set to ",(0,r.yg)("inlineCode",{parentName:"td"},"incremental"),". Represents the instant time to limit incrementally fetched data to. When not specified latest commit time from timeline is assumed by default. When specified, new data written with an instant_time ","<","= END_INSTANTTIME are fetched out. Point in time type queries make more sense with begin and end instant times specified. Note that if ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.read.timeline.holes.resolution.policy")," set to ",(0,r.yg)("inlineCode",{parentName:"td"},"USE_TRANSITION_TIME"),", will use instant's ",(0,r.yg)("inlineCode",{parentName:"td"},"stateTransitionTime")," to perform comparison.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: END_INSTANTTIME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcequerytype"},"hoodie.datasource.query.type")),(0,r.yg)("td",{parentName:"tr",align:null},"snapshot"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether data needs to be read, in ",(0,r.yg)("inlineCode",{parentName:"td"},"incremental")," mode (new data since an instantTime) (or) ",(0,r.yg)("inlineCode",{parentName:"td"},"read_optimized")," mode (obtain latest view, based on base files) (or) ",(0,r.yg)("inlineCode",{parentName:"td"},"snapshot")," mode (obtain latest view, by merging base and (if any) log files)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: QUERY_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriteprecombinefield"},"hoodie.datasource.write.precombine.field")),(0,r.yg)("td",{parentName:"tr",align:null},"ts"),(0,r.yg)("td",{parentName:"tr",align:null},"Field used in preCombining before actual write. When two records have the same key value, we will pick the one with the largest value for the precombine field, determined by Object.compareTo(..)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: READ_PRE_COMBINE_FIELD"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Read-Options-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#asofinstant"},"as.of.instant")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The query instant for time travel. Without specified this option, we query the latest snapshot.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TIME_TRAVEL_AS_OF_INSTANT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcereadpaths"},"hoodie.datasource.read.paths")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Comma separated list of file paths to read within a Hudi table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: READ_PATHS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemergetype"},"hoodie.datasource.merge.type")),(0,r.yg)("td",{parentName:"tr",align:null},"payload_combine"),(0,r.yg)("td",{parentName:"tr",align:null},"For Snapshot query on merge on read table, control whether we invoke the record payload implementation to merge (payload_combine) or skip merging altogetherskip_merge",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REALTIME_MERGE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcequeryincrementalformat"},"hoodie.datasource.query.incremental.format")),(0,r.yg)("td",{parentName:"tr",align:null},"latest_state"),(0,r.yg)("td",{parentName:"tr",align:null},"This config is used alone with the 'incremental' query type.When set to 'latest_state', it returns the latest records' values.When set to 'cdc', it returns the cdc data.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INCREMENTAL_FORMAT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcereadextractpartitionvaluesfrompath"},"hoodie.datasource.read.extract.partition.values.from.path")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, values for partition columns (partition values) will be extracted from physical partition path (default Spark behavior). When set to false partition values will be read from the data file (in Hudi partition columns are persisted by default). This config is a fallback allowing to preserve existing behavior, and should not be used otherwise.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EXTRACT_PARTITION_VALUES_FROM_PARTITION_PATH"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcereadfileindexlistingmode"},"hoodie.datasource.read.file.index.listing.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"lazy"),(0,r.yg)("td",{parentName:"tr",align:null},"Overrides Hudi's file-index implementation's file listing mode: when set to 'eager', file-index will list all partition paths and corresponding file slices w/in them eagerly, during initialization, prior to partition-pruning kicking in, meaning that all partitions will be listed including ones that might be  subsequently pruned out; when set to 'lazy', partitions and file-slices w/in them will be listed lazily (ie when they actually accessed, instead of when file-index is initialized) allowing partition pruning to occur before that, only listing partitions that has already been pruned. Please note that, this config is provided purely to allow to fallback to behavior existing prior to 0.13.0 release, and will be deprecated soon after.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FILE_INDEX_LISTING_MODE_OVERRIDE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcereadfileindexlistingpartition-path-prefixanalysisenabled"},"hoodie.datasource.read.file.index.listing.partition-path-prefix.analysis.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls whether partition-path prefix analysis is enabled w/in the file-index, allowing to avoid necessity to recursively list deep folder structures of partitioned tables w/ multiple partition columns, by carefully analyzing provided partition-column predicates and deducing corresponding partition-path prefix from  them (if possible).",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FILE_INDEX_LISTING_PARTITION_PATH_PREFIX_ANALYSIS_ENABLED"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcereadincrfallbackfulltablescanenable"},"hoodie.datasource.read.incr.fallback.fulltablescan.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When doing an incremental query whether we should fall back to full table scans if file does not exist.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INCREMENTAL_FALLBACK_TO_FULL_TABLE_SCAN"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcereadincrfilters"},"hoodie.datasource.read.incr.filters")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"For use-cases like DeltaStreamer which reads from Hoodie Incremental table and applies opaque map functions, filters appearing late in the sequence of transformations cannot be automatically pushed down. This option allows setting filters directly on Hoodie Source.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PUSH_DOWN_INCR_FILTERS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcereadincrpathglob"},"hoodie.datasource.read.incr.path.glob")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"For the use-cases like users only want to incremental pull from certain partitions instead of the full table. This option allows using glob pattern to directly filter on path.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INCR_PATH_GLOB"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcereadschemauseendinstanttime"},"hoodie.datasource.read.schema.use.end.instanttime")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Uses end instant schema when incrementally fetched data to. Default: users latest instant schema.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INCREMENTAL_READ_SCHEMA_USE_END_INSTANTTIME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcereadusenewparquetfileformat"},"hoodie.datasource.read.use.new.parquet.file.format")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Read using the new Hudi parquet file format. The new Hudi parquet file format is introduced as an experimental feature in 0.14.0. Currently, the new Hudi parquet file format only applies to bootstrap and MOR queries. Schema evolution is also not supported by the new file format.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: USE_NEW_HUDI_PARQUET_FILE_FORMAT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcestreamingstartOffset"},"hoodie.datasource.streaming.startOffset")),(0,r.yg)("td",{parentName:"tr",align:null},"earliest"),(0,r.yg)("td",{parentName:"tr",align:null},"Start offset to pull data from hoodie streaming source. allow earliest, latest, and specified start instant time",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: START_OFFSET"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieenabledataskipping"},"hoodie.enable.data.skipping")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enables data-skipping allowing queries to leverage indexes to reduce the search space by skipping over files",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_DATA_SKIPPING"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefileindexenable"},"hoodie.file.index.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Enables use of the spark file index implementation for Hudi, that speeds up listing of large tables.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_HOODIE_FILE_INDEX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiereadtimelineholesresolutionpolicy"},"hoodie.read.timeline.holes.resolution.policy")),(0,r.yg)("td",{parentName:"tr",align:null},"FAIL"),(0,r.yg)("td",{parentName:"tr",align:null},"When doing incremental queries, there could be hollow commits (requested or inflight commits that are not the latest) that are produced by concurrent writers and could lead to potential data loss. This config allows users to have different ways of handling this situation. The valid values are ","[FAIL, BLOCK, USE_TRANSITION_TIME]",": Use ",(0,r.yg)("inlineCode",{parentName:"td"},"FAIL")," to throw an exception when hollow commit is detected. This is helpful when hollow commits are not expected. Use ",(0,r.yg)("inlineCode",{parentName:"td"},"BLOCK")," to block processing commits from going beyond the hollow ones. This fits the case where waiting for hollow commits to finish is acceptable. Use ",(0,r.yg)("inlineCode",{parentName:"td"},"USE_TRANSITION_TIME")," (experimental) to query commits in range by state transition time (completion time), instead of commit time (start time). Using this mode will result in ",(0,r.yg)("inlineCode",{parentName:"td"},"begin.instanttime")," and ",(0,r.yg)("inlineCode",{parentName:"td"},"end.instanttime")," using ",(0,r.yg)("inlineCode",{parentName:"td"},"stateTransitionTime"),"  instead of the instant's commit time.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INCREMENTAL_READ_HANDLE_HOLLOW_COMMIT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieschemaonreadenable"},"hoodie.schema.on.read.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enables support for Schema Evolution feature",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_EVOLUTION_ENABLED"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Write-Options"},"Write Options"),(0,r.yg)("p",null,"You can pass down any of the WriteClient level configs directly using ",(0,r.yg)("inlineCode",{parentName:"p"},"options()")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"option(k,v)")," methods."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'inputDF.write()\n.format("org.apache.hudi")\n.options(clientOpts) // any of the Hudi client opts can be passed in as well\n.option(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), "_row_key")\n.option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), "partition")\n.option(DataSourceWriteOptions.PRECOMBINE_FIELD_OPT_KEY(), "timestamp")\n.option(HoodieWriteConfig.TABLE_NAME, tableName)\n.mode(SaveMode.Append)\n.save(basePath);\n')),(0,r.yg)("p",null,"Options useful for writing tables via ",(0,r.yg)("inlineCode",{parentName:"p"},"write.format.option(...)")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Write-Options-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncmode"},"hoodie.datasource.hive_sync.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Mode to choose for Hive ops. Valid values are hms, jdbc and hiveql.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_MODE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritepartitionpathfield"},"hoodie.datasource.write.partitionpath.field")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Partition path field. Value to be used at the partitionPath component of HoodieKey. Actual value obtained by invoking .toString()",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITIONPATH_FIELD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriterecordkeyfield"},"hoodie.datasource.write.recordkey.field")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Record key field. Value to be used as the ",(0,r.yg)("inlineCode",{parentName:"td"},"recordKey")," component of ",(0,r.yg)("inlineCode",{parentName:"td"},"HoodieKey"),". Actual value will be obtained by invoking .toString() on the field value. Nested fields can be specified using the dot notation eg: ",(0,r.yg)("inlineCode",{parentName:"td"},"a.b.c"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORDKEY_FIELD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringasyncenabled"},"hoodie.clustering.async.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable running of clustering service, asynchronously as inserts happen on the table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ASYNC_CLUSTERING_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringinline"},"hoodie.clustering.inline")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Turn on inline clustering - clustering will be run after each write operation is complete",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INLINE_CLUSTERING_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncenable"},"hoodie.datasource.hive_sync.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, register/sync the table to Apache Hive metastore.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncjdbcurl"},"hoodie.datasource.hive_sync.jdbcurl")),(0,r.yg)("td",{parentName:"tr",align:null},"jdbc:hive2://localhost:10000"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive metastore url",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_URL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncmetastoreuris"},"hoodie.datasource.hive_sync.metastore.uris")),(0,r.yg)("td",{parentName:"tr",align:null},"thrift://localhost:9083"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive metastore url",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METASTORE_URIS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncenable"},"hoodie.datasource.meta.sync.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable Syncing the Hudi Table with an external meta store or data catalog.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritehive_style_partitioning"},"hoodie.datasource.write.hive_style_partitioning")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Flag to indicate whether to use Hive style partitioning. If set true, the names of partition folders follow ","<","partition_column_name",">","=","<","partition_value",">"," format. By default false (the names of partition folders are only partition values)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_STYLE_PARTITIONING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriteoperation"},"hoodie.datasource.write.operation")),(0,r.yg)("td",{parentName:"tr",align:null},"upsert"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to do upsert, insert or bulk_insert for the write operation. Use bulk_insert to load new data into a table, and there on use upsert/insert. bulk insert uses a disk based write path to scale to load large inputs without need to cache it.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: OPERATION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriteprecombinefield"},"hoodie.datasource.write.precombine.field")),(0,r.yg)("td",{parentName:"tr",align:null},"ts"),(0,r.yg)("td",{parentName:"tr",align:null},"Field used in preCombining before actual write. When two records have the same key value, we will pick the one with the largest value for the precombine field, determined by Object.compareTo(..)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PRECOMBINE_FIELD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritetabletype"},"hoodie.datasource.write.table.type")),(0,r.yg)("td",{parentName:"tr",align:null},"COPY_ON_WRITE"),(0,r.yg)("td",{parentName:"tr",align:null},"The table type for the underlying data, for this write. This can\u2019t change between writes.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TABLE_TYPE"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Write-Options-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncserde_properties"},"hoodie.datasource.hive_sync.serde_properties")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Serde properties to hive table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_TABLE_SERDE_PROPERTIES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synctable_properties"},"hoodie.datasource.hive_sync.table_properties")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Additional properties to store with table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_TABLE_PROPERTIES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourceoverwritemode"},"hoodie.datasource.overwrite.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls whether overwrite use dynamic or static mode, if not configured, respect spark.sql.sources.partitionOverwriteMode",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: OVERWRITE_MODE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritepartitionstodelete"},"hoodie.datasource.write.partitions.to.delete")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Comma separated list of partitions to delete. Allows use of wildcard *",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITIONS_TO_DELETE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritetablename"},"hoodie.datasource.write.table.name")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Table name for the datasource write. Also used to register the table into meta stores.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TABLE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcecompactionasyncenable"},"hoodie.datasource.compaction.async.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls whether async compaction should be turned on for MOR table writing.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ASYNC_COMPACT_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncassume_date_partitioning"},"hoodie.datasource.hive_sync.assume_date_partitioning")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Assume partitioning is yyyy/MM/dd",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_ASSUME_DATE_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncauto_create_database"},"hoodie.datasource.hive_sync.auto_create_database")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Auto create hive database if does not exists",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_AUTO_CREATE_DATABASE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbase_file_format"},"hoodie.datasource.hive_sync.base_file_format")),(0,r.yg)("td",{parentName:"tr",align:null},"PARQUET"),(0,r.yg)("td",{parentName:"tr",align:null},"Base file format for the sync.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_BASE_FILE_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbatch_num"},"hoodie.datasource.hive_sync.batch_num")),(0,r.yg)("td",{parentName:"tr",align:null},"1000"),(0,r.yg)("td",{parentName:"tr",align:null},"The number of partitions one batch when synchronous partitions to hive.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_BATCH_SYNC_PARTITION_NUM"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbucket_sync"},"hoodie.datasource.hive_sync.bucket_sync")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether sync hive metastore bucket specification when using bucket index.The specification is 'CLUSTERED BY (trace_id) SORTED BY (trace_id ASC) INTO 65536 BUCKETS'",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_BUCKET_SYNC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synccreate_managed_table"},"hoodie.datasource.hive_sync.create_managed_table")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to sync the table as managed table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_CREATE_MANAGED_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncdatabase"},"hoodie.datasource.hive_sync.database")),(0,r.yg)("td",{parentName:"tr",align:null},"default"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the destination database that we should sync the hudi table to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_DATABASE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncignore_exceptions"},"hoodie.datasource.hive_sync.ignore_exceptions")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Ignore exceptions when syncing with Hive.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_IGNORE_EXCEPTIONS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpartition_extractor_class"},"hoodie.datasource.hive_sync.partition_extractor_class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.hive.MultiPartKeysValueExtractor"),(0,r.yg)("td",{parentName:"tr",align:null},"Class which implements PartitionValueExtractor to extract the partition values, default 'org.apache.hudi.hive.MultiPartKeysValueExtractor'.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_PARTITION_EXTRACTOR_CLASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpartition_fields"},"hoodie.datasource.hive_sync.partition_fields")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Field in the table to use for determining hive partition columns.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_PARTITION_FIELDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpassword"},"hoodie.datasource.hive_sync.password")),(0,r.yg)("td",{parentName:"tr",align:null},"hive"),(0,r.yg)("td",{parentName:"tr",align:null},"hive password to use",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_PASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncskip_ro_suffix"},"hoodie.datasource.hive_sync.skip_ro_suffix")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Skip the _ro suffix for Read optimized table, when registering",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SKIP_RO_SUFFIX_FOR_READ_OPTIMIZED_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncsupport_timestamp"},"hoodie.datasource.hive_sync.support_timestamp")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"\u2018INT64\u2019 with original type TIMESTAMP_MICROS is converted to hive \u2018timestamp\u2019 type. Disabled by default for backward compatibility.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SUPPORT_TIMESTAMP_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncsync_as_datasource"},"hoodie.datasource.hive_sync.sync_as_datasource")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_AS_DATA_SOURCE_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncsync_comment"},"hoodie.datasource.hive_sync.sync_comment")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to sync the table column comments while syncing the table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_COMMENT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synctable"},"hoodie.datasource.hive_sync.table")),(0,r.yg)("td",{parentName:"tr",align:null},"unknown"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the destination table that we should sync the hudi table to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncuse_jdbc"},"hoodie.datasource.hive_sync.use_jdbc")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Use JDBC when hive synchronization is enabled",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_USE_JDBC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncuse_pre_apache_input_format"},"hoodie.datasource.hive_sync.use_pre_apache_input_format")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Flag to choose InputFormat under com.uber.hoodie package instead of org.apache.hudi package. Use this when you are in the process of migrating from com.uber.hoodie to org.apache.hudi. Stop using this after you migrated the table definition to org.apache.hudi input format",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_USE_PRE_APACHE_INPUT_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncusername"},"hoodie.datasource.hive_sync.username")),(0,r.yg)("td",{parentName:"tr",align:null},"hive"),(0,r.yg)("td",{parentName:"tr",align:null},"hive user name to use",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_USER"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourceinsertduppolicy"},"hoodie.datasource.insert.dup.policy")),(0,r.yg)("td",{parentName:"tr",align:null},"none"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("strong",{parentName:"td"},"Note")," This is only applicable to Spark SQL writing.",(0,r.yg)("br",null),'When operation type is set to "insert", users can optionally enforce a dedup policy. This policy will be employed  when records being ingested already exists in storage. Default policy is none and no action will be taken. Another option is to choose  "drop", on which matching records from incoming will be dropped and the rest will be ingested. Third option is "fail" which will fail the write operation when same records are re-ingested. In other words, a given record as deduced by the key generation policy can be ingested only once to the target table of interest.',(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INSERT_DUP_POLICY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemeta_syncconditionsync"},"hoodie.datasource.meta_sync.condition.sync")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, only sync on conditions like schema change or partition change.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_CONDITIONAL_SYNC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritecommitmetakeyprefix"},"hoodie.datasource.write.commitmeta.key.prefix")),(0,r.yg)("td",{parentName:"tr",align:null},"_"),(0,r.yg)("td",{parentName:"tr",align:null},"Option keys beginning with this prefix, are automatically added to the commit/deltacommit metadata. This is useful to store checkpointing information, in a consistent way with the hudi timeline",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMMIT_METADATA_KEYPREFIX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritedroppartitioncolumns"},"hoodie.datasource.write.drop.partition.columns")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, will not write the partition columns into hudi. By default, false.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DROP_PARTITION_COLUMNS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriteinsertdropduplicates"},"hoodie.datasource.write.insert.drop.duplicates")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If set to true, records from the incoming dataframe will not overwrite existing records with the same key during the write operation.  ",(0,r.yg)("br",null)," ",(0,r.yg)("strong",{parentName:"td"},"Note")," Just for Insert operation in Spark SQL writing since 0.14.0, users can switch to the config ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.datasource.insert.dup.policy")," instead for a simplified duplicate handling experience. The new config will be incorporated into all other writing flows and this config will be fully deprecated in future releases.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INSERT_DROP_DUPS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritekeygeneratorclass"},"hoodie.datasource.write.keygenerator.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.keygen.SimpleKeyGenerator"),(0,r.yg)("td",{parentName:"tr",align:null},"Key generator class, that implements ",(0,r.yg)("inlineCode",{parentName:"td"},"org.apache.hudi.keygen.KeyGenerator"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KEYGENERATOR_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritekeygeneratorconsistentlogicaltimestampenabled"},"hoodie.datasource.write.keygenerator.consistent.logical.timestamp.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, consistent value will be generated for a logical timestamp type column, like timestamp-millis and timestamp-micros, irrespective of whether row-writer is enabled. Disabled by default so as not to break the pipeline that deploy either fully row-writer path or non row-writer path. For example, if it is kept disabled then record key of timestamp type with value ",(0,r.yg)("inlineCode",{parentName:"td"},"2016-12-29 09:54:00")," will be written as timestamp ",(0,r.yg)("inlineCode",{parentName:"td"},"2016-12-29 09:54:00.0")," in row-writer path, while it will be written as long value ",(0,r.yg)("inlineCode",{parentName:"td"},"1483023240000000")," in non row-writer path. If enabled, then the timestamp value will be written in both the cases.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KEYGENERATOR_CONSISTENT_LOGICAL_TIMESTAMP_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritenewcolumnsnullable"},"hoodie.datasource.write.new.columns.nullable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When a non-nullable column is added to datasource during a write operation, the write  operation will fail schema compatibility check. Set this option to true will make the newly added  column nullable to successfully complete the write operation.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAKE_NEW_COLUMNS_NULLABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritepartitionpathurlencode"},"hoodie.datasource.write.partitionpath.urlencode")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Should we url encode the partition path value, before creating the folder structure.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: URL_ENCODE_PARTITIONING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritepayloadclass"},"hoodie.datasource.write.payload.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.model.OverwriteWithLatestAvroPayload"),(0,r.yg)("td",{parentName:"tr",align:null},"Payload class used. Override this, if you like to roll your own merge logic, when upserting/inserting. This will render any value set for PRECOMBINE_FIELD_OPT_VAL in-effective",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PAYLOAD_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritereconcileschema"},"hoodie.datasource.write.reconcile.schema")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"This config controls how writer's schema will be selected based on the incoming batch's schema as well as existing table's one. When schema reconciliation is DISABLED, incoming batch's schema will be picked as a writer-schema (therefore updating table's schema). When schema reconciliation is ENABLED, writer-schema will be picked such that table's schema (after txn) is either kept the same or extended, meaning that we'll always prefer the schema that either adds new columns or stays the same. This enables us, to always extend the table's schema during evolution and never lose the data (when, for ex, existing column is being dropped in a new batch)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECONCILE_SCHEMA"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriterecordmergerimpls"},"hoodie.datasource.write.record.merger.impls")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.model.HoodieAvroRecordMerger"),(0,r.yg)("td",{parentName:"tr",align:null},"List of HoodieMerger implementations constituting Hudi's merging strategy -- based on the engine used. These merger impls will filter by hoodie.datasource.write.record.merger.strategy Hudi will pick most efficient implementation to perform merging/combining of the records (during update, reading MOR table, etc)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_MERGER_IMPLS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriterecordmergerstrategy"},"hoodie.datasource.write.record.merger.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"eeb8d96f-b1e4-49fd-bbf8-28ac514178e5"),(0,r.yg)("td",{parentName:"tr",align:null},"Id of merger strategy. Hudi will pick HoodieRecordMerger implementations in hoodie.datasource.write.record.merger.impls which has the same merger strategy id",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_MERGER_STRATEGY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriterowwriterenable"},"hoodie.datasource.write.row.writer.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, will perform write operations directly using the spark native ",(0,r.yg)("inlineCode",{parentName:"td"},"Row")," representation, avoiding any additional conversion costs.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_ROW_WRITER"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritestreamingcheckpointidentifier"},"hoodie.datasource.write.streaming.checkpoint.identifier")),(0,r.yg)("td",{parentName:"tr",align:null},"default_single_writer"),(0,r.yg)("td",{parentName:"tr",align:null},"A stream identifier used for HUDI to fetch the right checkpoint(",(0,r.yg)("inlineCode",{parentName:"td"},"batch id")," to be more specific) corresponding this writer. Please note that keep the identifier an unique value for different writer if under multi-writer scenario. If the value is not set, will only keep the checkpoint info in the memory. This could introduce the potential issue that the job is restart(",(0,r.yg)("inlineCode",{parentName:"td"},"batch id")," is lost) while spark checkpoint write fails, causing spark will retry and rewrite the data.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: STREAMING_CHECKPOINT_IDENTIFIER"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritestreamingdisablecompaction"},"hoodie.datasource.write.streaming.disable.compaction")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"By default for MOR table, async compaction is enabled with spark streaming sink. By setting this config to true, we can disable it and the expectation is that, users will schedule and execute compaction in a different process/job altogether. Some users may wish to run it separately to manage resources across table services and regular ingestion pipeline and so this could be preferred on such cases.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: STREAMING_DISABLE_COMPACTION"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritestreamingignorefailedbatch"},"hoodie.datasource.write.streaming.ignore.failed.batch")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Config to indicate whether to ignore any non exception error (e.g. writestatus error) within a streaming microbatch. Turning this on, could hide the write status errors while the spark checkpoint moves ahead.So, would recommend users to use this with caution.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: STREAMING_IGNORE_FAILED_BATCH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritestreamingretrycount"},"hoodie.datasource.write.streaming.retry.count")),(0,r.yg)("td",{parentName:"tr",align:null},"3"),(0,r.yg)("td",{parentName:"tr",align:null},"Config to indicate how many times streaming job should retry for a failed micro batch.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: STREAMING_RETRY_CNT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritestreamingretryintervalms"},"hoodie.datasource.write.streaming.retry.interval.ms")),(0,r.yg)("td",{parentName:"tr",align:null},"2000"),(0,r.yg)("td",{parentName:"tr",align:null},"Config to indicate how long (by millisecond) before a retry should issued for failed microbatch",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: STREAMING_RETRY_INTERVAL_MS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncclienttoolclass"},"hoodie.meta.sync.client.tool.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.hive.HiveSyncTool"),(0,r.yg)("td",{parentName:"tr",align:null},"Sync tool class name used to sync to metastore. Defaults to Hive.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_CLIENT_TOOL_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiesparksqlinsertintooperation"},"hoodie.spark.sql.insert.into.operation")),(0,r.yg)("td",{parentName:"tr",align:null},"insert"),(0,r.yg)("td",{parentName:"tr",align:null},'Sql write operation to use with INSERT_INTO spark sql command. This comes with 3 possible values, bulk_insert, insert and upsert. bulk_insert is generally meant for initial loads and is known to be performant compared to insert. But bulk_insert may not do small file management. If you prefer hudi to automatically manage small files, then you can go with "insert". There is no precombine (if there are duplicates within the same batch being ingested, same dups will be ingested) with bulk_insert and insert and there is no index look up as well. If you may use INSERT_INTO for mutable dataset, then you may have to set this config value to "upsert". With upsert, you will get both precombine and updates to existing records on storage is also honored. If not, you may see duplicates. ',(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPARK_SQL_INSERT_INTO_OPERATION"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiesparksqloptimizedwritesenable"},"hoodie.spark.sql.optimized.writes.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls whether spark sql prepped update, delete, and merge are enabled.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPARK_SQL_OPTIMIZED_WRITES"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiesqlbulkinsertenable"},"hoodie.sql.bulk.insert.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, the sql insert statement will use bulk insert. This config is deprecated as of 0.14.0. Please use hoodie.spark.sql.insert.into.operation instead.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SQL_ENABLE_BULK_INSERT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiesqlinsertmode"},"hoodie.sql.insert.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"upsert"),(0,r.yg)("td",{parentName:"tr",align:null},"Insert mode when insert data to pk-table. The optional modes are: upsert, strict and non-strict.For upsert mode, insert statement do the upsert operation for the pk-table which will update the duplicate record.For strict mode, insert statement will keep the primary key uniqueness constraint which do not allow duplicate record.While for non-strict mode, hudi just do the insert operation for the pk-table. This config is deprecated as of 0.14.0. Please use hoodie.spark.sql.insert.into.operation and hoodie.datasource.insert.dup.policy as you see fit.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SQL_INSERT_MODE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcekafkavaluedeserializerclass"},"hoodie.streamer.source.kafka.value.deserializer.class")),(0,r.yg)("td",{parentName:"tr",align:null},"io.confluent.kafka.serializers.KafkaAvroDeserializer"),(0,r.yg)("td",{parentName:"tr",align:null},"This class is used by kafka client to deserialize the records",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KAFKA_AVRO_VALUE_DESERIALIZER_CLASS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.9.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritesetnullformissingcolumns"},"hoodie.write.set.null.for.missing.columns")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When a non-nullable column is missing from incoming batch during a write operation, the write  operation will fail schema compatibility check. Set this option to true will make the missing  column be filled with null values to successfully complete the write operation.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SET_NULL_FOR_MISSING_COLUMNS"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"PreCommit-Validator-Configurations"},"PreCommit Validator Configurations"),(0,r.yg)("p",null,"The following set of configurations help validate new data before commits."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#PreCommit-Validator-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieprecommitvalidators"},"hoodie.precommit.validators")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Comma separated list of class names that can be invoked to validate commit",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: VALIDATOR_CLASS_NAMES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieprecommitvalidatorsequalitysqlqueries"},"hoodie.precommit.validators.equality.sql.queries")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Spark SQL queries to run on table before committing new data to validate state before and after commit. Multiple queries separated by ';' delimiter are supported. Example: \"select count(*) from \\","<","TABLE_NAME\\",">"," Note \\","<","TABLE_NAME\\",">"," is replaced by table state before and after commit.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EQUALITY_SQL_QUERIES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieprecommitvalidatorsinequalitysqlqueries"},"hoodie.precommit.validators.inequality.sql.queries")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Spark SQL queries to run on table before committing new data to validate state before and after commit.Multiple queries separated by ';' delimiter are supported.Example query: 'select count(*) from \\","<","TABLE_NAME\\",">"," where col=null'Note \\","<","TABLE_NAME\\",">"," variable is expected to be present in query.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INEQUALITY_SQL_QUERIES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieprecommitvalidatorssinglevaluesqlqueries"},"hoodie.precommit.validators.single.value.sql.queries")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Spark SQL queries to run on table before committing new data to validate state after commit.Multiple queries separated by ';' delimiter are supported.Expected result is included as part of query separated by '#'. Example query: 'query1#result1:query2#result2'Note \\","<","TABLE_NAME\\",">"," variable is expected to be present in query.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SINGLE_VALUE_SQL_QUERIES"))))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"FLINK_SQL"},"Flink Sql Configs"),(0,r.yg)("p",null,"These configs control the Hudi Flink SQL source/sink connectors, providing ability to define record keys, pick out the write operation, specify how to merge records, enable/disable asynchronous compaction or choosing query type to read."),(0,r.yg)("h3",{id:"Flink-Options"},"Flink Options"),(0,r.yg)("p",null,"Flink jobs using the SQL can be configured through the options in WITH clause. The actual datasource level configs are listed below."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Flink-Options-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatabasename"},"hoodie.database.name")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Database name to register to Hive metastore",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DATABASE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodietablename"},"hoodie.table.name")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Table name to register to Hive metastore",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TABLE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#path"},"path")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Base path for the target hoodie table. The path would be created if it does not exist, otherwise a Hoodie table expects to be initialized successfully",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#readend-commit"},"read.end-commit")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"End commit instant for reading, the commit time format should be 'yyyyMMddHHmmss'",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: READ_END_COMMIT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#readstart-commit"},"read.start-commit")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Start commit instant for reading, the commit time format should be 'yyyyMMddHHmmss', by default reading from the latest instant for streaming read",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: READ_START_COMMIT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#archivemax_commits"},"archive.max_commits")),(0,r.yg)("td",{parentName:"tr",align:null},"50"),(0,r.yg)("td",{parentName:"tr",align:null},"Max number of commits to keep before archiving older commits into a sequential log, default 50",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ARCHIVE_MAX_COMMITS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#archivemin_commits"},"archive.min_commits")),(0,r.yg)("td",{parentName:"tr",align:null},"40"),(0,r.yg)("td",{parentName:"tr",align:null},"Min number of commits to keep before archiving older commits into a sequential log, default 40",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ARCHIVE_MIN_COMMITS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#cdcenabled"},"cdc.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When enable, persist the change data if necessary, and can be queried as a CDC query mode",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CDC_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#cdcsupplementalloggingmode"},"cdc.supplemental.logging.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"DATA_BEFORE_AFTER"),(0,r.yg)("td",{parentName:"tr",align:null},"Setting 'op_key_only' persists the 'op' and the record key only, setting 'data_before' persists the additional 'before' image, and setting 'data_before_after' persists the additional 'before' and 'after' images.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SUPPLEMENTAL_LOGGING_MODE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#changelogenabled"},"changelog.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to keep all the intermediate changes, we try to keep all the changes of a record when enabled: 1). The sink accept the UPDATE_BEFORE message; 2). The source try to emit every changes of a record. The semantics is best effort because the compaction job would finally merge all changes of a record into one.  default false to have UPSERT semantics",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CHANGELOG_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#cleanasyncenabled"},"clean.async.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to cleanup the old commits immediately on new commits, enabled by default",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEAN_ASYNC_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#cleanretain_commits"},"clean.retain_commits")),(0,r.yg)("td",{parentName:"tr",align:null},"30"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of commits to retain. So data will be retained for num_of_commits * time_between_commits (scheduled). This also directly translates into how much you can incrementally pull on this table, default 30",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEAN_RETAIN_COMMITS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringasyncenabled"},"clustering.async.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Async Clustering, default false",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_ASYNC_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringplanstrategysmallfilelimit"},"clustering.plan.strategy.small.file.limit")),(0,r.yg)("td",{parentName:"tr",align:null},"600"),(0,r.yg)("td",{parentName:"tr",align:null},"Files smaller than the size specified here are candidates for clustering, default 600 MB",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_PLAN_STRATEGY_SMALL_FILE_LIMIT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringplanstrategytargetfilemaxbytes"},"clustering.plan.strategy.target.file.max.bytes")),(0,r.yg)("td",{parentName:"tr",align:null},"1073741824"),(0,r.yg)("td",{parentName:"tr",align:null},"Each group can produce 'N' (CLUSTERING_MAX_GROUP_SIZE/CLUSTERING_TARGET_FILE_SIZE) output file groups, default 1 GB",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_PLAN_STRATEGY_TARGET_FILE_MAX_BYTES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#compactionasyncenabled"},"compaction.async.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Async Compaction, enabled by default for MOR",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_ASYNC_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#compactiondelta_commits"},"compaction.delta_commits")),(0,r.yg)("td",{parentName:"tr",align:null},"5"),(0,r.yg)("td",{parentName:"tr",align:null},"Max delta commits needed to trigger compaction, default 5 commits",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_DELTA_COMMITS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncenabled"},"hive_sync.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Asynchronously sync Hive meta to HMS, default false",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncjdbc_url"},"hive_sync.jdbc_url")),(0,r.yg)("td",{parentName:"tr",align:null},"jdbc:hive2://localhost:10000"),(0,r.yg)("td",{parentName:"tr",align:null},"Jdbc URL for hive sync, default 'jdbc:hive2://localhost:10000'",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_JDBC_URL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncmetastoreuris"},"hive_sync.metastore.uris")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Metastore uris for hive sync, default ''",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_METASTORE_URIS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncmode"},"hive_sync.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"HMS"),(0,r.yg)("td",{parentName:"tr",align:null},"Mode to choose for Hive ops. Valid values are hms, jdbc and hiveql, default 'hms'",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_MODE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcequerytype"},"hoodie.datasource.query.type")),(0,r.yg)("td",{parentName:"tr",align:null},"snapshot"),(0,r.yg)("td",{parentName:"tr",align:null},"Decides how data files need to be read, in 1) Snapshot mode (obtain latest view, based on row ","&"," columnar data); 2) incremental mode (new data since an instantTime); 3) Read Optimized mode (obtain latest view, based on columnar data) .Default: snapshot",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: QUERY_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritehive_style_partitioning"},"hoodie.datasource.write.hive_style_partitioning")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to use Hive style partitioning. If set true, the names of partition folders follow ","<","partition_column_name",">","=","<","partition_value",">"," format. By default false (the names of partition folders are only partition values)",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_STYLE_PARTITIONING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritepartitionpathfield"},"hoodie.datasource.write.partitionpath.field")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Partition path field. Value to be used at the ",(0,r.yg)("inlineCode",{parentName:"td"},"partitionPath")," component of ",(0,r.yg)("inlineCode",{parentName:"td"},"HoodieKey"),". Actual value obtained by invoking .toString(), default ''",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITION_PATH_FIELD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriterecordkeyfield"},"hoodie.datasource.write.recordkey.field")),(0,r.yg)("td",{parentName:"tr",align:null},"uuid"),(0,r.yg)("td",{parentName:"tr",align:null},"Record key field. Value to be used as the ",(0,r.yg)("inlineCode",{parentName:"td"},"recordKey")," component of ",(0,r.yg)("inlineCode",{parentName:"td"},"HoodieKey"),". Actual value will be obtained by invoking .toString() on the field value. Nested fields can be specified using the dot notation eg: ",(0,r.yg)("inlineCode",{parentName:"td"},"a.b.c"),(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_KEY_FIELD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#indextype"},"index.type")),(0,r.yg)("td",{parentName:"tr",align:null},"FLINK_STATE"),(0,r.yg)("td",{parentName:"tr",align:null},"Index type of Flink write job, default is using state backed index.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INDEX_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#metadatacompactiondelta_commits"},"metadata.compaction.delta_commits")),(0,r.yg)("td",{parentName:"tr",align:null},"10"),(0,r.yg)("td",{parentName:"tr",align:null},"Max delta commits for metadata table to trigger compaction, default 10",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METADATA_COMPACTION_DELTA_COMMITS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#metadataenabled"},"metadata.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable the internal metadata table which serves table metadata like level file listings, default disabled",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METADATA_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#precombinefield"},"precombine.field")),(0,r.yg)("td",{parentName:"tr",align:null},"ts"),(0,r.yg)("td",{parentName:"tr",align:null},"Field used in preCombining before actual write. When two records have the same key value, we will pick the one with the largest value for the precombine field, determined by Object.compareTo(..)",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PRECOMBINE_FIELD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#readstreamingenabled"},"read.streaming.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to read as streaming source, default false",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: READ_AS_STREAMING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#tabletype"},"table.type")),(0,r.yg)("td",{parentName:"tr",align:null},"COPY_ON_WRITE"),(0,r.yg)("td",{parentName:"tr",align:null},"Type of table to write. COPY_ON_WRITE (or) MERGE_ON_READ",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TABLE_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writeoperation"},"write.operation")),(0,r.yg)("td",{parentName:"tr",align:null},"upsert"),(0,r.yg)("td",{parentName:"tr",align:null},"The write operation, that this write should do",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: OPERATION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writeparquetmaxfilesize"},"write.parquet.max.file.size")),(0,r.yg)("td",{parentName:"tr",align:null},"120"),(0,r.yg)("td",{parentName:"tr",align:null},"Target size for parquet files produced by Hudi write phases. For DFS, this needs to be aligned with the underlying filesystem block size for optimal performance.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_PARQUET_MAX_FILE_SIZE"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Flink-Options-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringtasks"},"clustering.tasks")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism of tasks that do actual clustering, default same as the write task parallelism",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_TASKS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#compactiontasks"},"compaction.tasks")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism of tasks that do actual compaction, default same as the write task parallelism",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_TASKS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncconfdir"},"hive_sync.conf.dir")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The hive configuration directory, where the hive-site.xml lies in, the file should be put on the client machine",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_CONF_DIR"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncserde_properties"},"hive_sync.serde_properties")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Serde properties to hive table, the data format is k1=v1 k2=v2",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_TABLE_SERDE_PROPERTIES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_synctable_properties"},"hive_sync.table_properties")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Additional properties to store with table, the data format is k1=v1 k2=v2",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_TABLE_PROPERTIES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritekeygeneratorclass"},"hoodie.datasource.write.keygenerator.class")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Key generator class, that implements will extract the key out of incoming record",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KEYGEN_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#readtasks"},"read.tasks")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism of tasks that do actual read, default is the parallelism of the execution environment",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: READ_TASKS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#sourceavro-schema"},"source.avro-schema")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Source avro schema string, the parsed schema is used for deserialization",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_AVRO_SCHEMA"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#sourceavro-schemapath"},"source.avro-schema.path")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Source avro schema file path, the parsed schema is used for deserialization",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_AVRO_SCHEMA_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writebucket_assigntasks"},"write.bucket_assign.tasks")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism of tasks that do bucket assign, default same as the write task parallelism",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BUCKET_ASSIGN_TASKS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writeindex_bootstraptasks"},"write.index_bootstrap.tasks")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism of tasks that do index bootstrap, default same as the write task parallelism",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INDEX_BOOTSTRAP_TASKS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writepartitionformat"},"write.partition.format")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Partition path format, only valid when 'write.datetime.partitioning' is true, default is: 1) 'yyyyMMddHH' for timestamp(3) WITHOUT TIME ZONE, LONG, FLOAT, DOUBLE, DECIMAL; 2) 'yyyyMMdd' for DATE and INT.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITION_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writetasks"},"write.tasks")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism of tasks that do actual write, default is the parallelism of the execution environment",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_TASKS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#cleanpolicy"},"clean.policy")),(0,r.yg)("td",{parentName:"tr",align:null},"KEEP_LATEST_COMMITS"),(0,r.yg)("td",{parentName:"tr",align:null},"Clean policy to manage the Hudi table. Available option: KEEP_LATEST_COMMITS, KEEP_LATEST_FILE_VERSIONS, KEEP_LATEST_BY_HOURS.Default is KEEP_LATEST_COMMITS.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEAN_POLICY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#cleanretain_file_versions"},"clean.retain_file_versions")),(0,r.yg)("td",{parentName:"tr",align:null},"5"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of file versions to retain. default 5",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEAN_RETAIN_FILE_VERSIONS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#cleanretain_hours"},"clean.retain_hours")),(0,r.yg)("td",{parentName:"tr",align:null},"24"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of hours for which commits need to be retained. This config provides a more flexible option ascompared to number of commits retained for cleaning service. Setting this property ensures all the files, but the latest in a file group, corresponding to commits with commit times older than the configured number of hours to be retained are cleaned.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEAN_RETAIN_HOURS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringdelta_commits"},"clustering.delta_commits")),(0,r.yg)("td",{parentName:"tr",align:null},"4"),(0,r.yg)("td",{parentName:"tr",align:null},"Max delta commits needed to trigger clustering, default 4 commits",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_DELTA_COMMITS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringplanpartitionfiltermode"},"clustering.plan.partition.filter.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"NONE"),(0,r.yg)("td",{parentName:"tr",align:null},"Partition filter mode used in the creation of clustering plan. Available values are - NONE: do not filter table partition and thus the clustering plan will include all partitions that have clustering candidate.RECENT_DAYS: keep a continuous range of partitions, worked together with configs 'clustering.plan.strategy.daybased.lookback.partitions' and 'clustering.plan.strategy.daybased.skipfromlatest.partitions.SELECTED_PARTITIONS: keep partitions that are in the specified range ","['clustering.plan.strategy.cluster.begin.partition', 'clustering.plan.strategy.cluster.end.partition']",".DAY_ROLLING: clustering partitions on a rolling basis by the hour to avoid clustering all partitions each time, which strategy sorts the partitions asc and chooses the partition of which index is divided by 24 and the remainder is equal to the current hour.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_PLAN_PARTITION_FILTER_MODE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringplanstrategyclass"},"clustering.plan.strategy.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.client.clustering.plan.strategy.FlinkSizeBasedClusteringPlanStrategy"),(0,r.yg)("td",{parentName:"tr",align:null},"Config to provide a strategy class (subclass of ClusteringPlanStrategy) to create clustering plan i.e select what file groups are being clustered. Default strategy, looks at the last N (determined by clustering.plan.strategy.daybased.lookback.partitions) day based partitions picks the small file slices within those partitions.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_PLAN_STRATEGY_CLASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringplanstrategyclusterbeginpartition"},"clustering.plan.strategy.cluster.begin.partition")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Begin partition used to filter partition (inclusive)",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_PLAN_STRATEGY_CLUSTER_BEGIN_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringplanstrategyclusterendpartition"},"clustering.plan.strategy.cluster.end.partition")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"End partition used to filter partition (inclusive)",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_PLAN_STRATEGY_CLUSTER_END_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringplanstrategydaybasedlookbackpartitions"},"clustering.plan.strategy.daybased.lookback.partitions")),(0,r.yg)("td",{parentName:"tr",align:null},"2"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of partitions to list to create ClusteringPlan, default is 2",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_TARGET_PARTITIONS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringplanstrategydaybasedskipfromlatestpartitions"},"clustering.plan.strategy.daybased.skipfromlatest.partitions")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of partitions to skip from latest when choosing partitions to create ClusteringPlan",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_PLAN_STRATEGY_SKIP_PARTITIONS_FROM_LATEST"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringplanstrategymaxnumgroups"},"clustering.plan.strategy.max.num.groups")),(0,r.yg)("td",{parentName:"tr",align:null},"30"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of groups to create as part of ClusteringPlan. Increasing groups will increase parallelism, default is 30",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_MAX_NUM_GROUPS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringplanstrategypartitionregexpattern"},"clustering.plan.strategy.partition.regex.pattern")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Filter clustering partitions that matched regex pattern",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_PLAN_STRATEGY_PARTITION_REGEX_PATTERN"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringplanstrategypartitionselected"},"clustering.plan.strategy.partition.selected")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Partitions to run clustering",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_PLAN_STRATEGY_PARTITION_SELECTED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringplanstrategysortcolumns"},"clustering.plan.strategy.sort.columns")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Columns to sort the data by when clustering",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_SORT_COLUMNS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#clusteringscheduleenabled"},"clustering.schedule.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Schedule the cluster plan, default false",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_SCHEDULE_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#compactiondelta_seconds"},"compaction.delta_seconds")),(0,r.yg)("td",{parentName:"tr",align:null},"3600"),(0,r.yg)("td",{parentName:"tr",align:null},"Max delta seconds time needed to trigger compaction, default 1 hour",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_DELTA_SECONDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#compactionmax_memory"},"compaction.max_memory")),(0,r.yg)("td",{parentName:"tr",align:null},"100"),(0,r.yg)("td",{parentName:"tr",align:null},"Max memory in MB for compaction spillable map, default 100MB",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_MAX_MEMORY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#compactionscheduleenabled"},"compaction.schedule.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Schedule the compaction plan, enabled by default for MOR",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_SCHEDULE_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#compactiontarget_io"},"compaction.target_io")),(0,r.yg)("td",{parentName:"tr",align:null},"512000"),(0,r.yg)("td",{parentName:"tr",align:null},"Target IO in MB for per compaction (both read and write), default 500 GB",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_TARGET_IO"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#compactiontimeoutseconds"},"compaction.timeout.seconds")),(0,r.yg)("td",{parentName:"tr",align:null},"1200"),(0,r.yg)("td",{parentName:"tr",align:null},"Max timeout time in seconds for online compaction to rollback, default 20 minutes",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_TIMEOUT_SECONDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#compactiontriggerstrategy"},"compaction.trigger.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"num_commits"),(0,r.yg)("td",{parentName:"tr",align:null},"Strategy to trigger compaction, options are 'num_commits': trigger compaction when there are at least N delta commits after last completed compaction; 'num_commits_after_last_request': trigger compaction when there are at least N delta commits after last completed/requested compaction; 'time_elapsed': trigger compaction when time elapsed ",">"," N seconds since last compaction; 'num_and_time': trigger compaction when both NUM_COMMITS and TIME_ELAPSED are satisfied; 'num_or_time': trigger compaction when NUM_COMMITS or TIME_ELAPSED is satisfied. Default is 'num_commits'",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_TRIGGER_STRATEGY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncassume_date_partitioning"},"hive_sync.assume_date_partitioning")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Assume partitioning is yyyy/mm/dd, default false",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_ASSUME_DATE_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncauto_create_db"},"hive_sync.auto_create_db")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Auto create hive database if it does not exists, default true",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_AUTO_CREATE_DB"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncdb"},"hive_sync.db")),(0,r.yg)("td",{parentName:"tr",align:null},"default"),(0,r.yg)("td",{parentName:"tr",align:null},"Database name for hive sync, default 'default'",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_DB"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncfile_format"},"hive_sync.file_format")),(0,r.yg)("td",{parentName:"tr",align:null},"PARQUET"),(0,r.yg)("td",{parentName:"tr",align:null},"File format for hive sync, default 'PARQUET'",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_FILE_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncignore_exceptions"},"hive_sync.ignore_exceptions")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Ignore exceptions during hive synchronization, default false",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_IGNORE_EXCEPTIONS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncpartition_extractor_class"},"hive_sync.partition_extractor_class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.hive.MultiPartKeysValueExtractor"),(0,r.yg)("td",{parentName:"tr",align:null},"Tool to extract the partition value from HDFS path, default 'MultiPartKeysValueExtractor'",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_PARTITION_EXTRACTOR_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncpartition_fields"},"hive_sync.partition_fields")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Partition fields for hive sync, default ''",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_PARTITION_FIELDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncpassword"},"hive_sync.password")),(0,r.yg)("td",{parentName:"tr",align:null},"hive"),(0,r.yg)("td",{parentName:"tr",align:null},"Password for hive sync, default 'hive'",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_PASSWORD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncskip_ro_suffix"},"hive_sync.skip_ro_suffix")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Skip the _ro suffix for Read optimized table when registering, default false",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_SKIP_RO_SUFFIX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncsupport_timestamp"},"hive_sync.support_timestamp")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"INT64 with original type TIMESTAMP_MICROS is converted to hive timestamp type. Disabled by default for backward compatibility.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_SUPPORT_TIMESTAMP"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_synctable"},"hive_sync.table")),(0,r.yg)("td",{parentName:"tr",align:null},"unknown"),(0,r.yg)("td",{parentName:"tr",align:null},"Table name for hive sync, default 'unknown'",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_synctablestrategy"},"hive_sync.table.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"ALL"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive table synchronization strategy. Available option: RO, RT, ALL.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_TABLE_STRATEGY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncuse_jdbc"},"hive_sync.use_jdbc")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Use JDBC when hive synchronization is enabled, default true",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_USE_JDBC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hive_syncusername"},"hive_sync.username")),(0,r.yg)("td",{parentName:"tr",align:null},"hive"),(0,r.yg)("td",{parentName:"tr",align:null},"Username for hive sync, default 'hive'",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_USERNAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebucketindexhashfield"},"hoodie.bucket.index.hash.field")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Index key field. Value to be used as hashing to find the bucket ID. Should be a subset of or equal to the recordKey fields. Actual value will be obtained by invoking .toString() on the field value. Nested fields can be specified using the dot notation eg: ",(0,r.yg)("inlineCode",{parentName:"td"},"a.b.c"),(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INDEX_KEY_FIELD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebucketindexnumbuckets"},"hoodie.bucket.index.num.buckets")),(0,r.yg)("td",{parentName:"tr",align:null},"4"),(0,r.yg)("td",{parentName:"tr",align:null},"Hudi bucket number per partition. Only affected if using Hudi bucket index.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BUCKET_INDEX_NUM_BUCKETS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemergetype"},"hoodie.datasource.merge.type")),(0,r.yg)("td",{parentName:"tr",align:null},"payload_combine"),(0,r.yg)("td",{parentName:"tr",align:null},"For Snapshot query on merge on read table. Use this key to define how the payloads are merged, in 1) skip_merge: read the base file records plus the log file records; 2) payload_combine: read the base file records first, for each record in base file, checks whether the key is in the    log file records(combines the two records with same key for base and log file records), then read the left log file records",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MERGE_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritekeygeneratortype"},"hoodie.datasource.write.keygenerator.type")),(0,r.yg)("td",{parentName:"tr",align:null},"SIMPLE"),(0,r.yg)("td",{parentName:"tr",align:null},"Key generator type, that implements will extract the key out of incoming record. ",(0,r.yg)("strong",{parentName:"td"},"Note")," This is being actively worked on. Please use ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.datasource.write.keygenerator.class")," instead.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KEYGEN_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritepartitionpathurlencode"},"hoodie.datasource.write.partitionpath.urlencode")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to encode the partition path url, default false",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: URL_ENCODE_PARTITIONING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexbucketengine"},"hoodie.index.bucket.engine")),(0,r.yg)("td",{parentName:"tr",align:null},"SIMPLE"),(0,r.yg)("td",{parentName:"tr",align:null},"Type of bucket index engine. Available options: [SIMPLE")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#indexbootstrapenabled"},"index.bootstrap.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to bootstrap the index state from existing hoodie table, default false",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INDEX_BOOTSTRAP_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#indexglobalenabled"},"index.global.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to update index for the old partition path if same key record with different partition path came in, default true",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INDEX_GLOBAL_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#indexpartitionregex"},"index.partition.regex")),(0,r.yg)("td",{parentName:"tr",align:null},".*"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to load partitions in state if partition path matching\uff0c default ",(0,r.yg)("inlineCode",{parentName:"td"},"*"),(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INDEX_PARTITION_REGEX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#indexstatettl"},"index.state.ttl")),(0,r.yg)("td",{parentName:"tr",align:null},"0.0"),(0,r.yg)("td",{parentName:"tr",align:null},"Index state ttl in days, default stores the index permanently",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INDEX_STATE_TTL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#partitiondefault_name"},"partition.default_name")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("strong",{parentName:"td"},"HIVE_DEFAULT_PARTITION")),(0,r.yg)("td",{parentName:"tr",align:null},"The default partition name in case the dynamic partition column value is null/empty string",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITION_DEFAULT_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#payloadclass"},"payload.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.model.EventTimeAvroPayload"),(0,r.yg)("td",{parentName:"tr",align:null},"Payload class used. Override this, if you like to roll your own merge logic, when upserting/inserting. This will render any value set for the option in-effective",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PAYLOAD_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#readdataskippingenabled"},"read.data.skipping.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enables data-skipping allowing queries to leverage indexes to reduce the search space byskipping over files",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: READ_DATA_SKIPPING_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#readstreamingcheck-interval"},"read.streaming.check-interval")),(0,r.yg)("td",{parentName:"tr",align:null},"60"),(0,r.yg)("td",{parentName:"tr",align:null},"Check interval for streaming read of SECOND, default 1 minute",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: READ_STREAMING_CHECK_INTERVAL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#readstreamingskip_clustering"},"read.streaming.skip_clustering")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to skip clustering instants to avoid reading base files of clustering operations for streaming read to improve read performance.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: READ_STREAMING_SKIP_CLUSTERING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#readstreamingskip_compaction"},"read.streaming.skip_compaction")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to skip compaction instants and avoid reading compacted base files for streaming read to improve read performance. This option can be used to avoid reading duplicates when changelog mode is enabled, it is a solution to keep data integrity ",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: READ_STREAMING_SKIP_COMPACT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#readutc-timezone"},"read.utc-timezone")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Use UTC timezone or local timezone to the conversion between epoch time and LocalDateTime. Hive 0.x/1.x/2.x use local timezone. But Hive 3.x use UTC timezone, by default true",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: UTC_TIMEZONE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#recordmergerimpls"},"record.merger.impls")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.model.HoodieAvroRecordMerger"),(0,r.yg)("td",{parentName:"tr",align:null},"List of HoodieMerger implementations constituting Hudi's merging strategy -- based on the engine used. These merger impls will filter by record.merger.strategy. Hudi will pick most efficient implementation to perform merging/combining of the records (during update, reading MOR table, etc)",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_MERGER_IMPLS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#recordmergerstrategy"},"record.merger.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"eeb8d96f-b1e4-49fd-bbf8-28ac514178e5"),(0,r.yg)("td",{parentName:"tr",align:null},"Id of merger strategy. Hudi will pick HoodieRecordMerger implementations in record.merger.impls which has the same merger strategy id",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_MERGER_STRATEGY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writebatchsize"},"write.batch.size")),(0,r.yg)("td",{parentName:"tr",align:null},"256.0"),(0,r.yg)("td",{parentName:"tr",align:null},"Batch buffer size in MB to flush data into the underneath filesystem, default 256MB",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_BATCH_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writebulk_insertshuffle_input"},"write.bulk_insert.shuffle_input")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to shuffle the inputs by specific fields for bulk insert tasks, default true",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_BULK_INSERT_SHUFFLE_INPUT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writebulk_insertsort_input"},"write.bulk_insert.sort_input")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to sort the inputs by specific fields for bulk insert tasks, default true",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_BULK_INSERT_SORT_INPUT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writebulk_insertsort_inputby_record_key"},"write.bulk_insert.sort_input.by_record_key")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to sort the inputs by record keys for bulk insert tasks, default false",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_BULK_INSERT_SORT_INPUT_BY_RECORD_KEY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writeclientid"},"write.client.id")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Unique identifier used to distinguish different writer pipelines for concurrent mode",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_CLIENT_ID"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writecommitacktimeout"},"write.commit.ack.timeout")),(0,r.yg)("td",{parentName:"tr",align:null},"-1"),(0,r.yg)("td",{parentName:"tr",align:null},"Timeout limit for a writer task after it finishes a checkpoint and waits for the instant commit success, only for internal use",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_COMMIT_ACK_TIMEOUT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writeignorefailed"},"write.ignore.failed")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Flag to indicate whether to ignore any non exception error (e.g. writestatus error). within a checkpoint batch.  By default false. Turning this on, could hide the write status errors while the flink checkpoint moves ahead.  So, would recommend users to use this with caution.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: IGNORE_FAILED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writeinsertcluster"},"write.insert.cluster")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to merge small files for insert mode, if true, the write throughput will decrease because the read/write of existing small file, only valid for COW table, default false",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INSERT_CLUSTER"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writelogmaxsize"},"write.log.max.size")),(0,r.yg)("td",{parentName:"tr",align:null},"1024"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum size allowed in MB for a log file before it is rolled over to the next version, default 1GB",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_LOG_MAX_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writelog_blocksize"},"write.log_block.size")),(0,r.yg)("td",{parentName:"tr",align:null},"128"),(0,r.yg)("td",{parentName:"tr",align:null},"Max log block size in MB for log file, default 128MB",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_LOG_BLOCK_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writemergemax_memory"},"write.merge.max_memory")),(0,r.yg)("td",{parentName:"tr",align:null},"100"),(0,r.yg)("td",{parentName:"tr",align:null},"Max memory in MB for merge, default 100MB",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_MERGE_MAX_MEMORY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writeparquetblocksize"},"write.parquet.block.size")),(0,r.yg)("td",{parentName:"tr",align:null},"120"),(0,r.yg)("td",{parentName:"tr",align:null},"Parquet RowGroup size. It's recommended to make this large enough that scan costs can be amortized by packing enough column values into a single row group.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_PARQUET_BLOCK_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writeparquetpagesize"},"write.parquet.page.size")),(0,r.yg)("td",{parentName:"tr",align:null},"1"),(0,r.yg)("td",{parentName:"tr",align:null},"Parquet page size. Page is the unit of read within a parquet file. Within a block, pages are compressed separately.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_PARQUET_PAGE_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writepartitionoverwritemode"},"write.partition.overwrite.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"STATIC"),(0,r.yg)("td",{parentName:"tr",align:null},"When INSERT OVERWRITE a partitioned data source table, we currently support 2 modes: static and dynamic. Static mode deletes all the partitions that match the partition specification(e.g. PARTITION(a=1,b)) in the INSERT statement, before overwriting. Dynamic mode doesn't delete partitions ahead, and only overwrite those partitions that have data written into it at runtime. By default we use static mode to keep the same behavior of previous version.",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_PARTITION_OVERWRITE_MODE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writeprecombine"},"write.precombine")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Flag to indicate whether to drop duplicates before insert/upsert. By default these cases will accept duplicates, to gain extra performance: 1) insert operation; 2) upsert for MOR table, the MOR table deduplicate on reading",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PRE_COMBINE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writeratelimit"},"write.rate.limit")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Write record rate limit per second to prevent traffic jitter and improve stability, default 0 (no limit)",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_RATE_LIMIT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writeretryintervalms"},"write.retry.interval.ms")),(0,r.yg)("td",{parentName:"tr",align:null},"2000"),(0,r.yg)("td",{parentName:"tr",align:null},"Flag to indicate how long (by millisecond) before a retry should issued for failed checkpoint batch. By default 2000 and it will be doubled by every retry",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RETRY_INTERVAL_MS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writeretrytimes"},"write.retry.times")),(0,r.yg)("td",{parentName:"tr",align:null},"3"),(0,r.yg)("td",{parentName:"tr",align:null},"Flag to indicate how many times streaming job should retry for a failed checkpoint batch. By default 3",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RETRY_TIMES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writesortmemory"},"write.sort.memory")),(0,r.yg)("td",{parentName:"tr",align:null},"128"),(0,r.yg)("td",{parentName:"tr",align:null},"Sort memory in MB, default 128MB",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_SORT_MEMORY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#writetaskmaxsize"},"write.task.max.size")),(0,r.yg)("td",{parentName:"tr",align:null},"1024.0"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum memory in MB for a write task, when the threshold hits, it flushes the max size data bucket to avoid OOM, default 1GB",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_TASK_MAX_SIZE"))))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"WRITE_CLIENT"},"Write Client Configs"),(0,r.yg)("p",null,"Internally, the Hudi datasource uses a RDD based HoodieWriteClient API to actually perform writes to storage. These configs provide deep control over lower level aspects like file sizing, compression, parallelism, compaction, write schema, cleaning etc. Although Hudi provides sane defaults, from time-time these configs may need to be tweaked to optimize for specific workloads."),(0,r.yg)("h3",{id:"Common-Configurations"},"Common Configurations"),(0,r.yg)("p",null,"The following set of configurations are common across Hudi."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Common-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#asofinstant"},"as.of.instant")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The query instant for time travel. Without specified this option, we query the latest snapshot.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TIMESTAMP_AS_OF"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiememorycompactionmaxsize"},"hoodie.memory.compaction.max.size")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum amount of memory used  in bytes for compaction operations in bytes , before spilling to local storage.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_MEMORY_FOR_COMPACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecommondiskmapcompressionenabled"},"hoodie.common.diskmap.compression.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Turn on compression for BITCASK disk map used by the External Spillable Map",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DISK_MAP_BITCASK_COMPRESSION_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecommonspillablediskmaptype"},"hoodie.common.spillable.diskmap.type")),(0,r.yg)("td",{parentName:"tr",align:null},"BITCASK"),(0,r.yg)("td",{parentName:"tr",align:null},"When handling input data that cannot be held in memory, to merge with a file on storage, a spillable diskmap is employed.  By default, we use a persistent hashmap based loosely on bitcask, that offers O(1) inserts, lookups. Change this to ",(0,r.yg)("inlineCode",{parentName:"td"},"ROCKS_DB")," to prefer using rocksDB, for handling the spill.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPILLABLE_DISK_MAP_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritenewcolumnsnullable"},"hoodie.datasource.write.new.columns.nullable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When a non-nullable column is added to datasource during a write operation, the write  operation will fail schema compatibility check. Set this option to true will make the newly added  column nullable to successfully complete the write operation.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAKE_NEW_COLUMNS_NULLABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritereconcileschema"},"hoodie.datasource.write.reconcile.schema")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"This config controls how writer's schema will be selected based on the incoming batch's schema as well as existing table's one. When schema reconciliation is DISABLED, incoming batch's schema will be picked as a writer-schema (therefore updating table's schema). When schema reconciliation is ENABLED, writer-schema will be picked such that table's schema (after txn) is either kept the same or extended, meaning that we'll always prefer the schema that either adds new columns or stays the same. This enables us, to always extend the table's schema during evolution and never lose the data (when, for ex, existing column is being dropped in a new batch)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECONCILE_SCHEMA"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefsatomic_creationsupport"},"hoodie.fs.atomic_creation.support")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"This config is used to specify the file system which supports atomic file creation . atomic means that an operation either succeeds and has an effect or has fails and has no effect; now this feature is used by FileSystemLockProvider to guaranteeing that only one writer can create the lock file at a time. since some FS does not support atomic file creation (eg: S3), we decide the FileSystemLockProvider only support HDFS,local FS and View FS as default. if you want to use FileSystemLockProvider with other FS, you can set this config with the FS scheme, eg: fs1,fs2",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HOODIE_FS_ATOMIC_CREATION_SUPPORT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiememorydfsbuffermaxsize"},"hoodie.memory.dfs.buffer.max.size")),(0,r.yg)("td",{parentName:"tr",align:null},"16777216"),(0,r.yg)("td",{parentName:"tr",align:null},"Property to control the max memory in bytes for dfs input stream buffer size",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_DFS_STREAM_BUFFER_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiereadtimelineholesresolutionpolicy"},"hoodie.read.timeline.holes.resolution.policy")),(0,r.yg)("td",{parentName:"tr",align:null},"FAIL"),(0,r.yg)("td",{parentName:"tr",align:null},"When doing incremental queries, there could be hollow commits (requested or inflight commits that are not the latest) that are produced by concurrent writers and could lead to potential data loss. This config allows users to have different ways of handling this situation. The valid values are ","[FAIL, BLOCK, USE_TRANSITION_TIME]",": Use ",(0,r.yg)("inlineCode",{parentName:"td"},"FAIL")," to throw an exception when hollow commit is detected. This is helpful when hollow commits are not expected. Use ",(0,r.yg)("inlineCode",{parentName:"td"},"BLOCK")," to block processing commits from going beyond the hollow ones. This fits the case where waiting for hollow commits to finish is acceptable. Use ",(0,r.yg)("inlineCode",{parentName:"td"},"USE_TRANSITION_TIME")," (experimental) to query commits in range by state transition time (completion time), instead of commit time (start time). Using this mode will result in ",(0,r.yg)("inlineCode",{parentName:"td"},"begin.instanttime")," and ",(0,r.yg)("inlineCode",{parentName:"td"},"end.instanttime")," using ",(0,r.yg)("inlineCode",{parentName:"td"},"stateTransitionTime"),"  instead of the instant's commit time.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INCREMENTAL_READ_HANDLE_HOLLOW_COMMIT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieschemaonreadenable"},"hoodie.schema.on.read.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enables support for Schema Evolution feature",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_EVOLUTION_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritesetnullformissingcolumns"},"hoodie.write.set.null.for.missing.columns")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When a non-nullable column is missing from incoming batch during a write operation, the write  operation will fail schema compatibility check. Set this option to true will make the missing  column be filled with null values to successfully complete the write operation.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SET_NULL_FOR_MISSING_COLUMNS"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Metadata-Configs"},"Metadata Configs"),(0,r.yg)("p",null,"Configurations used by the Hudi Metadata Table. This table maintains the metadata about a given Hudi table (e.g file listings)  to avoid overhead of accessing cloud storage, during queries."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Metadata-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataenable"},"hoodie.metadata.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable the internal metadata table which serves table metadata like level file listings",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataindexbloomfilterenable"},"hoodie.metadata.index.bloom.filter.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable indexing bloom filters of user data files under metadata table. When enabled, metadata table will have a partition to store the bloom filter index and will be used during the index lookups.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_METADATA_INDEX_BLOOM_FILTER"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataindexcolumnstatsenable"},"hoodie.metadata.index.column.stats.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable indexing column ranges of user data files under metadata table key lookups. When enabled, metadata table will have a partition to store the column ranges and will be used for pruning files during the index lookups.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_METADATA_INDEX_COLUMN_STATS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatamaxinitparallelism"},"hoodie.metadata.max.init.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"100000"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum parallelism to use when initializing Record Index.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_INDEX_MAX_PARALLELISM"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatamaxlogfilesize"},"hoodie.metadata.max.logfile.size")),(0,r.yg)("td",{parentName:"tr",align:null},"2147483648"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum size in bytes of a single log file. Larger log files can contain larger log blocks thereby reducing the number of blocks to search for keys",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_LOG_FILE_SIZE_BYTES_PROP"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Metadata-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataindexbloomfiltercolumnlist"},"hoodie.metadata.index.bloom.filter.column.list")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Comma-separated list of columns for which bloom filter index will be built. If not set, only record key will be indexed.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_FILTER_INDEX_FOR_COLUMNS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataindexcolumnstatscolumnlist"},"hoodie.metadata.index.column.stats.column.list")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Comma-separated list of columns for which column stats index will be built. If not set, all columns will be indexed",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COLUMN_STATS_INDEX_FOR_COLUMNS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataindexcolumnstatsprocessingmodeoverride"},"hoodie.metadata.index.column.stats.processing.mode.override")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"By default Column Stats Index is automatically determining whether it should be read and processed either'in-memory' (w/in executing process) or using Spark (on a cluster), based on some factors like the size of the Index and how many columns are read. This config allows to override this behavior.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COLUMN_STATS_INDEX_PROCESSING_MODE_OVERRIDE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.12.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#_hoodiemetadataignorespuriousdeletes"},"_hoodie.metadata.ignore.spurious.deletes")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"There are cases when extra files are requested to be deleted from metadata table which are never added before. This config determines how to handle such spurious deletes",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: IGNORE_SPURIOUS_DELETES"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieassumedatepartitioning"},"hoodie.assume.date.partitioning")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Should HoodieWriteClient assume the data is partitioned by dates, i.e three levels from base path. This is a stop-gap to support tables created by versions ","<"," 0.3.1. Will be removed eventually",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ASSUME_DATE_PARTITIONING"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.3.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilelistingparallelism"},"hoodie.file.listing.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"200"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism to use, when listing the table on lake storage.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FILE_LISTING_PARALLELISM_VALUE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataautoinitialize"},"hoodie.metadata.auto.initialize")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Initializes the metadata table by reading from the file system when the table is first created. Enabled by default. Warning: This should only be disabled when manually constructing the metadata table outside of typical Hudi writer flows.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: AUTO_INITIALIZE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatacompactmaxdeltacommits"},"hoodie.metadata.compact.max.delta.commits")),(0,r.yg)("td",{parentName:"tr",align:null},"10"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls how often the metadata table is compacted.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACT_NUM_DELTA_COMMITS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatadirfilterregex"},"hoodie.metadata.dir.filter.regex")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Directories matching this regex, will be filtered out when initializing metadata table from lake storage for the first time.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DIR_FILTER_REGEX"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataindexasync"},"hoodie.metadata.index.async")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable asynchronous indexing of metadata table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ASYNC_INDEX_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataindexbloomfilterfilegroupcount"},"hoodie.metadata.index.bloom.filter.file.group.count")),(0,r.yg)("td",{parentName:"tr",align:null},"4"),(0,r.yg)("td",{parentName:"tr",align:null},"Metadata bloom filter index partition file group count. This controls the size of the base and log files and read parallelism in the bloom filter index partition. The recommendation is to size the file group count such that the base files are under 1GB.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METADATA_INDEX_BLOOM_FILTER_FILE_GROUP_COUNT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataindexbloomfilterparallelism"},"hoodie.metadata.index.bloom.filter.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"200"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism to use for generating bloom filter index in metadata table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_FILTER_INDEX_PARALLELISM"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataindexchecktimeoutseconds"},"hoodie.metadata.index.check.timeout.seconds")),(0,r.yg)("td",{parentName:"tr",align:null},"900"),(0,r.yg)("td",{parentName:"tr",align:null},"After the async indexer has finished indexing upto the base instant, it will ensure that all inflight writers reliably write index updates as well. If this timeout expires, then the indexer will abort itself safely.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METADATA_INDEX_CHECK_TIMEOUT_SECONDS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataindexcolumnstatsfilegroupcount"},"hoodie.metadata.index.column.stats.file.group.count")),(0,r.yg)("td",{parentName:"tr",align:null},"2"),(0,r.yg)("td",{parentName:"tr",align:null},"Metadata column stats partition file group count. This controls the size of the base and log files and read parallelism in the column stats index partition. The recommendation is to size the file group count such that the base files are under 1GB.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METADATA_INDEX_COLUMN_STATS_FILE_GROUP_COUNT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataindexcolumnstatsinMemoryprojectionthreshold"},"hoodie.metadata.index.column.stats.inMemory.projection.threshold")),(0,r.yg)("td",{parentName:"tr",align:null},"100000"),(0,r.yg)("td",{parentName:"tr",align:null},'When reading Column Stats Index, if the size of the expected resulting projection is below the in-memory threshold (counted by the # of rows), it will be attempted to be loaded "in-memory" (ie not using the execution engine like Spark, Flink, etc). If the value is above the threshold execution engine will be used to compose the projection.',(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COLUMN_STATS_INDEX_IN_MEMORY_PROJECTION_THRESHOLD"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.12.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataindexcolumnstatsparallelism"},"hoodie.metadata.index.column.stats.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"200"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism to use, when generating column stats index.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COLUMN_STATS_INDEX_PARALLELISM"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatalogcompactionblocksthreshold"},"hoodie.metadata.log.compaction.blocks.threshold")),(0,r.yg)("td",{parentName:"tr",align:null},"5"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls the criteria to log compacted files groups in metadata table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOG_COMPACT_BLOCKS_THRESHOLD"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatalogcompactionenable"},"hoodie.metadata.log.compaction.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"This configs enables logcompaction for the metadata table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_LOG_COMPACTION_ON_METADATA_TABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatamaxdeltacommitswhen_pending"},"hoodie.metadata.max.deltacommits.when_pending")),(0,r.yg)("td",{parentName:"tr",align:null},"1000"),(0,r.yg)("td",{parentName:"tr",align:null},"When there is a pending instant in data table, this config limits the allowed number of deltacommits in metadata table to prevent the metadata table's timeline from growing unboundedly as compaction won't be triggered due to the pending data table instant.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METADATA_MAX_NUM_DELTACOMMITS_WHEN_PENDING"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatamaxreaderbuffersize"},"hoodie.metadata.max.reader.buffer.size")),(0,r.yg)("td",{parentName:"tr",align:null},"10485760"),(0,r.yg)("td",{parentName:"tr",align:null},"Max memory to use for the reader buffer while merging log blocks",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_READER_BUFFER_SIZE_PROP"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatamaxreadermemory"},"hoodie.metadata.max.reader.memory")),(0,r.yg)("td",{parentName:"tr",align:null},"1073741824"),(0,r.yg)("td",{parentName:"tr",align:null},"Max memory to use for the reader to read from metadata",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_READER_MEMORY_PROP"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatametricsenable"},"hoodie.metadata.metrics.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable publishing of metrics around metadata table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METRICS_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataoptimizedlogblocksscanenable"},"hoodie.metadata.optimized.log.blocks.scan.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Optimized log blocks scanner that addresses all the multi-writer use-cases while appending to log files. It also differentiates original blocks written by ingestion writers and compacted blocks written by log compaction.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_OPTIMIZED_LOG_BLOCKS_SCAN"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatarecordindexenable"},"hoodie.metadata.record.index.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Create the HUDI Record Index within the Metadata Table",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_INDEX_ENABLE_PROP"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatarecordindexgrowthfactor"},"hoodie.metadata.record.index.growth.factor")),(0,r.yg)("td",{parentName:"tr",align:null},"2.0"),(0,r.yg)("td",{parentName:"tr",align:null},"The current number of records are multiplied by this number when estimating the number of file groups to create automatically. This helps account for growth in the number of records in the dataset.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_INDEX_GROWTH_FACTOR_PROP"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatarecordindexmaxfilegroupcount"},"hoodie.metadata.record.index.max.filegroup.count")),(0,r.yg)("td",{parentName:"tr",align:null},"10000"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of file groups to use for Record Index.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_INDEX_MAX_FILE_GROUP_COUNT_PROP"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatarecordindexmaxfilegroupsize"},"hoodie.metadata.record.index.max.filegroup.size")),(0,r.yg)("td",{parentName:"tr",align:null},"1073741824"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum size in bytes of a single file group. Large file group takes longer to compact.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_INDEX_MAX_FILE_GROUP_SIZE_BYTES_PROP"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadatarecordindexminfilegroupcount"},"hoodie.metadata.record.index.min.filegroup.count")),(0,r.yg)("td",{parentName:"tr",align:null},"10"),(0,r.yg)("td",{parentName:"tr",align:null},"Minimum number of file groups to use for Record Index.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_INDEX_MIN_FILE_GROUP_COUNT_PROP"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetadataspillablemappath"},"hoodie.metadata.spillable.map.path")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Path on local storage to use, when keys read from metadata are held in a spillable map.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPILLABLE_MAP_DIR_PROP"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Metaserver-Configs"},"Metaserver Configs"),(0,r.yg)("p",null,"Configurations used by the Hudi Metaserver."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Metaserver-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatabasename"},"hoodie.database.name")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Database name that will be used for incremental query.If different databases have the same table name during incremental query, we can set it to limit the table name under a specific database",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DATABASE_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodietablename"},"hoodie.table.name")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Table name that will be used for registering with Hive. Needs to be same across runs.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TABLE_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetaserverconnectretries"},"hoodie.metaserver.connect.retries")),(0,r.yg)("td",{parentName:"tr",align:null},"3"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of retries while opening a connection to metaserver",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METASERVER_CONNECTION_RETRIES"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetaserverconnectretrydelay"},"hoodie.metaserver.connect.retry.delay")),(0,r.yg)("td",{parentName:"tr",align:null},"1"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of seconds for the client to wait between consecutive connection attempts",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METASERVER_CONNECTION_RETRY_DELAY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetaserverenabled"},"hoodie.metaserver.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable Hudi metaserver for storing Hudi tables' metadata.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METASERVER_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetaserveruris"},"hoodie.metaserver.uris")),(0,r.yg)("td",{parentName:"tr",align:null},"thrift://localhost:9090"),(0,r.yg)("td",{parentName:"tr",align:null},"Metaserver server uris",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METASERVER_URLS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Storage-Configs"},"Storage Configs"),(0,r.yg)("p",null,"Configurations that control aspects around writing, sizing, reading base and log files."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Storage-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieparquetcompressioncodec"},"hoodie.parquet.compression.codec")),(0,r.yg)("td",{parentName:"tr",align:null},"gzip"),(0,r.yg)("td",{parentName:"tr",align:null},"Compression Codec for parquet files",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARQUET_COMPRESSION_CODEC_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieparquetmaxfilesize"},"hoodie.parquet.max.file.size")),(0,r.yg)("td",{parentName:"tr",align:null},"125829120"),(0,r.yg)("td",{parentName:"tr",align:null},"Target size in bytes for parquet files produced by Hudi write phases. For DFS, this needs to be aligned with the underlying filesystem block size for optimal performance.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARQUET_MAX_FILE_SIZE"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Storage-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodielogfiledatablockformat"},"hoodie.logfile.data.block.format")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},'Format of the data block within delta logs. Following formats are currently supported "avro", "hfile", "parquet"',(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOGFILE_DATA_BLOCK_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieavrowritesupportclass"},"hoodie.avro.write.support.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.avro.HoodieAvroWriteSupport"),(0,r.yg)("td",{parentName:"tr",align:null},"Provided write support class should extend HoodieAvroWriteSupport class and it is loaded at runtime. This is only required when trying to override the existing write context.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HOODIE_AVRO_WRITE_SUPPORT_CLASS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebloomindexfilterdynamicmaxentries"},"hoodie.bloom.index.filter.dynamic.max.entries")),(0,r.yg)("td",{parentName:"tr",align:null},"100000"),(0,r.yg)("td",{parentName:"tr",align:null},"The threshold for the maximum number of keys to record in a dynamic Bloom filter row. Only applies if filter type is BloomFilterTypeCode.DYNAMIC_V0.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_FILTER_DYNAMIC_MAX_ENTRIES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebloomindexfiltertype"},"hoodie.bloom.index.filter.type")),(0,r.yg)("td",{parentName:"tr",align:null},"DYNAMIC_V0"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.bloom.BloomFilterTypeCode: Filter type used by Bloom filter.     SIMPLE: Bloom filter that is based on the configured size.     DYNAMIC_V0(default): Bloom filter that is auto sized based on number of keys.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_FILTER_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiehfileblocksize"},"hoodie.hfile.block.size")),(0,r.yg)("td",{parentName:"tr",align:null},"1048576"),(0,r.yg)("td",{parentName:"tr",align:null},"Lower values increase the size in bytes of metadata tracked within HFile, but can offer potentially faster lookup times.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HFILE_BLOCK_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiehfilecompressionalgorithm"},"hoodie.hfile.compression.algorithm")),(0,r.yg)("td",{parentName:"tr",align:null},"GZ"),(0,r.yg)("td",{parentName:"tr",align:null},"Compression codec to use for hfile base files.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HFILE_COMPRESSION_ALGORITHM_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiehfilemaxfilesize"},"hoodie.hfile.max.file.size")),(0,r.yg)("td",{parentName:"tr",align:null},"125829120"),(0,r.yg)("td",{parentName:"tr",align:null},"Target file size in bytes for HFile base files.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HFILE_MAX_FILE_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexbloomfpp"},"hoodie.index.bloom.fpp")),(0,r.yg)("td",{parentName:"tr",align:null},"0.000000001"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is BLOOM. Error rate allowed given the number of entries. This is used to calculate how many bits should be assigned for the bloom filter and the number of hash functions. This is usually set very low (default: 0.000000001), we like to tradeoff disk space for lower false positives. If the number of entries added to bloom filter exceeds the configured value (hoodie.index.bloom.num_entries), then this fpp may not be honored.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_FILTER_FPP_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexbloomnum_entries"},"hoodie.index.bloom.num_entries")),(0,r.yg)("td",{parentName:"tr",align:null},"60000"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is BLOOM. This is the number of entries to be stored in the bloom filter. The rationale for the default: Assume the maxParquetFileSize is 128MB and averageRecordSize is 1kb and hence we approx a total of 130K records in a file. The default (60000) is roughly half of this approximation. Warning: Setting this very low, will generate a lot of false positives and index lookup will have to scan a lot more files than it has to and setting this to a very high number will increase the size every base file linearly (roughly 4KB for every 50000 entries). This config is also used with DYNAMIC bloom filter which determines the initial size for the bloom.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_FILTER_NUM_ENTRIES_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodielogfiledatablockmaxsize"},"hoodie.logfile.data.block.max.size")),(0,r.yg)("td",{parentName:"tr",align:null},"268435456"),(0,r.yg)("td",{parentName:"tr",align:null},"LogFile Data block max size in bytes. This is the maximum size allowed for a single data block to be appended to a log file. This helps to make sure the data appended to the log file is broken up into sizable blocks to prevent from OOM errors. This size should be greater than the JVM memory.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOGFILE_DATA_BLOCK_MAX_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodielogfilemaxsize"},"hoodie.logfile.max.size")),(0,r.yg)("td",{parentName:"tr",align:null},"1073741824"),(0,r.yg)("td",{parentName:"tr",align:null},"LogFile max size in bytes. This is the maximum size allowed for a log file before it is rolled over to the next version.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOGFILE_MAX_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodielogfiletoparquetcompressionratio"},"hoodie.logfile.to.parquet.compression.ratio")),(0,r.yg)("td",{parentName:"tr",align:null},"0.35"),(0,r.yg)("td",{parentName:"tr",align:null},"Expected additional compression as records move from log files to parquet. Used for merge_on_read table to send inserts into log files ","&"," control the size of compacted parquet file.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOGFILE_TO_PARQUET_COMPRESSION_RATIO_FRACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieorcblocksize"},"hoodie.orc.block.size")),(0,r.yg)("td",{parentName:"tr",align:null},"125829120"),(0,r.yg)("td",{parentName:"tr",align:null},"ORC block size, recommended to be aligned with the target file size.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ORC_BLOCK_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieorccompressioncodec"},"hoodie.orc.compression.codec")),(0,r.yg)("td",{parentName:"tr",align:null},"ZLIB"),(0,r.yg)("td",{parentName:"tr",align:null},"Compression codec to use for ORC base files.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ORC_COMPRESSION_CODEC_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieorcmaxfilesize"},"hoodie.orc.max.file.size")),(0,r.yg)("td",{parentName:"tr",align:null},"125829120"),(0,r.yg)("td",{parentName:"tr",align:null},"Target file size in bytes for ORC base files.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ORC_FILE_MAX_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieorcstripesize"},"hoodie.orc.stripe.size")),(0,r.yg)("td",{parentName:"tr",align:null},"67108864"),(0,r.yg)("td",{parentName:"tr",align:null},"Size of the memory buffer in bytes for writing",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ORC_STRIPE_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieparquetblocksize"},"hoodie.parquet.block.size")),(0,r.yg)("td",{parentName:"tr",align:null},"125829120"),(0,r.yg)("td",{parentName:"tr",align:null},"Parquet RowGroup size in bytes. It's recommended to make this large enough that scan costs can be amortized by packing enough column values into a single row group.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARQUET_BLOCK_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieparquetcompressionratio"},"hoodie.parquet.compression.ratio")),(0,r.yg)("td",{parentName:"tr",align:null},"0.1"),(0,r.yg)("td",{parentName:"tr",align:null},"Expected compression of parquet data used by Hudi, when it tries to size new parquet files. Increase this value, if bulk_insert is producing smaller than expected sized files",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARQUET_COMPRESSION_RATIO_FRACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieparquetdictionaryenabled"},"hoodie.parquet.dictionary.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to use dictionary encoding",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARQUET_DICTIONARY_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieparquetfield_idwriteenabled"},"hoodie.parquet.field_id.write.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Would only be effective with Spark 3.3+. Sets spark.sql.parquet.fieldId.write.enabled. If enabled, Spark will write out parquet native field ids that are stored inside StructField's metadata as parquet.field.id to parquet files.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARQUET_FIELD_ID_WRITE_ENABLED"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.12.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieparquetoutputtimestamptype"},"hoodie.parquet.outputtimestamptype")),(0,r.yg)("td",{parentName:"tr",align:null},"TIMESTAMP_MICROS"),(0,r.yg)("td",{parentName:"tr",align:null},"Sets spark.sql.parquet.outputTimestampType. Parquet timestamp type to use when Spark writes data to Parquet files.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARQUET_OUTPUT_TIMESTAMP_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieparquetpagesize"},"hoodie.parquet.page.size")),(0,r.yg)("td",{parentName:"tr",align:null},"1048576"),(0,r.yg)("td",{parentName:"tr",align:null},"Parquet page size in bytes. Page is the unit of read within a parquet file. Within a block, pages are compressed separately.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARQUET_PAGE_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieparquetwritelegacyformatenabled"},"hoodie.parquet.writelegacyformat.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Sets spark.sql.parquet.writeLegacyFormat. If true, data will be written in a way of Spark 1.4 and earlier. For example, decimal values will be written in Parquet's fixed-length byte array format which other systems such as Apache Hive and Apache Impala use. If false, the newer format in Parquet will be used. For example, decimals will be written in int-based format.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARQUET_WRITE_LEGACY_FORMAT_ENABLED"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Consistency-Guard-Configurations"},"Consistency Guard Configurations"),(0,r.yg)("p",null,"The consistency guard related config options, to help talk to eventually consistent object storage.(Tip: S3 is NOT eventually consistent anymore!)"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Consistency-Guard-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#_hoodieoptimisticconsistencyguardenable"},"_hoodie.optimistic.consistency.guard.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable consistency guard, which optimistically assumes consistency is achieved after a certain time period.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: OPTIMISTIC_CONSISTENCY_GUARD_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieconsistencycheckenabled"},"hoodie.consistency.check.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enabled to handle S3 eventual consistency issue. This property is no longer required since S3 is now strongly consistent. Will be removed in the future releases.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.5.0"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Deprecated since: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieconsistencycheckinitial_interval_ms"},"hoodie.consistency.check.initial_interval_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"400"),(0,r.yg)("td",{parentName:"tr",align:null},"Amount of time (in ms) to wait, before checking for consistency after an operation on storage.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INITIAL_CHECK_INTERVAL_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.5.0"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Deprecated since: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieconsistencycheckmax_checks"},"hoodie.consistency.check.max_checks")),(0,r.yg)("td",{parentName:"tr",align:null},"6"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of consistency checks to perform, with exponential backoff.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_CHECKS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.5.0"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Deprecated since: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieconsistencycheckmax_interval_ms"},"hoodie.consistency.check.max_interval_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"20000"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum amount of time (in ms), to wait for consistency checking.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_CHECK_INTERVAL_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.5.0"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Deprecated since: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieoptimisticconsistencyguardsleep_time_ms"},"hoodie.optimistic.consistency.guard.sleep_time_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"500"),(0,r.yg)("td",{parentName:"tr",align:null},"Amount of time (in ms), to wait after which we assume storage is consistent.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: OPTIMISTIC_CONSISTENCY_GUARD_SLEEP_TIME_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"FileSystem-Guard-Configurations"},"FileSystem Guard Configurations"),(0,r.yg)("p",null,"The filesystem retry related config options, to help deal with runtime exception like list/get/put/delete performance issues."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#FileSystem-Guard-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemoperationretryenable"},"hoodie.filesystem.operation.retry.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enabled to handle list/get/delete etc file system performance issue.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FILESYSTEM_RETRY_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemoperationretryexceptions"},"hoodie.filesystem.operation.retry.exceptions")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"The class name of the Exception that needs to be retried, separated by commas. Default is empty which means retry all the IOException and RuntimeException from FileSystem",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RETRY_EXCEPTIONS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemoperationretryinitial_interval_ms"},"hoodie.filesystem.operation.retry.initial_interval_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"100"),(0,r.yg)("td",{parentName:"tr",align:null},"Amount of time (in ms) to wait, before retry to do operations on storage.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INITIAL_RETRY_INTERVAL_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemoperationretrymax_interval_ms"},"hoodie.filesystem.operation.retry.max_interval_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"2000"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum amount of time (in ms), to wait for next retry.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_RETRY_INTERVAL_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemoperationretrymax_numbers"},"hoodie.filesystem.operation.retry.max_numbers")),(0,r.yg)("td",{parentName:"tr",align:null},"4"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of retry actions to perform, with exponential backoff.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_RETRY_NUMBERS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"File-System-View-Storage-Configurations"},"File System View Storage Configurations"),(0,r.yg)("p",null,"Configurations that control how file metadata is stored by Hudi, for transaction processing and queries."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#File-System-View-Storage-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemremotebackupviewenable"},"hoodie.filesystem.remote.backup.view.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Config to control whether backup needs to be configured if clients were not able to reach timeline service.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REMOTE_BACKUP_VIEW_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewincrtimelinesyncenable"},"hoodie.filesystem.view.incr.timeline.sync.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls whether or not, the file system view is incrementally updated as new actions are performed on the timeline.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INCREMENTAL_TIMELINE_SYNC_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewremotehost"},"hoodie.filesystem.view.remote.host")),(0,r.yg)("td",{parentName:"tr",align:null},"localhost"),(0,r.yg)("td",{parentName:"tr",align:null},"We expect this to be rarely hand configured.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REMOTE_HOST_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewremoteport"},"hoodie.filesystem.view.remote.port")),(0,r.yg)("td",{parentName:"tr",align:null},"26754"),(0,r.yg)("td",{parentName:"tr",align:null},"Port to serve file system view queries, when remote. We expect this to be rarely hand configured.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REMOTE_PORT_NUM"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewremoteretryenable"},"hoodie.filesystem.view.remote.retry.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to enable API request retry for remote file system view.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REMOTE_RETRY_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.12.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewremoteretryexceptions"},"hoodie.filesystem.view.remote.retry.exceptions")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"The class name of the Exception that needs to be retried, separated by commas. Default is empty which means retry all the IOException and RuntimeException from Remote Request.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RETRY_EXCEPTIONS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.12.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewremoteretryinitial_interval_ms"},"hoodie.filesystem.view.remote.retry.initial_interval_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"100"),(0,r.yg)("td",{parentName:"tr",align:null},"Amount of time (in ms) to wait, before retry to do operations on storage.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REMOTE_INITIAL_RETRY_INTERVAL_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.12.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewremoteretrymax_interval_ms"},"hoodie.filesystem.view.remote.retry.max_interval_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"2000"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum amount of time (in ms), to wait for next retry.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REMOTE_MAX_RETRY_INTERVAL_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.12.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewremoteretrymax_numbers"},"hoodie.filesystem.view.remote.retry.max_numbers")),(0,r.yg)("td",{parentName:"tr",align:null},"3"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of retry for API requests against a remote file system view. e.g timeline server.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REMOTE_MAX_RETRY_NUMBERS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.12.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewremotetimeoutsecs"},"hoodie.filesystem.view.remote.timeout.secs")),(0,r.yg)("td",{parentName:"tr",align:null},"300"),(0,r.yg)("td",{parentName:"tr",align:null},"Timeout in seconds, to wait for API requests against a remote file system view. e.g timeline server.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REMOTE_TIMEOUT_SECS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewrocksdbbasepath"},"hoodie.filesystem.view.rocksdb.base.path")),(0,r.yg)("td",{parentName:"tr",align:null},"/tmp/hoodie_timeline_rocksdb"),(0,r.yg)("td",{parentName:"tr",align:null},"Path on local storage to use, when storing file system view in embedded kv store/rocksdb.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ROCKSDB_BASE_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewsecondarytype"},"hoodie.filesystem.view.secondary.type")),(0,r.yg)("td",{parentName:"tr",align:null},"MEMORY"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies the secondary form of storage for file system view, if the primary (e.g timeline server)  is unavailable.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SECONDARY_VIEW_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewspillablebootstrapbasefilememfraction"},"hoodie.filesystem.view.spillable.bootstrap.base.file.mem.fraction")),(0,r.yg)("td",{parentName:"tr",align:null},"0.05"),(0,r.yg)("td",{parentName:"tr",align:null},"Fraction of the file system view memory, to be used for holding mapping to bootstrap base files.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BOOTSTRAP_BASE_FILE_MEM_FRACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewspillableclusteringmemfraction"},"hoodie.filesystem.view.spillable.clustering.mem.fraction")),(0,r.yg)("td",{parentName:"tr",align:null},"0.01"),(0,r.yg)("td",{parentName:"tr",align:null},"Fraction of the file system view memory, to be used for holding clustering related metadata.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPILLABLE_CLUSTERING_MEM_FRACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewspillablecompactionmemfraction"},"hoodie.filesystem.view.spillable.compaction.mem.fraction")),(0,r.yg)("td",{parentName:"tr",align:null},"0.8"),(0,r.yg)("td",{parentName:"tr",align:null},"Fraction of the file system view memory, to be used for holding compaction related metadata.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPILLABLE_COMPACTION_MEM_FRACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewspillabledir"},"hoodie.filesystem.view.spillable.dir")),(0,r.yg)("td",{parentName:"tr",align:null},"/tmp/"),(0,r.yg)("td",{parentName:"tr",align:null},"Path on local storage to use, when file system view is held in a spillable map.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPILLABLE_DIR"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewspillablelogcompactionmemfraction"},"hoodie.filesystem.view.spillable.log.compaction.mem.fraction")),(0,r.yg)("td",{parentName:"tr",align:null},"0.8"),(0,r.yg)("td",{parentName:"tr",align:null},"Fraction of the file system view memory, to be used for holding log compaction related metadata.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPILLABLE_LOG_COMPACTION_MEM_FRACTION"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewspillablemem"},"hoodie.filesystem.view.spillable.mem")),(0,r.yg)("td",{parentName:"tr",align:null},"104857600"),(0,r.yg)("td",{parentName:"tr",align:null},"Amount of memory to be used in bytes for holding file system view, before spilling to disk.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPILLABLE_MEMORY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewspillablereplacedmemfraction"},"hoodie.filesystem.view.spillable.replaced.mem.fraction")),(0,r.yg)("td",{parentName:"tr",align:null},"0.01"),(0,r.yg)("td",{parentName:"tr",align:null},"Fraction of the file system view memory, to be used for holding replace commit related metadata.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPILLABLE_REPLACED_MEM_FRACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefilesystemviewtype"},"hoodie.filesystem.view.type")),(0,r.yg)("td",{parentName:"tr",align:null},"MEMORY"),(0,r.yg)("td",{parentName:"tr",align:null},"File system view provides APIs for viewing the files on the underlying lake storage,  as file groups and file slices. This config controls how such a view is held. Options include MEMORY,SPILLABLE_DISK,EMBEDDED_KV_STORE,REMOTE_ONLY,REMOTE_FIRST which provide different trade offs for memory usage and API request performance.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: VIEW_TYPE"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Archival-Configs"},"Archival Configs"),(0,r.yg)("p",null,"Configurations that control archival."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Archival-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiekeepmaxcommits"},"hoodie.keep.max.commits")),(0,r.yg)("td",{parentName:"tr",align:null},"30"),(0,r.yg)("td",{parentName:"tr",align:null},"Archiving service moves older entries from timeline into an archived log after each write, to keep the metadata overhead constant, even as the table size grows. This config controls the maximum number of instants to retain in the active timeline. ",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_COMMITS_TO_KEEP"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiekeepmincommits"},"hoodie.keep.min.commits")),(0,r.yg)("td",{parentName:"tr",align:null},"20"),(0,r.yg)("td",{parentName:"tr",align:null},"Similar to hoodie.keep.max.commits, but controls the minimum number of instants to retain in the active timeline.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MIN_COMMITS_TO_KEEP"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Archival-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiearchiveasync"},"hoodie.archive.async")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies when hoodie.archive.automatic is turned on. When turned on runs archiver async with writing, which can speed up overall write performance.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ASYNC_ARCHIVE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiearchiveautomatic"},"hoodie.archive.automatic")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"When enabled, the archival table service is invoked immediately after each commit, to archive commits if we cross a maximum value of commits. It's recommended to enable this, to ensure number of active commits is bounded.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: AUTO_ARCHIVE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiearchivebeyondsavepoint"},"hoodie.archive.beyond.savepoint")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If enabled, archival will proceed beyond savepoint, skipping savepoint commits. If disabled, archival will stop at the earliest savepoint commit.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ARCHIVE_BEYOND_SAVEPOINT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.12.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiearchivedeleteparallelism"},"hoodie.archive.delete.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"100"),(0,r.yg)("td",{parentName:"tr",align:null},"When performing archival operation, Hudi needs to delete the files of the archived instants in the active timeline in .hoodie folder. The file deletion also happens after merging small archived files into larger ones if enabled. This config limits the Spark parallelism for deleting files in both cases, i.e., parallelism of deleting files does not go above the configured value and the parallelism is the number of files to delete if smaller than the configured value.  If you see that the file deletion in archival operation is slow because of the limited parallelism, you can increase this to tune the performance.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DELETE_ARCHIVED_INSTANT_PARALLELISM_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiearchivemergeenable"},"hoodie.archive.merge.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When enable, hoodie will auto merge several small archive files into larger one. It's useful when storage scheme doesn't support append operation.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ARCHIVE_MERGE_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiearchivemergefilesbatchsize"},"hoodie.archive.merge.files.batch.size")),(0,r.yg)("td",{parentName:"tr",align:null},"10"),(0,r.yg)("td",{parentName:"tr",align:null},"The number of small archive files to be merged at once.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ARCHIVE_MERGE_FILES_BATCH_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiearchivemergesmallfilelimitbytes"},"hoodie.archive.merge.small.file.limit.bytes")),(0,r.yg)("td",{parentName:"tr",align:null},"20971520"),(0,r.yg)("td",{parentName:"tr",align:null},"This config sets the archive file size limit below which an archive file becomes a candidate to be selected as such a small file.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ARCHIVE_MERGE_SMALL_FILE_LIMIT_BYTES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecommitsarchivalbatch"},"hoodie.commits.archival.batch")),(0,r.yg)("td",{parentName:"tr",align:null},"10"),(0,r.yg)("td",{parentName:"tr",align:null},"Archiving of instants is batched in best-effort manner, to pack more instants into a single archive log. This config controls such archival batch size.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMMITS_ARCHIVAL_BATCH_SIZE"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Bootstrap-Configs"},"Bootstrap Configs"),(0,r.yg)("p",null,"Configurations that control how you want to bootstrap your existing tables for the first time into hudi. The bootstrap operation can flexibly avoid copying data over before you can use Hudi and support running the existing  writers and new hudi writers in parallel, to validate the migration."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Bootstrap-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebootstrapbasepath"},"hoodie.bootstrap.base.path")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Base path of the dataset that needs to be bootstrapped as a Hudi table",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BASE_PATH"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Bootstrap-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebootstrapdataqueriesonly"},"hoodie.bootstrap.data.queries.only")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Improves query performance, but queries cannot use hudi metadata fields",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DATA_QUERIES_ONLY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebootstrapfullinputprovider"},"hoodie.bootstrap.full.input.provider")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.bootstrap.SparkParquetBootstrapDataProvider"),(0,r.yg)("td",{parentName:"tr",align:null},"Class to use for reading the bootstrap dataset partitions/files, for Bootstrap mode FULL_RECORD",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FULL_BOOTSTRAP_INPUT_PROVIDER_CLASS_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebootstrapindexclass"},"hoodie.bootstrap.index.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.bootstrap.index.HFileBootstrapIndex"),(0,r.yg)("td",{parentName:"tr",align:null},"Implementation to use, for mapping a skeleton base file to a bootstrap base file.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INDEX_CLASS_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebootstrapmodeselector"},"hoodie.bootstrap.mode.selector")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.client.bootstrap.selector.MetadataOnlyBootstrapModeSelector"),(0,r.yg)("td",{parentName:"tr",align:null},"Selects the mode in which each file/partition in the bootstrapped dataset gets bootstrapped",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MODE_SELECTOR_CLASS_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebootstrapmodeselectorregex"},"hoodie.bootstrap.mode.selector.regex")),(0,r.yg)("td",{parentName:"tr",align:null},".*"),(0,r.yg)("td",{parentName:"tr",align:null},"Matches each bootstrap dataset partition against this regex and applies the mode below to it.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITION_SELECTOR_REGEX_PATTERN"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebootstrapmodeselectorregexmode"},"hoodie.bootstrap.mode.selector.regex.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"METADATA_ONLY"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.client.bootstrap.BootstrapMode: Bootstrap mode for importing an existing table into Hudi     FULL_RECORD: In this mode, the full record data is copied into hudi and metadata columns are added. A full record bootstrap is functionally equivalent to a bulk-insert. After a full record bootstrap, Hudi will function properly even if the original table is modified or deleted.     METADATA_ONLY(default): In this mode, the full record data is not copied into Hudi therefore it avoids full cost of rewriting the dataset. Instead, 'skeleton' files containing just the corresponding metadata columns are added to the Hudi table. Hudi relies on the data in the original table and will face data-loss or corruption if files in the original table location are deleted or modified.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITION_SELECTOR_REGEX_MODE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebootstrapparallelism"},"hoodie.bootstrap.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"1500"),(0,r.yg)("td",{parentName:"tr",align:null},"For metadata-only bootstrap, Hudi parallelizes the operation so that each table partition is handled by one Spark task. This config limits the number of parallelism. We pick the configured parallelism if the number of table partitions is larger than this configured value. The parallelism is assigned to the number of table partitions if it is smaller than the configured value. For full-record bootstrap, i.e., BULK_INSERT operation of the records, this configured value is passed as the BULK_INSERT shuffle parallelism (",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.bulkinsert.shuffle.parallelism"),"), determining the BULK_INSERT write behavior. If you see that the bootstrap is slow due to the limited parallelism, you can increase this.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARALLELISM_VALUE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebootstrappartitionpathtranslatorclass"},"hoodie.bootstrap.partitionpath.translator.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.client.bootstrap.translator.IdentityBootstrapPartitionPathTranslator"),(0,r.yg)("td",{parentName:"tr",align:null},"Translates the partition paths from the bootstrapped data into how is laid out as a Hudi table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITION_PATH_TRANSLATOR_CLASS_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Clean-Configs"},"Clean Configs"),(0,r.yg)("p",null,"Cleaning (reclamation of older/unused file groups/slices)."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Clean-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleanasync"},"hoodie.clean.async")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies when hoodie.clean.automatic is turned on. When turned on runs cleaner async with writing, which can speed up overall write performance.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ASYNC_CLEAN"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleanercommitsretained"},"hoodie.cleaner.commits.retained")),(0,r.yg)("td",{parentName:"tr",align:null},"10"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of commits to retain, without cleaning. This will be retained for num_of_commits * time_between_commits (scheduled). This also directly translates into how much data retention the table supports for incremental queries.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEANER_COMMITS_RETAINED"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Clean-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleanallowmultiple"},"hoodie.clean.allow.multiple")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Allows scheduling/executing multiple cleans by enabling this config. If users prefer to strictly ensure clean requests should be mutually exclusive, .i.e. a 2nd clean will not be scheduled if another clean is not yet completed to avoid repeat cleaning of same files, they might want to disable this config.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ALLOW_MULTIPLE_CLEANS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleanautomatic"},"hoodie.clean.automatic")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"When enabled, the cleaner table service is invoked immediately after each commit, to delete older file slices. It's recommended to enable this, to ensure metadata and data storage growth is bounded.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: AUTO_CLEAN"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleanmaxcommits"},"hoodie.clean.max.commits")),(0,r.yg)("td",{parentName:"tr",align:null},"1"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of commits after the last clean operation, before scheduling of a new clean is attempted.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEAN_MAX_COMMITS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleantriggerstrategy"},"hoodie.clean.trigger.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"NUM_COMMITS"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.table.action.clean.CleaningTriggerStrategy: Controls when cleaning is scheduled.     NUM_COMMITS(default): Trigger the cleaning service every N commits, determined by ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.clean.max.commits"),".",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEAN_TRIGGER_STRATEGY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleanerdeletebootstrapbasefile"},"hoodie.cleaner.delete.bootstrap.base.file")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, cleaner also deletes the bootstrap base file when it's skeleton base file is  cleaned. Turn this to true, if you want to ensure the bootstrap dataset storage is reclaimed over time, as the table receives updates/deletes. Another reason to turn this on, would be to ensure data residing in bootstrap  base files are also physically deleted, to comply with data privacy enforcement processes.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEANER_BOOTSTRAP_BASE_FILE_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleanerfileversionsretained"},"hoodie.cleaner.fileversions.retained")),(0,r.yg)("td",{parentName:"tr",align:null},"3"),(0,r.yg)("td",{parentName:"tr",align:null},"When KEEP_LATEST_FILE_VERSIONS cleaning policy is used,  the minimum number of file slices to retain in each file group, during cleaning.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEANER_FILE_VERSIONS_RETAINED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleanerhoursretained"},"hoodie.cleaner.hours.retained")),(0,r.yg)("td",{parentName:"tr",align:null},"24"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of hours for which commits need to be retained. This config provides a more flexible option ascompared to number of commits retained for cleaning service. Setting this property ensures all the files, but the latest in a file group, corresponding to commits with commit times older than the configured number of hours to be retained are cleaned.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEANER_HOURS_RETAINED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleanerincrementalmode"},"hoodie.cleaner.incremental.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"When enabled, the plans for each cleaner service run is computed incrementally off the events  in the timeline, since the last cleaner run. This is much more efficient than obtaining listings for the full table for each planning (even with a metadata table).",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEANER_INCREMENTAL_MODE_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleanerparallelism"},"hoodie.cleaner.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"200"),(0,r.yg)("td",{parentName:"tr",align:null},"This config controls the behavior of both the cleaning plan and cleaning execution. Deriving the cleaning plan is parallelized at the table partition level, i.e., each table partition is processed by one Spark task to figure out the files to clean. The cleaner picks the configured parallelism if the number of table partitions is larger than this configured value. The parallelism is assigned to the number of table partitions if it is smaller than the configured value. The clean execution, i.e., the file deletion, is parallelized at file level, which is the unit of Spark task distribution. Similarly, the actual parallelism cannot exceed the configured value if the number of files is larger. If cleaning plan or execution is slow due to limited parallelism, you can increase this to tune the performance..",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEANER_PARALLELISM_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleanerpolicy"},"hoodie.cleaner.policy")),(0,r.yg)("td",{parentName:"tr",align:null},"KEEP_LATEST_COMMITS"),(0,r.yg)("td",{parentName:"tr",align:null},'org.apache.hudi.common.model.HoodieCleaningPolicy: Cleaning policy to be used. The cleaner service deletes older file slices files to re-claim space. Long running query plans may often refer to older file slices and will break if those are cleaned, before the query has had a chance to run. So, it is good to make sure that the data is retained for more than the maximum query execution time. By default, the cleaning policy is determined based on one of the following configs explicitly set by the user (at most one of them can be set; otherwise, KEEP_LATEST_COMMITS cleaning policy is used).     KEEP_LATEST_FILE_VERSIONS: keeps the last N versions of the file slices written; used when "hoodie.cleaner.fileversions.retained" is explicitly set only.     KEEP_LATEST_COMMITS(default): keeps the file slices written by the last N commits; used when "hoodie.cleaner.commits.retained" is explicitly set only.     KEEP_LATEST_BY_HOURS: keeps the file slices written in the last N hours based on the commit time; used when "hoodie.cleaner.hours.retained" is explicitly set only.',(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLEANER_POLICY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecleanerpolicyfailedwrites"},"hoodie.cleaner.policy.failed.writes")),(0,r.yg)("td",{parentName:"tr",align:null},"EAGER"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.model.HoodieFailedWritesCleaningPolicy: Policy that controls how to clean up failed writes. Hudi will delete any files written by failed writes to re-claim space.     EAGER(default): Clean failed writes inline after every write operation.     LAZY: Clean failed writes lazily after heartbeat timeout when the cleaning service runs. This policy is required when multi-writers are enabled.     NEVER: Never clean failed writes.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FAILED_WRITES_CLEANER_POLICY"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Clustering-Configs"},"Clustering Configs"),(0,r.yg)("p",null,"Configurations that control the clustering table service in hudi, which optimizes the storage layout for better query performance by sorting and sizing data files."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Clustering-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringasyncenabled"},"hoodie.clustering.async.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable running of clustering service, asynchronously as inserts happen on the table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ASYNC_CLUSTERING_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringinline"},"hoodie.clustering.inline")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Turn on inline clustering - clustering will be run after each write operation is complete",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INLINE_CLUSTERING"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategysmallfilelimit"},"hoodie.clustering.plan.strategy.small.file.limit")),(0,r.yg)("td",{parentName:"tr",align:null},"314572800"),(0,r.yg)("td",{parentName:"tr",align:null},"Files smaller than the size in bytes specified here are candidates for clustering",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PLAN_STRATEGY_SMALL_FILE_LIMIT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategytargetfilemaxbytes"},"hoodie.clustering.plan.strategy.target.file.max.bytes")),(0,r.yg)("td",{parentName:"tr",align:null},"1073741824"),(0,r.yg)("td",{parentName:"tr",align:null},"Each group can produce 'N' (CLUSTERING_MAX_GROUP_SIZE/CLUSTERING_TARGET_FILE_SIZE) output file groups",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PLAN_STRATEGY_TARGET_FILE_MAX_BYTES"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Clustering-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategyclusterbeginpartition"},"hoodie.clustering.plan.strategy.cluster.begin.partition")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Begin partition used to filter partition (inclusive), only effective when the filter mode 'hoodie.clustering.plan.partition.filter.mode' is SELECTED_PARTITIONS",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITION_FILTER_BEGIN_PARTITION"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategyclusterendpartition"},"hoodie.clustering.plan.strategy.cluster.end.partition")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"End partition used to filter partition (inclusive), only effective when the filter mode 'hoodie.clustering.plan.partition.filter.mode' is SELECTED_PARTITIONS",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITION_FILTER_END_PARTITION"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategypartitionregexpattern"},"hoodie.clustering.plan.strategy.partition.regex.pattern")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Filter clustering partitions that matched regex pattern",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITION_REGEX_PATTERN"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategypartitionselected"},"hoodie.clustering.plan.strategy.partition.selected")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Partitions to run clustering",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITION_SELECTED"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategysortcolumns"},"hoodie.clustering.plan.strategy.sort.columns")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Columns to sort the data by when clustering",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PLAN_STRATEGY_SORT_COLUMNS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringasyncmaxcommits"},"hoodie.clustering.async.max.commits")),(0,r.yg)("td",{parentName:"tr",align:null},"4"),(0,r.yg)("td",{parentName:"tr",align:null},"Config to control frequency of async clustering",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ASYNC_CLUSTERING_MAX_COMMITS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.9.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringexecutionstrategyclass"},"hoodie.clustering.execution.strategy.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.client.clustering.run.strategy.SparkSortAndSizeExecutionStrategy"),(0,r.yg)("td",{parentName:"tr",align:null},"Config to provide a strategy class (subclass of RunClusteringStrategy) to define how the  clustering plan is executed. By default, we sort the file groups in th plan by the specified columns, while  meeting the configured target file sizes.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EXECUTION_STRATEGY_CLASS_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringinlinemaxcommits"},"hoodie.clustering.inline.max.commits")),(0,r.yg)("td",{parentName:"tr",align:null},"4"),(0,r.yg)("td",{parentName:"tr",align:null},"Config to control frequency of clustering planning",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INLINE_CLUSTERING_MAX_COMMITS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringmaxparallelism"},"hoodie.clustering.max.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"15"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of parallelism jobs submitted in clustering operation. If the resource is sufficient(Like Spark engine has enough idle executors), increasing this value will let the clustering job run faster, while it will give additional pressure to the execution engines to manage more concurrent running jobs.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLUSTERING_MAX_PARALLELISM"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanpartitionfiltermode"},"hoodie.clustering.plan.partition.filter.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"NONE"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.table.action.cluster.ClusteringPlanPartitionFilterMode: Partition filter mode used in the creation of clustering plan.     NONE(default): Do not filter partitions. The clustering plan will include all partitions that have clustering candidates.     RECENT_DAYS: This filter assumes that your data is partitioned by date. The clustering plan will only include partitions from K days ago to N days ago, where K ",">","= N. K is determined by ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.clustering.plan.strategy.daybased.lookback.partitions")," and N is determined by ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.clustering.plan.strategy.daybased.skipfromlatest.partitions"),".     SELECTED_PARTITIONS: The clustering plan will include only partition paths with names that sort within the inclusive range ","[",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.clustering.plan.strategy.cluster.begin.partition"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.clustering.plan.strategy.cluster.end.partition"),"]",".     DAY_ROLLING: To determine the partitions in the clustering plan, the eligible partitions will be sorted in ascending order. Each partition will have an index i in that list. The clustering plan will only contain partitions such that i mod 24 = H, where H is the current hour of the day (from 0 to 23).",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PLAN_PARTITION_FILTER_MODE_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategyclass"},"hoodie.clustering.plan.strategy.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.client.clustering.plan.strategy.SparkSizeBasedClusteringPlanStrategy"),(0,r.yg)("td",{parentName:"tr",align:null},"Config to provide a strategy class (subclass of ClusteringPlanStrategy) to create clustering plan i.e select what file groups are being clustered. Default strategy, looks at the clustering small file size limit (determined by hoodie.clustering.plan.strategy.small.file.limit) to pick the small file slices within partitions for clustering.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PLAN_STRATEGY_CLASS_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategydaybasedlookbackpartitions"},"hoodie.clustering.plan.strategy.daybased.lookback.partitions")),(0,r.yg)("td",{parentName:"tr",align:null},"2"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of partitions to list to create ClusteringPlan",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DAYBASED_LOOKBACK_PARTITIONS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategydaybasedskipfromlatestpartitions"},"hoodie.clustering.plan.strategy.daybased.skipfromlatest.partitions")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of partitions to skip from latest when choosing partitions to create ClusteringPlan",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PLAN_STRATEGY_SKIP_PARTITIONS_FROM_LATEST"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.9.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategymaxbytespergroup"},"hoodie.clustering.plan.strategy.max.bytes.per.group")),(0,r.yg)("td",{parentName:"tr",align:null},"2147483648"),(0,r.yg)("td",{parentName:"tr",align:null},"Each clustering operation can create multiple output file groups. Total amount of data processed by clustering operation is defined by below two properties (CLUSTERING_MAX_BYTES_PER_GROUP * CLUSTERING_MAX_NUM_GROUPS). Max amount of data to be included in one group",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PLAN_STRATEGY_MAX_BYTES_PER_OUTPUT_FILEGROUP"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategymaxnumgroups"},"hoodie.clustering.plan.strategy.max.num.groups")),(0,r.yg)("td",{parentName:"tr",align:null},"30"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of groups to create as part of ClusteringPlan. Increasing groups will increase parallelism",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PLAN_STRATEGY_MAX_GROUPS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringplanstrategysinglegroupclusteringenabled"},"hoodie.clustering.plan.strategy.single.group.clustering.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to generate clustering plan when there is only one file group involved, by default true",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PLAN_STRATEGY_SINGLE_GROUP_CLUSTERING_ENABLED"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringrollbackpendingreplacecommitonconflict"},"hoodie.clustering.rollback.pending.replacecommit.on.conflict")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If updates are allowed to file groups pending clustering, then set this config to rollback failed or pending clustering instants. Pending clustering will be rolled back ONLY IF there is conflict between incoming upsert and filegroup to be clustered. Please exercise caution while setting this config, especially when clustering is done very frequently. This could lead to race condition in rare scenarios, for example, when the clustering completes after instants are fetched but before rollback completed.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ROLLBACK_PENDING_CLUSTERING_ON_CONFLICT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringscheduleinline"},"hoodie.clustering.schedule.inline")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, clustering service will be attempted for inline scheduling after each write. Users have to ensure they have a separate job to run async clustering(execution) for the one scheduled by this writer. Users can choose to set both ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.clustering.inline")," and ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.clustering.schedule.inline")," to false and have both scheduling and execution triggered by any async process, on which case ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.clustering.async.enabled")," is expected to be set to true. But if ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.clustering.inline")," is set to false, and ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.clustering.schedule.inline")," is set to true, regular writers will schedule clustering inline, but users are expected to trigger async job for execution. If ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.clustering.inline")," is set to true, regular writers will do both scheduling and execution inline for clustering",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEDULE_INLINE_CLUSTERING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclusteringupdatesstrategy"},"hoodie.clustering.updates.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.client.clustering.update.strategy.SparkRejectUpdateStrategy"),(0,r.yg)("td",{parentName:"tr",align:null},"Determines how to handle updates, deletes to file groups that are under clustering. Default strategy just rejects the update",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: UPDATES_STRATEGY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodielayoutoptimizebuildcurvesamplesize"},"hoodie.layout.optimize.build.curve.sample.size")),(0,r.yg)("td",{parentName:"tr",align:null},"200000"),(0,r.yg)("td",{parentName:"tr",align:null},"Determines target sample size used by the Boundary-based Interleaved Index method of building space-filling curve. Larger sample size entails better layout optimization outcomes, at the expense of higher memory footprint.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LAYOUT_OPTIMIZE_BUILD_CURVE_SAMPLE_SIZE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodielayoutoptimizecurvebuildmethod"},"hoodie.layout.optimize.curve.build.method")),(0,r.yg)("td",{parentName:"tr",align:null},"DIRECT"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.config.HoodieClusteringConfig$SpatialCurveCompositionStrategyType: This configuration only has effect if ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.layout.optimize.strategy"),' is set to either "z-order" or "hilbert" (i.e. leveraging space-filling curves). This configuration controls the type of a strategy to use for building the space-filling curves, tackling specifically how the Strings are ordered based on the curve. Since we truncate the String to 8 bytes for ordering, there are two issues: (1) it can lead to poor aggregation effect, (2) the truncation of String longer than 8 bytes loses the precision, if the Strings are different but the 8-byte prefix is the same. The boundary-based interleaved index method ("SAMPLE") has better generalization, solving the two problems above, but is slower than direct method ("DIRECT"). User should benchmark the write and query performance before tweaking this in production, if this is actually a problem. Please refer to RFC-28 for more details.     DIRECT(default): This strategy builds the spatial curve in full, filling in all of the individual points corresponding to each individual record, which requires less compute.     SAMPLE: This strategy leverages boundary-base interleaved index method (described in more details in Amazon DynamoDB blog ',(0,r.yg)("a",{parentName:"td",href:"https://aws.amazon.com/cn/blogs/database/tag/z-order/"},"https://aws.amazon.com/cn/blogs/database/tag/z-order/"),") and produces a better layout compared to DIRECT strategy.  It requires more compute and is slower.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LAYOUT_OPTIMIZE_SPATIAL_CURVE_BUILD_METHOD"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodielayoutoptimizedataskippingenable"},"hoodie.layout.optimize.data.skipping.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable data skipping by collecting statistics once layout optimization is complete.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LAYOUT_OPTIMIZE_DATA_SKIPPING_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Deprecated since: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodielayoutoptimizeenable"},"hoodie.layout.optimize.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"This setting has no effect. Please refer to clustering configuration, as well as LAYOUT_OPTIMIZE_STRATEGY config to enable advanced record layout optimization strategies",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LAYOUT_OPTIMIZE_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Deprecated since: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodielayoutoptimizestrategy"},"hoodie.layout.optimize.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"LINEAR"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.config.HoodieClusteringConfig$LayoutOptimizationStrategy: Determines ordering strategy for records layout optimization.     LINEAR(default): Orders records lexicographically     ZORDER: Orders records along Z-order spatial-curve.     HILBERT: Orders records along Hilbert's spatial-curve.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LAYOUT_OPTIMIZE_STRATEGY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Compaction-Configs"},"Compaction Configs"),(0,r.yg)("p",null,"Configurations that control compaction (merging of log files onto a new base files)."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Compaction-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactinline"},"hoodie.compact.inline")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, compaction service is triggered after each write. While being  simpler operationally, this adds extra latency on the write path.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INLINE_COMPACT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactinlinemaxdeltacommits"},"hoodie.compact.inline.max.delta.commits")),(0,r.yg)("td",{parentName:"tr",align:null},"5"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of delta commits after the last compaction, before scheduling of a new compaction is attempted. This config takes effect only for the compaction triggering strategy based on the number of commits, i.e., NUM_COMMITS, NUM_COMMITS_AFTER_LAST_REQUEST, NUM_AND_TIME, and NUM_OR_TIME.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INLINE_COMPACT_NUM_DELTA_COMMITS"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Compaction-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactinlinemaxdeltaseconds"},"hoodie.compact.inline.max.delta.seconds")),(0,r.yg)("td",{parentName:"tr",align:null},"3600"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of elapsed seconds after the last compaction, before scheduling a new one. This config takes effect only for the compaction triggering strategy based on the elapsed time, i.e., TIME_ELAPSED, NUM_AND_TIME, and NUM_OR_TIME.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INLINE_COMPACT_TIME_DELTA_SECONDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactinlinetriggerstrategy"},"hoodie.compact.inline.trigger.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"NUM_COMMITS"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.table.action.compact.CompactionTriggerStrategy: Controls when compaction is scheduled.     NUM_COMMITS(default): triggers compaction when there are at least N delta commits after last completed compaction.     NUM_COMMITS_AFTER_LAST_REQUEST: triggers compaction when there are at least N delta commits after last completed or requested compaction.     TIME_ELAPSED: triggers compaction after N seconds since last compaction.     NUM_AND_TIME: triggers compaction when both there are at least N delta commits and N seconds elapsed (both must be satisfied) after last completed compaction.     NUM_OR_TIME: triggers compaction when both there are at least N delta commits or N seconds elapsed (either condition is satisfied) after last completed compaction.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INLINE_COMPACT_TRIGGER_STRATEGY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactscheduleinline"},"hoodie.compact.schedule.inline")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, compaction service will be attempted for inline scheduling after each write. Users have to ensure they have a separate job to run async compaction(execution) for the one scheduled by this writer. Users can choose to set both ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.compact.inline")," and ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.compact.schedule.inline")," to false and have both scheduling and execution triggered by any async process. But if ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.compact.inline")," is set to false, and ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.compact.schedule.inline")," is set to true, regular writers will schedule compaction inline, but users are expected to trigger async job for execution. If ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.compact.inline")," is set to true, regular writers will do both scheduling and execution inline for compaction",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEDULE_INLINE_COMPACT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactiondaybasedtargetpartitions"},"hoodie.compaction.daybased.target.partitions")),(0,r.yg)("td",{parentName:"tr",align:null},"10"),(0,r.yg)("td",{parentName:"tr",align:null},"Used by org.apache.hudi.io.compact.strategy.DayBasedCompactionStrategy to denote the number of latest partitions to compact during a compaction run.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TARGET_PARTITIONS_PER_DAYBASED_COMPACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactionlazyblockread"},"hoodie.compaction.lazy.block.read")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"When merging the delta log files, this config helps to choose whether the log blocks should be read lazily or not. Choose true to use lazy block reading (low memory usage, but incurs seeks to each block header) or false for immediate block read (higher memory usage)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_LAZY_BLOCK_READ_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactionlogfilenumthreshold"},"hoodie.compaction.logfile.num.threshold")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Only if the log file num is greater than the threshold, the file group will be compacted.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_LOG_FILE_NUM_THRESHOLD"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactionlogfilesizethreshold"},"hoodie.compaction.logfile.size.threshold")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Only if the log file size is greater than the threshold in bytes, the file group will be compacted.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_LOG_FILE_SIZE_THRESHOLD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactionreverselogread"},"hoodie.compaction.reverse.log.read")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"HoodieLogFormatReader reads a logfile in the forward direction starting from pos=0 to pos=file_length. If this config is set to true, the reader reads the logfile in reverse direction, from pos=file_length to pos=0",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_REVERSE_LOG_READ_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactionstrategy"},"hoodie.compaction.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.table.action.compact.strategy.LogFileSizeBasedCompactionStrategy"),(0,r.yg)("td",{parentName:"tr",align:null},"Compaction strategy decides which file groups are picked up for compaction during each compaction run. By default. Hudi picks the log file with most accumulated unmerged data",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPACTION_STRATEGY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactiontargetio"},"hoodie.compaction.target.io")),(0,r.yg)("td",{parentName:"tr",align:null},"512000"),(0,r.yg)("td",{parentName:"tr",align:null},"Amount of MBs to spend during compaction run for the LogFileSizeBasedCompactionStrategy. This value helps bound ingestion latency while compaction is run inline mode.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TARGET_IO_PER_COMPACTION_IN_MB"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecopyonwriteinsertautosplit"},"hoodie.copyonwrite.insert.auto.split")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Config to control whether we control insert split sizes automatically based on average record sizes. It's recommended to keep this turned on, since hand tuning is otherwise extremely cumbersome.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COPY_ON_WRITE_AUTO_SPLIT_INSERTS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecopyonwriteinsertsplitsize"},"hoodie.copyonwrite.insert.split.size")),(0,r.yg)("td",{parentName:"tr",align:null},"500000"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of inserts assigned for each partition/bucket for writing. We based the default on writing out 100MB files, with at least 1kb records (100K records per file), and   over provision to 500K. As long as auto-tuning of splits is turned on, this only affects the first   write, where there is no history to learn record sizes from.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COPY_ON_WRITE_INSERT_SPLIT_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecopyonwriterecordsizeestimate"},"hoodie.copyonwrite.record.size.estimate")),(0,r.yg)("td",{parentName:"tr",align:null},"1024"),(0,r.yg)("td",{parentName:"tr",align:null},"The average record size. If not explicitly specified, hudi will compute the record size estimate compute dynamically based on commit metadata.  This is critical in computing the insert parallelism and bin-packing inserts into small files.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COPY_ON_WRITE_RECORD_SIZE_ESTIMATE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodielogcompactionblocksthreshold"},"hoodie.log.compaction.blocks.threshold")),(0,r.yg)("td",{parentName:"tr",align:null},"5"),(0,r.yg)("td",{parentName:"tr",align:null},"Log compaction can be scheduled if the no. of log blocks crosses this threshold value. This is effective only when log compaction is enabled via hoodie.log.compaction.inline",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOG_COMPACTION_BLOCKS_THRESHOLD"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodielogcompactionenable"},"hoodie.log.compaction.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"By enabling log compaction through this config, log compaction will also get enabled for the metadata table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_LOG_COMPACTION"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodielogcompactioninline"},"hoodie.log.compaction.inline")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, logcompaction service is triggered after each write. While being  simpler operationally, this adds extra latency on the write path.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INLINE_LOG_COMPACT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieoptimizedlogblocksscanenable"},"hoodie.optimized.log.blocks.scan.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"New optimized scan for log blocks that handles all multi-writer use-cases while appending to log files. It also differentiates original blocks written by ingestion writers and compacted blocks written log compaction.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_OPTIMIZED_LOG_BLOCKS_SCAN"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieparquetsmallfilelimit"},"hoodie.parquet.small.file.limit")),(0,r.yg)("td",{parentName:"tr",align:null},"104857600"),(0,r.yg)("td",{parentName:"tr",align:null},"During upsert operation, we opportunistically expand existing small files on storage, instead of writing new files, to keep number of files to an optimum. This config sets the file size limit below which a file on storage  becomes a candidate to be selected as such a ",(0,r.yg)("inlineCode",{parentName:"td"},"small file"),". By default, treat any file ","<","= 100MB as a small file. Also note that if this set ","<","= 0, will not try to get small files and directly write new files",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARQUET_SMALL_FILE_LIMIT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodierecordsizeestimationthreshold"},"hoodie.record.size.estimation.threshold")),(0,r.yg)("td",{parentName:"tr",align:null},"1.0"),(0,r.yg)("td",{parentName:"tr",align:null},"We use the previous commits' metadata to calculate the estimated record size and use it  to bin pack records into partitions. If the previous commit is too small to make an accurate estimation,  Hudi will search commits in the reverse order, until we find a commit that has totalBytesWritten  larger than (PARQUET_SMALL_FILE_LIMIT_BYTES * this_threshold)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_SIZE_ESTIMATION_THRESHOLD"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Layout-Configs"},"Layout Configs"),(0,r.yg)("p",null,"Configurations that control storage layout and data distribution, which defines how the files are organized within a table."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Layout-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestoragelayoutpartitionerclass"},"hoodie.storage.layout.partitioner.class")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Partitioner class, it is used to distribute data in a specific way.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LAYOUT_PARTITIONER_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestoragelayouttype"},"hoodie.storage.layout.type")),(0,r.yg)("td",{parentName:"tr",align:null},"DEFAULT"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.table.storage.HoodieStorageLayout$LayoutType: Determines how the files are organized within a table.     DEFAULT(default): Each file group contains records of a certain set of keys, without particular grouping criteria.     BUCKET: Each file group contains records of a set of keys which map to a certain range of hash values, so that using the hash function can easily identify the file group a record belongs to, based on the record key.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LAYOUT_TYPE"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Memory-Configurations"},"Memory Configurations"),(0,r.yg)("p",null,"Controls memory usage for compaction and merges, performed internally by Hudi."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Memory-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiememorycompactionmaxsize"},"hoodie.memory.compaction.max.size")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum amount of memory used  in bytes for compaction operations in bytes , before spilling to local storage.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_MEMORY_FOR_COMPACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiememoryspillablemappath"},"hoodie.memory.spillable.map.path")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Default file path for spillable map",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPILLABLE_MAP_BASE_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiememorycompactionfraction"},"hoodie.memory.compaction.fraction")),(0,r.yg)("td",{parentName:"tr",align:null},"0.6"),(0,r.yg)("td",{parentName:"tr",align:null},"HoodieCompactedLogScanner reads logblocks, converts records to HoodieRecords and then merges these log blocks and records. At any point, the number of entries in a log block can be less than or equal to the number of entries in the corresponding parquet file. This can lead to OOM in the Scanner. Hence, a spillable map helps alleviate the memory pressure. Use this config to set the max allowable inMemory footprint of the spillable map",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_MEMORY_FRACTION_FOR_COMPACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiememorydfsbuffermaxsize"},"hoodie.memory.dfs.buffer.max.size")),(0,r.yg)("td",{parentName:"tr",align:null},"16777216"),(0,r.yg)("td",{parentName:"tr",align:null},"Property to control the max memory in bytes for dfs input stream buffer size",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_DFS_STREAM_BUFFER_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiememorymergefraction"},"hoodie.memory.merge.fraction")),(0,r.yg)("td",{parentName:"tr",align:null},"0.6"),(0,r.yg)("td",{parentName:"tr",align:null},"This fraction is multiplied with the user memory fraction (1 - spark.memory.fraction) to get a final fraction of heap space to use during merge",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_MEMORY_FRACTION_FOR_MERGE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiememorymergemaxsize"},"hoodie.memory.merge.max.size")),(0,r.yg)("td",{parentName:"tr",align:null},"1073741824"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum amount of memory used  in bytes for merge operations, before spilling to local storage.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_MEMORY_FOR_MERGE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiememorywritestatusfailurefraction"},"hoodie.memory.writestatus.failure.fraction")),(0,r.yg)("td",{parentName:"tr",align:null},"0.1"),(0,r.yg)("td",{parentName:"tr",align:null},"Property to control how what fraction of the failed record, exceptions we report back to driver. Default is 10%. If set to 100%, with lot of failures, this can cause memory pressure, cause OOMs and mask actual data errors.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITESTATUS_FAILURE_FRACTION"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Write-Configurations"},"Write Configurations"),(0,r.yg)("p",null,"Configurations that control write behavior on Hudi tables. These can be directly passed down from even higher level frameworks (e.g Spark datasources, Flink sink) and utilities (e.g Hudi Streamer)."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Write-Configurations-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebasepath"},"hoodie.base.path")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Base path on lake storage, under which all the table data is stored. Always prefix it explicitly with the storage scheme (e.g hdfs://, s3:// etc). Hudi stores all the main meta-data about commits, savepoints, cleaning audit logs etc in .hoodie directory under this base path directory.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BASE_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodietablename"},"hoodie.table.name")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Table name that will be used for registering with metastores like HMS. Needs to be same across runs.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TBL_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriteprecombinefield"},"hoodie.datasource.write.precombine.field")),(0,r.yg)("td",{parentName:"tr",align:null},"ts"),(0,r.yg)("td",{parentName:"tr",align:null},"Field used in preCombining before actual write. When two records have the same key value, we will pick the one with the largest value for the precombine field, determined by Object.compareTo(..)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PRECOMBINE_FIELD_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewriteconcurrencymode"},"hoodie.write.concurrency.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"SINGLE_WRITER"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.model.WriteConcurrencyMode: Concurrency modes for write operations.     SINGLE_WRITER(default): Only one active writer to the table. Maximizes throughput.     OPTIMISTIC_CONCURRENCY_CONTROL: Multiple writers can operate on the table with lazy conflict resolution using locks. This means that only one writer succeeds if multiple writers write to the same file group.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_CONCURRENCY_MODE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritenumretriesonconflictfailures"},"hoodie.write.num.retries.on.conflict.failures")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of times to retry a batch on conflict failure.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: NUM_RETRIES_ON_CONFLICT_FAILURES"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Write-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieavroschema"},"hoodie.avro.schema")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Schema string representing the current write schema of the table. Hudi passes this to implementations of HoodieRecordPayload to convert incoming records to avro. This is also used as the write schema evolving records during an update.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: AVRO_SCHEMA_STRING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebulkinsertuserdefinedpartitionerclass"},"hoodie.bulkinsert.user.defined.partitioner.class")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"If specified, this class will be used to re-partition records before they are bulk inserted. This can be used to sort, pack, cluster data optimally for common query patterns. For now we support a build-in user defined bulkinsert partitioner org.apache.hudi.execution.bulkinsert.RDDCustomColumnsSortPartitioner which can does sorting based on specified column values set by hoodie.bulkinsert.user.defined.partitioner.sort.columns",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BULKINSERT_USER_DEFINED_PARTITIONER_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebulkinsertuserdefinedpartitionersortcolumns"},"hoodie.bulkinsert.user.defined.partitioner.sort.columns")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Columns to sort the data by when use org.apache.hudi.execution.bulkinsert.RDDCustomColumnsSortPartitioner as user defined partitioner during bulk_insert. For example 'column1,column2'",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BULKINSERT_USER_DEFINED_PARTITIONER_SORT_COLUMNS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritekeygeneratorclass"},"hoodie.datasource.write.keygenerator.class")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Key generator class, that implements ",(0,r.yg)("inlineCode",{parentName:"td"},"org.apache.hudi.keygen.KeyGenerator")," extract a key out of incoming records.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KEYGENERATOR_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieinternalschema"},"hoodie.internal.schema")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Schema string representing the latest schema of the table. Hudi passes this to implementations of evolution of schema",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INTERNAL_SCHEMA_STRING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewriteschema"},"hoodie.write.schema")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Config allowing to override writer's schema. This might be necessary in cases when writer's schema derived from the incoming dataset might actually be different from the schema we actually want to use when writing. This, for ex, could be the case for'partial-update' use-cases (like ",(0,r.yg)("inlineCode",{parentName:"td"},"MERGE INTO")," Spark SQL statement for ex) where only a projection of the incoming dataset might be used to update the records in the existing table, prompting us to override the writer's schema",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_SCHEMA_OVERRIDE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#_hoodieallowmultiwriteonsameinstant"},"_.hoodie.allow.multi.write.on.same.instant")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ALLOW_MULTI_WRITE_ON_SAME_INSTANT_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieallowemptycommit"},"hoodie.allow.empty.commit")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to allow generation of empty commits, even if no data was written in the commit. It's useful in cases where extra metadata needs to be published regardless e.g tracking source offsets when ingesting data",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ALLOW_EMPTY_COMMIT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieallowoperationmetadatafield"},"hoodie.allow.operation.metadata.field")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to include '_hoodie_operation' in the metadata fields. Once enabled, all the changes of a record are persisted to the delta log directly without merge",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ALLOW_OPERATION_METADATA_FIELD"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.9.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieautoadjustlockconfigs"},"hoodie.auto.adjust.lock.configs")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Auto adjust lock configurations when metadata table is enabled and for async table services.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: AUTO_ADJUST_LOCK_CONFIGS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieautocommit"},"hoodie.auto.commit")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls whether a write operation should auto commit. This can be turned off to perform inspection of the uncommitted write before deciding to commit.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: AUTO_COMMIT_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieavroschemaexternaltransformation"},"hoodie.avro.schema.external.transformation")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When enabled, records in older schema are rewritten into newer schema during upsert,delete and background compaction,clustering operations.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: AVRO_EXTERNAL_SCHEMA_TRANSFORMATION_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieavroschemavalidate"},"hoodie.avro.schema.validate")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Validate the schema used for the write against the latest schema, for backwards compatibility.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: AVRO_SCHEMA_VALIDATE_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebulkinsertshuffleparallelism"},"hoodie.bulkinsert.shuffle.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"For large initial imports using bulk_insert operation, controls the parallelism to use for sort modes or custom partitioning done before writing records to the table. Before 0.13.0 release, if users do not configure it, Hudi would use 200 as the default shuffle parallelism. From 0.13.0 onwards Hudi by default automatically uses the parallelism deduced by Spark based on the source data or the parallelism based on the logical plan for row writer. If the shuffle parallelism is explicitly configured by the user, the user-configured parallelism is used in defining the actual parallelism. If you observe small files from the bulk insert operation, we suggest configuring this shuffle parallelism explicitly, so that the parallelism is around total_input_data_size/120MB.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BULKINSERT_PARALLELISM_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebulkinsertsortmode"},"hoodie.bulkinsert.sort.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"NONE"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.execution.bulkinsert.BulkInsertSortMode: Modes for sorting records during bulk insert.     NONE(default): No sorting. Fastest and matches ",(0,r.yg)("inlineCode",{parentName:"td"},"spark.write.parquet()")," in number of files and overhead.     GLOBAL_SORT: This ensures best file sizes, with lowest memory overhead at cost of sorting.     PARTITION_SORT: Strikes a balance by only sorting within a Spark RDD partition, still keeping the memory overhead of writing low. File sizing is not as good as GLOBAL_SORT.     PARTITION_PATH_REPARTITION: This ensures that the data for a single physical partition in the table is written by the same Spark executor. This should only be used when input data is evenly distributed across different partition paths. If data is skewed (most records are intended for a handful of partition paths among all) then this can cause an imbalance among Spark executors.     PARTITION_PATH_REPARTITION_AND_SORT: This ensures that the data for a single physical partition in the table is written by the same Spark executor. This should only be used when input data is evenly distributed across different partition paths. Compared to PARTITION_PATH_REPARTITION, this sort mode does an additional step of sorting the records based on the partition path within a single Spark partition, given that data for multiple physical partitions can be sent to the same Spark partition and executor. If data is skewed (most records are intended for a handful of partition paths among all) then this can cause an imbalance among Spark executors.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BULK_INSERT_SORT_MODE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclientheartbeatinterval_in_ms"},"hoodie.client.heartbeat.interval_in_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"60000"),(0,r.yg)("td",{parentName:"tr",align:null},"Writers perform heartbeats to indicate liveness. Controls how often (in ms), such heartbeats are registered to lake storage.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLIENT_HEARTBEAT_INTERVAL_IN_MS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclientheartbeattolerablemisses"},"hoodie.client.heartbeat.tolerable.misses")),(0,r.yg)("td",{parentName:"tr",align:null},"2"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of heartbeat misses, before a writer is deemed not alive and all pending writes are aborted.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLIENT_HEARTBEAT_NUM_TOLERABLE_MISSES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieclientinitcallbackclasses"},"hoodie.client.init.callback.classes")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Fully-qualified class names of the Hudi client init callbacks to run at the initialization of the Hudi client.  The class names are separated by ",(0,r.yg)("inlineCode",{parentName:"td"},","),". The class must be a subclass of ",(0,r.yg)("inlineCode",{parentName:"td"},"org.apache.hudi.callback.HoodieClientInitCallback"),".By default, no Hudi client init callback is executed.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLIENT_INIT_CALLBACK_CLASS_NAMES"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecombinebeforedelete"},"hoodie.combine.before.delete")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"During delete operations, controls whether we should combine deletes (and potentially also upserts) before  writing to storage.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMBINE_BEFORE_DELETE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecombinebeforeinsert"},"hoodie.combine.before.insert")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When inserted records share same key, controls whether they should be first combined (i.e de-duplicated) before writing to storage.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMBINE_BEFORE_INSERT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecombinebeforeupsert"},"hoodie.combine.before.upsert")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"When upserted records share same key, controls whether they should be first combined (i.e de-duplicated) before writing to storage. This should be turned off only if you are absolutely certain that there are no duplicates incoming,  otherwise it can lead to duplicate keys and violate the uniqueness guarantees.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMBINE_BEFORE_UPSERT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieconsistencycheckinitial_interval_ms"},"hoodie.consistency.check.initial_interval_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"2000"),(0,r.yg)("td",{parentName:"tr",align:null},"Initial time between successive attempts to ensure written data's metadata is consistent on storage. Grows with exponential backoff after the initial value.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INITIAL_CONSISTENCY_CHECK_INTERVAL_MS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieconsistencycheckmax_checks"},"hoodie.consistency.check.max_checks")),(0,r.yg)("td",{parentName:"tr",align:null},"7"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of checks, for consistency of written data.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_CONSISTENCY_CHECKS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieconsistencycheckmax_interval_ms"},"hoodie.consistency.check.max_interval_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"300000"),(0,r.yg)("td",{parentName:"tr",align:null},"Max time to wait between successive attempts at performing consistency checks",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_CONSISTENCY_CHECK_INTERVAL_MS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritekeygeneratortype"},"hoodie.datasource.write.keygenerator.type")),(0,r.yg)("td",{parentName:"tr",align:null},"SIMPLE"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("strong",{parentName:"td"},"Note")," This is being actively worked on. Please use ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.datasource.write.keygenerator.class")," instead. org.apache.hudi.keygen.constant.KeyGeneratorType: Key generator type, indicating the key generator class to use, that implements ",(0,r.yg)("inlineCode",{parentName:"td"},"org.apache.hudi.keygen.KeyGenerator"),'.     SIMPLE(default): Simple key generator, which takes names of fields to be used for recordKey and partitionPath as configs.     COMPLEX: Complex key generator, which takes names of fields to be used for recordKey and partitionPath as configs.     TIMESTAMP: Timestamp-based key generator, that relies on timestamps for partitioning field. Still picks record key by name.     CUSTOM: This is a generic implementation type of KeyGenerator where users can configure record key as a single field or  a combination of fields. Similarly partition path can be configured to have multiple fields or only one field.  This KeyGenerator expects value for prop "hoodie.datasource.write.partitionpath.field" in a specific format.  For example:  properties.put("hoodie.datasource.write.partitionpath.field", "field1:PartitionKeyType1,field2:PartitionKeyType2").     NON_PARTITION: Simple Key generator for non-partitioned tables.     GLOBAL_DELETE: Key generator for deletes using global indices.',(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KEYGENERATOR_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritepayloadclass"},"hoodie.datasource.write.payload.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.model.OverwriteWithLatestAvroPayload"),(0,r.yg)("td",{parentName:"tr",align:null},"Payload class used. Override this, if you like to roll your own merge logic, when upserting/inserting. This will render any value set for PRECOMBINE_FIELD_OPT_VAL in-effective",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_PAYLOAD_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriterecordmergerimpls"},"hoodie.datasource.write.record.merger.impls")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.model.HoodieAvroRecordMerger"),(0,r.yg)("td",{parentName:"tr",align:null},"List of HoodieMerger implementations constituting Hudi's merging strategy -- based on the engine used. These merger impls will filter by hoodie.datasource.write.record.merger.strategy Hudi will pick most efficient implementation to perform merging/combining of the records (during update, reading MOR table, etc)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_MERGER_IMPLS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriterecordmergerstrategy"},"hoodie.datasource.write.record.merger.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"eeb8d96f-b1e4-49fd-bbf8-28ac514178e5"),(0,r.yg)("td",{parentName:"tr",align:null},"Id of merger strategy. Hudi will pick HoodieRecordMerger implementations in hoodie.datasource.write.record.merger.impls which has the same merger strategy id",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_MERGER_STRATEGY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriteschemaallowautoevolutioncolumndrop"},"hoodie.datasource.write.schema.allow.auto.evolution.column.drop")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls whether table's schema is allowed to automatically evolve when incoming batch's schema can have any of the columns dropped. By default, Hudi will not allow this kind of (auto) schema evolution. Set this config to true to allow table's schema to be updated automatically when columns are dropped from the new incoming batch.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_ALLOW_AUTO_EVOLUTION_COLUMN_DROP"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedeleteshuffleparallelism"},"hoodie.delete.shuffle.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism used for delete operation. Delete operations also performs shuffles, similar to upsert operation. Before 0.13.0 release, if users do not configure it, Hudi would use 200 as the default shuffle parallelism. From 0.13.0 onwards Hudi by default automatically uses the parallelism deduced by Spark based on the source data. If the shuffle parallelism is explicitly configured by the user, the user-configured parallelism is used in defining the actual parallelism.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DELETE_PARALLELISM_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieembedtimelineserver"},"hoodie.embed.timeline.server")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"When true, spins up an instance of the timeline server (meta server that serves cached file listings, statistics),running on each writer's driver process, accepting requests during the write from executors.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EMBEDDED_TIMELINE_SERVER_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieembedtimelineserverasync"},"hoodie.embed.timeline.server.async")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls whether or not, the requests to the timeline server are processed in asynchronous fashion, potentially improving throughput.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EMBEDDED_TIMELINE_SERVER_USE_ASYNC_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieembedtimelineservergzip"},"hoodie.embed.timeline.server.gzip")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls whether gzip compression is used, for large responses from the timeline server, to improve latency.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EMBEDDED_TIMELINE_SERVER_COMPRESS_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieembedtimelineserverport"},"hoodie.embed.timeline.server.port")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Port at which the timeline server listens for requests. When running embedded in each writer, it picks a free port and communicates to all the executors. This should rarely be changed.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EMBEDDED_TIMELINE_SERVER_PORT_NUM"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieembedtimelineserverreuseenabled"},"hoodie.embed.timeline.server.reuse.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls whether the timeline server instance should be cached and reused across the tablesto avoid startup costs and server overhead. This should only be used if you are running multiple writers in the same JVM.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EMBEDDED_TIMELINE_SERVER_REUSE_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieembedtimelineserverthreads"},"hoodie.embed.timeline.server.threads")),(0,r.yg)("td",{parentName:"tr",align:null},"-1"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of threads to serve requests in the timeline server. By default, auto configured based on the number of underlying cores.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EMBEDDED_TIMELINE_NUM_SERVER_THREADS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefailontimelinearchiving"},"hoodie.fail.on.timeline.archiving")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Timeline archiving removes older instants from the timeline, after each write operation, to minimize metadata overhead. Controls whether or not, the write should be failed as well, if such archiving fails.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FAIL_ON_TIMELINE_ARCHIVING_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefailwritesoninlinetableserviceexception"},"hoodie.fail.writes.on.inline.table.service.exception")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Table services such as compaction and clustering can fail and prevent syncing to the metaclient. Set this to true to fail writes when table services fail",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FAIL_ON_INLINE_TABLE_SERVICE_EXCEPTION"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefileidprefixproviderclass"},"hoodie.fileid.prefix.provider.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.table.RandomFileIdPrefixProvider"),(0,r.yg)("td",{parentName:"tr",align:null},"File Id Prefix provider class, that implements ",(0,r.yg)("inlineCode",{parentName:"td"},"org.apache.hudi.fileid.FileIdPrefixProvider"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FILEID_PREFIX_PROVIDER_CLASS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiefinalizewriteparallelism"},"hoodie.finalize.write.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"200"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism for the write finalization internal operation, which involves removing any partially written files from lake storage, before committing the write. Reduce this value, if the high number of tasks incur delays for smaller tables or low latency writes.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FINALIZE_WRITE_PARALLELISM_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieinsertshuffleparallelism"},"hoodie.insert.shuffle.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism for inserting records into the table. Inserts can shuffle data before writing to tune file sizes and optimize the storage layout. Before 0.13.0 release, if users do not configure it, Hudi would use 200 as the default shuffle parallelism. From 0.13.0 onwards Hudi by default automatically uses the parallelism deduced by Spark based on the source data. If the shuffle parallelism is explicitly configured by the user, the user-configured parallelism is used in defining the actual parallelism. If you observe small files from the insert operation, we suggest configuring this shuffle parallelism explicitly, so that the parallelism is around total_input_data_size/120MB.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INSERT_PARALLELISM_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemarkersdeleteparallelism"},"hoodie.markers.delete.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"100"),(0,r.yg)("td",{parentName:"tr",align:null},"Determines the parallelism for deleting marker files, which are used to track all files (valid or invalid/partial) written during a write operation. Increase this value if delays are observed, with large batch writes.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MARKERS_DELETE_PARALLELISM_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemarkerstimeline_server_basedbatchinterval_ms"},"hoodie.markers.timeline_server_based.batch.interval_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"50"),(0,r.yg)("td",{parentName:"tr",align:null},"The batch interval in milliseconds for marker creation batch processing",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MARKERS_TIMELINE_SERVER_BASED_BATCH_INTERVAL_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.9.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemarkerstimeline_server_basedbatchnum_threads"},"hoodie.markers.timeline_server_based.batch.num_threads")),(0,r.yg)("td",{parentName:"tr",align:null},"20"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of threads to use for batch processing marker creation requests at the timeline server",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MARKERS_TIMELINE_SERVER_BASED_BATCH_NUM_THREADS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.9.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemergeallowduplicateoninserts"},"hoodie.merge.allow.duplicate.on.inserts")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When enabled, we allow duplicate keys even if inserts are routed to merge with an existing file (for ensuring file sizing). This is only relevant for insert operation, since upsert, delete operations will ensure unique key constraints are maintained.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MERGE_ALLOW_DUPLICATE_ON_INSERTS_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemergedatavalidationenabled"},"hoodie.merge.data.validation.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When enabled, data validation checks are performed during merges to ensure expected number of records after merge operation.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MERGE_DATA_VALIDATION_CHECK_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemergesmallfilegroupcandidateslimit"},"hoodie.merge.small.file.group.candidates.limit")),(0,r.yg)("td",{parentName:"tr",align:null},"1"),(0,r.yg)("td",{parentName:"tr",align:null},"Limits number of file groups, whose base file satisfies small-file limit, to consider for appending records during upsert operation. Only applicable to MOR tables",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MERGE_SMALL_FILE_GROUP_CANDIDATES_LIMIT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiereleaseresourceoncompletionenable"},"hoodie.release.resource.on.completion.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Control to enable release all persist rdds when the spark job finish.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RELEASE_RESOURCE_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodierollbackinstantbackupdir"},"hoodie.rollback.instant.backup.dir")),(0,r.yg)("td",{parentName:"tr",align:null},".rollback_backup"),(0,r.yg)("td",{parentName:"tr",align:null},"Path where instants being rolled back are copied. If not absolute path then a directory relative to .hoodie folder is created.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ROLLBACK_INSTANT_BACKUP_DIRECTORY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodierollbackinstantbackupenabled"},"hoodie.rollback.instant.backup.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Backup instants removed during rollback and restore (useful for debugging)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ROLLBACK_INSTANT_BACKUP_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodierollbackparallelism"},"hoodie.rollback.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"100"),(0,r.yg)("td",{parentName:"tr",align:null},"This config controls the parallelism for rollback of commits. Rollbacks perform deletion of files or logging delete blocks to file groups on storage in parallel. The configure value limits the parallelism so that the number of Spark tasks do not exceed the value. If rollback is slow due to the limited parallelism, you can increase this to tune the performance.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ROLLBACK_PARALLELISM_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodierollbackusingmarkers"},"hoodie.rollback.using.markers")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Enables a more efficient mechanism for rollbacks based on the marker files generated during the writes. Turned on by default.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ROLLBACK_USING_MARKERS_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieschemacacheenable"},"hoodie.schema.cache.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"cache query internalSchemas in driver/executor side",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_INTERNAL_SCHEMA_CACHE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiesensitiveconfigkeys"},"hoodie.sensitive.config.keys")),(0,r.yg)("td",{parentName:"tr",align:null},"ssl,tls,sasl,auth,credentials"),(0,r.yg)("td",{parentName:"tr",align:null},"Comma separated list of filters for sensitive config keys. Hudi Streamer will not print any configuration which contains the configured filter. For example with a configured filter ",(0,r.yg)("inlineCode",{parentName:"td"},"ssl"),", value for config ",(0,r.yg)("inlineCode",{parentName:"td"},"ssl.trustore.location")," would be masked.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SENSITIVE_CONFIG_KEYS_FILTER"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieskipdefaultpartitionvalidation"},"hoodie.skip.default.partition.validation")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},'When table is upgraded from pre 0.12 to 0.12, we check for "default" partition and fail if found one. Users are expected to rewrite the data in those partitions. Enabling this config will bypass this validation',(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SKIP_DEFAULT_PARTITION_VALIDATION"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.12.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodietablebasefileformat"},"hoodie.table.base.file.format")),(0,r.yg)("td",{parentName:"tr",align:null},"PARQUET"),(0,r.yg)("td",{parentName:"tr",align:null},"File format to store all the base file data. org.apache.hudi.common.model.HoodieFileFormat: Hoodie file formats.     PARQUET(default): Apache Parquet is an open source, column-oriented data file format designed for efficient data storage and retrieval. It provides efficient data compression and encoding schemes with enhanced performance to handle complex data in bulk.     HFILE: (internal config) File format for metadata table. A file of sorted key/value pairs. Both keys and values are byte arrays.     ORC: The Optimized Row Columnar (ORC) file format provides a highly efficient way to store Hive data. It was designed to overcome limitations of the other Hive file formats. Using ORC files improves performance when Hive is reading, writing, and processing data.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BASE_FILE_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodietableservicesenabled"},"hoodie.table.services.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Master control to disable all table services including archive, clean, compact, cluster, etc.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TABLE_SERVICES_ENABLED"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodietimelinelayoutversion"},"hoodie.timeline.layout.version")),(0,r.yg)("td",{parentName:"tr",align:null},"1"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls the layout of the timeline. Version 0 relied on renames, Version 1 (default) models the timeline as an immutable log relying only on atomic writes for object storage.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TIMELINE_LAYOUT_VERSION_NUM"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.5.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieupsertshuffleparallelism"},"hoodie.upsert.shuffle.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism to use for upsert operation on the table. Upserts can shuffle data to perform index lookups, file sizing, bin packing records optimally into file groups. Before 0.13.0 release, if users do not configure it, Hudi would use 200 as the default shuffle parallelism. From 0.13.0 onwards Hudi by default automatically uses the parallelism deduced by Spark based on the source data. If the shuffle parallelism is explicitly configured by the user, the user-configured parallelism is used in defining the actual parallelism. If you observe small files from the upsert operation, we suggest configuring this shuffle parallelism explicitly, so that the parallelism is around total_input_data_size/120MB.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: UPSERT_PARALLELISM_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritebufferlimitbytes"},"hoodie.write.buffer.limit.bytes")),(0,r.yg)("td",{parentName:"tr",align:null},"4194304"),(0,r.yg)("td",{parentName:"tr",align:null},"Size of in-memory buffer used for parallelizing network reads and lake storage writes.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_BUFFER_LIMIT_BYTES_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewriteconcurrencyasyncconflictdetectorinitial_delay_ms"},"hoodie.write.concurrency.async.conflict.detector.initial_delay_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Used for timeline-server-based markers with ",(0,r.yg)("inlineCode",{parentName:"td"},"AsyncTimelineServerBasedDetectionStrategy"),". The time in milliseconds to delay the first execution of async marker-based conflict detection.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ASYNC_CONFLICT_DETECTOR_INITIAL_DELAY_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewriteconcurrencyasyncconflictdetectorperiod_ms"},"hoodie.write.concurrency.async.conflict.detector.period_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"30000"),(0,r.yg)("td",{parentName:"tr",align:null},"Used for timeline-server-based markers with ",(0,r.yg)("inlineCode",{parentName:"td"},"AsyncTimelineServerBasedDetectionStrategy"),". The period in milliseconds between successive executions of async marker-based conflict detection.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ASYNC_CONFLICT_DETECTOR_PERIOD_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewriteconcurrencyearlyconflictcheckcommitconflict"},"hoodie.write.concurrency.early.conflict.check.commit.conflict")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to enable commit conflict checking or not during early conflict detection.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EARLY_CONFLICT_DETECTION_CHECK_COMMIT_CONFLICT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewriteconcurrencyearlyconflictdetectionenable"},"hoodie.write.concurrency.early.conflict.detection.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to enable early conflict detection based on markers. It eagerly detects writing conflict before create markers and fails fast if a conflict is detected, to release cluster compute resources as soon as possible.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EARLY_CONFLICT_DETECTION_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewriteconcurrencyearlyconflictdetectionstrategy"},"hoodie.write.concurrency.early.conflict.detection.strategy")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"The class name of the early conflict detection strategy to use. This should be a subclass of ",(0,r.yg)("inlineCode",{parentName:"td"},"org.apache.hudi.common.conflict.detection.EarlyConflictDetectionStrategy"),".",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EARLY_CONFLICT_DETECTION_STRATEGY_CLASS_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewriteexecutordisruptorbufferlimitbytes"},"hoodie.write.executor.disruptor.buffer.limit.bytes")),(0,r.yg)("td",{parentName:"tr",align:null},"1024"),(0,r.yg)("td",{parentName:"tr",align:null},"The size of the Disruptor Executor ring buffer, must be power of 2",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_EXECUTOR_DISRUPTOR_BUFFER_LIMIT_BYTES"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewriteexecutordisruptorwaitstrategy"},"hoodie.write.executor.disruptor.wait.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"BLOCKING_WAIT"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.util.queue.DisruptorWaitStrategyType: Strategy employed for making Disruptor Executor wait on a cursor.     BLOCKING_WAIT(default): The slowest of the available wait strategies. However, it is the most conservative with the respect to CPU usage and will give the most consistent behaviour across the widest variety of deployment options.     SLEEPING_WAIT: Like the ",(0,r.yg)("inlineCode",{parentName:"td"},"BLOCKING_WAIT")," strategy, it attempts to be conservative with CPU usage by using a simple busy wait loop. The difference is that the ",(0,r.yg)("inlineCode",{parentName:"td"},"SLEEPING_WAIT")," strategy uses a call to ",(0,r.yg)("inlineCode",{parentName:"td"},"LockSupport.parkNanos(1)")," in the middle of the loop. On a typical Linux system this will pause the thread for around 60\xb5s.     YIELDING_WAIT: The ",(0,r.yg)("inlineCode",{parentName:"td"},"YIELDING_WAIT")," strategy is one of two wait strategy that can be used in low-latency systems. It is designed for cases where there is an opportunity to burn CPU cycles with the goal of improving latency. The ",(0,r.yg)("inlineCode",{parentName:"td"},"YIELDING_WAIT")," strategy will busy spin, waiting for the sequence to increment to the appropriate value. Inside the body of the loop ",(0,r.yg)("inlineCode",{parentName:"td"},"Thread#yield()")," will be called allowing other queued threads to run. This is the recommended wait strategy when you need very high performance, and the number of ",(0,r.yg)("inlineCode",{parentName:"td"},"EventHandler")," threads is lower than the total number of logical cores, such as when hyper-threading is enabled.     BUSY_SPIN_WAIT: The ",(0,r.yg)("inlineCode",{parentName:"td"},"BUSY_SPIN_WAIT")," strategy is the highest performing wait strategy. Like the ",(0,r.yg)("inlineCode",{parentName:"td"},"YIELDING_WAIT")," strategy, it can be used in low-latency systems, but puts the highest constraints on the deployment environment.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_EXECUTOR_DISRUPTOR_WAIT_STRATEGY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewriteexecutortype"},"hoodie.write.executor.type")),(0,r.yg)("td",{parentName:"tr",align:null},"SIMPLE"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.util.queue.ExecutorType: Types of executor that implements org.apache.hudi.common.util.queue.HoodieExecutor. The executor orchestrates concurrent producers and consumers communicating through a message queue.     BOUNDED_IN_MEMORY: Executor which orchestrates concurrent producers and consumers communicating through a bounded in-memory message queue using LinkedBlockingQueue. This queue will use extra lock to balance producers and consumers.     DISRUPTOR: Executor which orchestrates concurrent producers and consumers communicating through disruptor as a lock free message queue to gain better writing performance. Although DisruptorExecutor is still an experimental feature.     SIMPLE(default): Executor with no inner message queue and no inner lock. Consuming and writing records from iterator directly. The advantage is that there is no need for additional memory and cpu resources due to lock or multithreading. The disadvantage is that the executor is a single-write-single-read model, cannot support functions such as speed limit and can not de-couple the network read (shuffle read) and network write (writing objects/files to storage) anymore.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_EXECUTOR_TYPE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritemarkerstype"},"hoodie.write.markers.type")),(0,r.yg)("td",{parentName:"tr",align:null},"TIMELINE_SERVER_BASED"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.table.marker.MarkerType: Marker type indicating how markers are stored in the file system, used for identifying the files written and cleaning up files not committed which should be deleted.     DIRECT: Individual marker file corresponding to each data file is directly created by the writer.     TIMELINE_SERVER_BASED(default): Marker operations are all handled at the timeline service which serves as a proxy. New marker entries are batch processed and stored in a limited number of underlying files for efficiency. If HDFS is used or timeline server is disabled, DIRECT markers are used as fallback even if this is configured. This configuration does not take effect for Spark structured streaming; DIRECT markers are always used.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MARKERS_TYPE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.9.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritestatusstoragelevel"},"hoodie.write.status.storage.level")),(0,r.yg)("td",{parentName:"tr",align:null},"MEMORY_AND_DISK_SER"),(0,r.yg)("td",{parentName:"tr",align:null},"Write status objects hold metadata about a write (stats, errors), that is not yet committed to storage. This controls the how that information is cached for inspection by clients. We rarely expect this to be changed.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_STATUS_STORAGE_LEVEL_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritetaggedrecordstoragelevel"},"hoodie.write.tagged.record.storage.level")),(0,r.yg)("td",{parentName:"tr",align:null},"MEMORY_AND_DISK_SER"),(0,r.yg)("td",{parentName:"tr",align:null},"Determine what level of persistence is used to cache write RDDs. Refer to org.apache.spark.storage.StorageLevel for different values",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TAGGED_RECORD_STORAGE_LEVEL_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritestatusclass"},"hoodie.writestatus.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.client.WriteStatus"),(0,r.yg)("td",{parentName:"tr",align:null},"Subclass of org.apache.hudi.client.WriteStatus to be used to collect information about a write. Can be overridden to collection additional metrics/statistics about the data if needed.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_STATUS_CLASS_NAME"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"COMMIT_CALLBACK"},"Commit Callback Configs"),(0,r.yg)("p",null,"Configurations controlling callback behavior into HTTP endpoints, to push notifications on commits on hudi tables."),(0,r.yg)("h4",{id:"Write-commit-callback-configs"},"Write commit callback configs"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Write-commit-callback-configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackhttpurl"},"hoodie.write.commit.callback.http.url")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Callback host to be sent along with callback messages",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CALLBACK_HTTP_URL"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackclass"},"hoodie.write.commit.callback.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.callback.impl.HoodieWriteCommitHttpCallback"),(0,r.yg)("td",{parentName:"tr",align:null},"Full path of callback class and must be a subclass of HoodieWriteCommitCallback class, org.apache.hudi.callback.impl.HoodieWriteCommitHttpCallback by default",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CALLBACK_CLASS_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackhttpapikey"},"hoodie.write.commit.callback.http.api.key")),(0,r.yg)("td",{parentName:"tr",align:null},"hudi_write_commit_http_callback"),(0,r.yg)("td",{parentName:"tr",align:null},"Http callback API key. hudi_write_commit_http_callback by default",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CALLBACK_HTTP_API_KEY_VALUE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackhttptimeoutseconds"},"hoodie.write.commit.callback.http.timeout.seconds")),(0,r.yg)("td",{parentName:"tr",align:null},"30"),(0,r.yg)("td",{parentName:"tr",align:null},"Callback timeout in seconds.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CALLBACK_HTTP_TIMEOUT_IN_SECONDS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackon"},"hoodie.write.commit.callback.on")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Turn commit callback on/off. off by default.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TURN_CALLBACK_ON"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"Write-commit-Kafka-callback-configs"},"Write commit Kafka callback configs"),(0,r.yg)("p",null,"Controls notifications sent to Kafka, on events happening to a hudi table."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Write-commit-Kafka-callback-configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackkafkabootstrapservers"},"hoodie.write.commit.callback.kafka.bootstrap.servers")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Bootstrap servers of kafka cluster, to be used for publishing commit metadata.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BOOTSTRAP_SERVERS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackkafkapartition"},"hoodie.write.commit.callback.kafka.partition")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"It may be desirable to serialize all changes into a single Kafka partition  for providing strict ordering. By default, Kafka messages are keyed by table name, which  guarantees ordering at the table level, but not globally (or when new partitions are added)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITION"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackkafkatopic"},"hoodie.write.commit.callback.kafka.topic")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Kafka topic name to publish timeline activity into.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TOPIC"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackkafkaacks"},"hoodie.write.commit.callback.kafka.acks")),(0,r.yg)("td",{parentName:"tr",align:null},"all"),(0,r.yg)("td",{parentName:"tr",align:null},"kafka acks level, all by default to ensure strong durability.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ACKS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackkafkaretries"},"hoodie.write.commit.callback.kafka.retries")),(0,r.yg)("td",{parentName:"tr",align:null},"3"),(0,r.yg)("td",{parentName:"tr",align:null},"Times to retry the produce. 3 by default",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RETRIES"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"Write-commit-pulsar-callback-configs"},"Write commit pulsar callback configs"),(0,r.yg)("p",null,"Controls notifications sent to pulsar, on events happening to a hudi table."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Write-commit-pulsar-callback-configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackpulsarbrokerserviceurl"},"hoodie.write.commit.callback.pulsar.broker.service.url")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Server's url of pulsar cluster, to be used for publishing commit metadata.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BROKER_SERVICE_URL"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackpulsartopic"},"hoodie.write.commit.callback.pulsar.topic")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"pulsar topic name to publish timeline activity into.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TOPIC"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackpulsarconnection-timeout"},"hoodie.write.commit.callback.pulsar.connection-timeout")),(0,r.yg)("td",{parentName:"tr",align:null},"10s"),(0,r.yg)("td",{parentName:"tr",align:null},"Duration of waiting for a connection to a broker to be established.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CONNECTION_TIMEOUT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackpulsarkeepalive-interval"},"hoodie.write.commit.callback.pulsar.keepalive-interval")),(0,r.yg)("td",{parentName:"tr",align:null},"30s"),(0,r.yg)("td",{parentName:"tr",align:null},"Duration of keeping alive interval for each client broker connection.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KEEPALIVE_INTERVAL"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackpulsaroperation-timeout"},"hoodie.write.commit.callback.pulsar.operation-timeout")),(0,r.yg)("td",{parentName:"tr",align:null},"30s"),(0,r.yg)("td",{parentName:"tr",align:null},"Duration of waiting for completing an operation.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: OPERATION_TIMEOUT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackpulsarproducerblock-if-queue-full"},"hoodie.write.commit.callback.pulsar.producer.block-if-queue-full")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"When the queue is full, the method is blocked instead of an exception is thrown.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PRODUCER_BLOCK_QUEUE_FULL"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackpulsarproducerpending-queue-size"},"hoodie.write.commit.callback.pulsar.producer.pending-queue-size")),(0,r.yg)("td",{parentName:"tr",align:null},"1000"),(0,r.yg)("td",{parentName:"tr",align:null},"The maximum size of a queue holding pending messages.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PRODUCER_PENDING_QUEUE_SIZE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackpulsarproducerpending-total-size"},"hoodie.write.commit.callback.pulsar.producer.pending-total-size")),(0,r.yg)("td",{parentName:"tr",align:null},"50000"),(0,r.yg)("td",{parentName:"tr",align:null},"The maximum number of pending messages across partitions.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PRODUCER_PENDING_SIZE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackpulsarproducerroute-mode"},"hoodie.write.commit.callback.pulsar.producer.route-mode")),(0,r.yg)("td",{parentName:"tr",align:null},"RoundRobinPartition"),(0,r.yg)("td",{parentName:"tr",align:null},"Message routing logic for producers on partitioned topics.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PRODUCER_ROUTE_MODE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackpulsarproducersend-timeout"},"hoodie.write.commit.callback.pulsar.producer.send-timeout")),(0,r.yg)("td",{parentName:"tr",align:null},"30s"),(0,r.yg)("td",{parentName:"tr",align:null},"The timeout in each sending to pulsar.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PRODUCER_SEND_TIMEOUT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritecommitcallbackpulsarrequest-timeout"},"hoodie.write.commit.callback.pulsar.request-timeout")),(0,r.yg)("td",{parentName:"tr",align:null},"60s"),(0,r.yg)("td",{parentName:"tr",align:null},"Duration of waiting for completing a request.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REQUEST_TIMEOUT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"LOCK"},"Lock Configs"),(0,r.yg)("p",null,"Configurations that control locking mechanisms required for concurrency control  between writers to a Hudi table. Concurrency between Hudi's own table services  are auto managed internally."),(0,r.yg)("h4",{id:"Common-Lock-Configurations"},"Common Lock Configurations"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Common-Lock-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockfilesystempath"},"hoodie.write.lock.filesystem.path")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"For DFS based lock providers, path to store the locks under. use Table's meta path as default",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FILESYSTEM_LOCK_PATH"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockhivemetastoredatabase"},"hoodie.write.lock.hivemetastore.database")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"For Hive based lock provider, the Hive database to acquire lock against",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_DATABASE_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockhivemetastoretable"},"hoodie.write.lock.hivemetastore.table")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"For Hive based lock provider, the Hive table to acquire lock against",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_TABLE_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockhivemetastoreuris"},"hoodie.write.lock.hivemetastore.uris")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"For Hive based lock provider, the Hive metastore URI to acquire locks against.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_METASTORE_URI"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockzookeeperbase_path"},"hoodie.write.lock.zookeeper.base_path")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The base path on Zookeeper under which to create lock related ZNodes. This should be same for all concurrent writers to the same table",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ZK_BASE_PATH"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockzookeeperport"},"hoodie.write.lock.zookeeper.port")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Zookeeper port to connect to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ZK_PORT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockzookeeperurl"},"hoodie.write.lock.zookeeper.url")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Zookeeper URL to connect to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ZK_CONNECT_URL"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockclientnum_retries"},"hoodie.write.lock.client.num_retries")),(0,r.yg)("td",{parentName:"tr",align:null},"50"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of times to retry to acquire lock additionally from the lock manager.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOCK_ACQUIRE_CLIENT_NUM_RETRIES"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockclientwait_time_ms_between_retry"},"hoodie.write.lock.client.wait_time_ms_between_retry")),(0,r.yg)("td",{parentName:"tr",align:null},"5000"),(0,r.yg)("td",{parentName:"tr",align:null},"Amount of time to wait between retries on the lock provider by the lock manager",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOCK_ACQUIRE_CLIENT_RETRY_WAIT_TIME_IN_MILLIS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockconflictresolutionstrategy"},"hoodie.write.lock.conflict.resolution.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.client.transaction.SimpleConcurrentFileWritesConflictResolutionStrategy"),(0,r.yg)("td",{parentName:"tr",align:null},"Lock provider class name, this should be subclass of org.apache.hudi.client.transaction.ConflictResolutionStrategy",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: WRITE_CONFLICT_RESOLUTION_STRATEGY_CLASS_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockfilesystemexpire"},"hoodie.write.lock.filesystem.expire")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"For DFS based lock providers, expire time in minutes, must be a non-negative number, default means no expire",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FILESYSTEM_LOCK_EXPIRE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.12.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockmax_wait_time_ms_between_retry"},"hoodie.write.lock.max_wait_time_ms_between_retry")),(0,r.yg)("td",{parentName:"tr",align:null},"16000"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum amount of time to wait between retries by lock provider client. This bounds the maximum delay from the exponential backoff. Currently used by ZK based lock provider only.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOCK_ACQUIRE_RETRY_MAX_WAIT_TIME_IN_MILLIS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelocknum_retries"},"hoodie.write.lock.num_retries")),(0,r.yg)("td",{parentName:"tr",align:null},"15"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of times to retry lock acquire, at each lock provider",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOCK_ACQUIRE_NUM_RETRIES"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockprovider"},"hoodie.write.lock.provider")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.client.transaction.lock.ZookeeperBasedLockProvider"),(0,r.yg)("td",{parentName:"tr",align:null},"Lock provider class name, user can provide their own implementation of LockProvider which should be subclass of org.apache.hudi.common.lock.LockProvider",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOCK_PROVIDER_CLASS_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockwait_time_ms"},"hoodie.write.lock.wait_time_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"60000"),(0,r.yg)("td",{parentName:"tr",align:null},"Timeout in ms, to wait on an individual lock acquire() call, at the lock provider.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOCK_ACQUIRE_WAIT_TIMEOUT_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockwait_time_ms_between_retry"},"hoodie.write.lock.wait_time_ms_between_retry")),(0,r.yg)("td",{parentName:"tr",align:null},"1000"),(0,r.yg)("td",{parentName:"tr",align:null},"Initial amount of time to wait between retries to acquire locks,  subsequent retries will exponentially backoff.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOCK_ACQUIRE_RETRY_WAIT_TIME_IN_MILLIS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockzookeeperconnection_timeout_ms"},"hoodie.write.lock.zookeeper.connection_timeout_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"15000"),(0,r.yg)("td",{parentName:"tr",align:null},"Timeout in ms, to wait for establishing connection with Zookeeper.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ZK_CONNECTION_TIMEOUT_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockzookeeperlock_key"},"hoodie.write.lock.zookeeper.lock_key")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Key name under base_path at which to create a ZNode and acquire lock. Final path on zk will look like base_path/lock_key. If this parameter is not set, we would set it as the table name",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ZK_LOCK_KEY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockzookeepersession_timeout_ms"},"hoodie.write.lock.zookeeper.session_timeout_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"60000"),(0,r.yg)("td",{parentName:"tr",align:null},"Timeout in ms, to wait after losing connection to ZooKeeper, before the session is expired",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ZK_SESSION_TIMEOUT_MS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.8.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"DynamoDB-based-Locks-Configurations"},"DynamoDB based Locks Configurations"),(0,r.yg)("p",null,"Configs that control DynamoDB based locking mechanisms required for concurrency control  between writers to a Hudi table. Concurrency between Hudi's own table services  are auto managed internally."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#DynamoDB-based-Locks-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockdynamodbendpoint_url"},"hoodie.write.lock.dynamodb.endpoint_url")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"For DynamoDB based lock provider, the url endpoint used for Amazon DynamoDB service. Useful for development with a local dynamodb instance.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DYNAMODB_ENDPOINT_URL"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockdynamodbbilling_mode"},"hoodie.write.lock.dynamodb.billing_mode")),(0,r.yg)("td",{parentName:"tr",align:null},"PAY_PER_REQUEST"),(0,r.yg)("td",{parentName:"tr",align:null},"For DynamoDB based lock provider, by default it is ",(0,r.yg)("inlineCode",{parentName:"td"},"PAY_PER_REQUEST")," mode. Alternative is ",(0,r.yg)("inlineCode",{parentName:"td"},"PROVISIONED"),".",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DYNAMODB_LOCK_BILLING_MODE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockdynamodbpartition_key"},"hoodie.write.lock.dynamodb.partition_key")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"For DynamoDB based lock provider, the partition key for the DynamoDB lock table. Each Hudi dataset should has it's unique key so concurrent writers could refer to the same partition key. By default we use the Hudi table name specified to be the partition key",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DYNAMODB_LOCK_PARTITION_KEY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockdynamodbread_capacity"},"hoodie.write.lock.dynamodb.read_capacity")),(0,r.yg)("td",{parentName:"tr",align:null},"20"),(0,r.yg)("td",{parentName:"tr",align:null},"For DynamoDB based lock provider, read capacity units when using PROVISIONED billing mode",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DYNAMODB_LOCK_READ_CAPACITY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockdynamodbregion"},"hoodie.write.lock.dynamodb.region")),(0,r.yg)("td",{parentName:"tr",align:null},"us-east-1"),(0,r.yg)("td",{parentName:"tr",align:null},"For DynamoDB based lock provider, the region used in endpoint for Amazon DynamoDB service. Would try to first get it from AWS_REGION environment variable. If not find, by default use us-east-1",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DYNAMODB_LOCK_REGION"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockdynamodbtable"},"hoodie.write.lock.dynamodb.table")),(0,r.yg)("td",{parentName:"tr",align:null},"hudi_locks"),(0,r.yg)("td",{parentName:"tr",align:null},"For DynamoDB based lock provider, the name of the DynamoDB table acting as lock table",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DYNAMODB_LOCK_TABLE_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockdynamodbtable_creation_timeout"},"hoodie.write.lock.dynamodb.table_creation_timeout")),(0,r.yg)("td",{parentName:"tr",align:null},"120000"),(0,r.yg)("td",{parentName:"tr",align:null},"For DynamoDB based lock provider, the maximum number of milliseconds to wait for creating DynamoDB table",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DYNAMODB_LOCK_TABLE_CREATION_TIMEOUT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockdynamodbwrite_capacity"},"hoodie.write.lock.dynamodb.write_capacity")),(0,r.yg)("td",{parentName:"tr",align:null},"10"),(0,r.yg)("td",{parentName:"tr",align:null},"For DynamoDB based lock provider, write capacity units when using PROVISIONED billing mode",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DYNAMODB_LOCK_WRITE_CAPACITY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiewritelockwait_time_ms"},"hoodie.write.lock.wait_time_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"60000"),(0,r.yg)("td",{parentName:"tr",align:null},"Lock Acquire Wait Timeout in milliseconds",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOCK_ACQUIRE_WAIT_TIMEOUT_MS_PROP_KEY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"KEY_GENERATOR"},"Key Generator Configs"),(0,r.yg)("p",null,"Hudi maintains keys (record key + partition path) for uniquely identifying a particular record. These configs allow developers to setup the Key generator class that extracts these out of incoming records."),(0,r.yg)("h4",{id:"Key-Generator-Options"},"Key Generator Options"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Key-Generator-Options-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritepartitionpathfield"},"hoodie.datasource.write.partitionpath.field")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Partition path field. Value to be used at the partitionPath component of HoodieKey. Actual value obtained by invoking .toString()",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITIONPATH_FIELD_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewriterecordkeyfield"},"hoodie.datasource.write.recordkey.field")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Record key field. Value to be used as the ",(0,r.yg)("inlineCode",{parentName:"td"},"recordKey")," component of ",(0,r.yg)("inlineCode",{parentName:"td"},"HoodieKey"),". Actual value will be obtained by invoking .toString() on the field value. Nested fields can be specified using the dot notation eg: ",(0,r.yg)("inlineCode",{parentName:"td"},"a.b.c"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORDKEY_FIELD_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritehive_style_partitioning"},"hoodie.datasource.write.hive_style_partitioning")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Flag to indicate whether to use Hive style partitioning. If set true, the names of partition folders follow ","<","partition_column_name",">","=","<","partition_value",">"," format. By default false (the names of partition folders are only partition values)",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_STYLE_PARTITIONING_ENABLE"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Key-Generator-Options-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritekeygeneratorconsistentlogicaltimestampenabled"},"hoodie.datasource.write.keygenerator.consistent.logical.timestamp.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, consistent value will be generated for a logical timestamp type column, like timestamp-millis and timestamp-micros, irrespective of whether row-writer is enabled. Disabled by default so as not to break the pipeline that deploy either fully row-writer path or non row-writer path. For example, if it is kept disabled then record key of timestamp type with value ",(0,r.yg)("inlineCode",{parentName:"td"},"2016-12-29 09:54:00")," will be written as timestamp ",(0,r.yg)("inlineCode",{parentName:"td"},"2016-12-29 09:54:00.0")," in row-writer path, while it will be written as long value ",(0,r.yg)("inlineCode",{parentName:"td"},"1483023240000000")," in non row-writer path. If enabled, then the timestamp value will be written in both the cases.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KEYGENERATOR_CONSISTENT_LOGICAL_TIMESTAMP_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcewritepartitionpathurlencode"},"hoodie.datasource.write.partitionpath.urlencode")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Should we url encode the partition path value, before creating the folder structure.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: URL_ENCODE_PARTITIONING"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"INDEX"},"Index Configs"),(0,r.yg)("p",null,"Configurations that control indexing behavior, which tags incoming records as either inserts or updates to older records."),(0,r.yg)("h4",{id:"Common-Index-Configs"},"Common Index Configs"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Common-Index-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindextype"},"hoodie.index.type")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.index.HoodieIndex$IndexType: Determines how input records are indexed, i.e., looked up based on the key for the location in the existing table. Default is SIMPLE on Spark engine, and INMEMORY on Flink and Java engines.     HBASE: uses an external managed Apache HBase table to store record key to location mapping. HBase index is a global index, enforcing key uniqueness across all partitions in the table.     INMEMORY: Uses in-memory hashmap in Spark and Java engine and Flink in-memory state in Flink for indexing.     BLOOM: Employs bloom filters built out of the record keys, optionally also pruning candidate files using record key ranges. Key uniqueness is enforced inside partitions.     GLOBAL_BLOOM: Employs bloom filters built out of the record keys, optionally also pruning candidate files using record key ranges. Key uniqueness is enforced across all partitions in the table.      SIMPLE: Performs a lean join of the incoming update/delete records against keys extracted from the table on storage.Key uniqueness is enforced inside partitions.     GLOBAL_SIMPLE: Performs a lean join of the incoming update/delete records against keys extracted from the table on storage.Key uniqueness is enforced across all partitions in the table.     BUCKET: locates the file group containing the record fast by using bucket hashing, particularly beneficial in large scale. Use ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.index.bucket.engine")," to choose bucket engine type, i.e., how buckets are generated.     FLINK_STATE: Internal Config for indexing based on Flink state.     RECORD_INDEX: Index which saves the record key to location mappings in the HUDI Metadata Table. Record index is a global index, enforcing key uniqueness across all partitions in the table. Supports sharding to achieve very high scale.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INDEX_TYPE"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Common-Index-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebucketindexhashfield"},"hoodie.bucket.index.hash.field")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Index key. It is used to index the record and find its file group. If not set, use record key field as default",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BUCKET_INDEX_HASH_FIELD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebucketindexmaxnumbuckets"},"hoodie.bucket.index.max.num.buckets")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if bucket index engine is consistent hashing. Determine the upper bound of the number of buckets in the hudi table. Bucket resizing cannot be done higher than this max limit.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BUCKET_INDEX_MAX_NUM_BUCKETS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebucketindexminnumbuckets"},"hoodie.bucket.index.min.num.buckets")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if bucket index engine is consistent hashing. Determine the lower bound of the number of buckets in the hudi table. Bucket resizing cannot be done lower than this min limit.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BUCKET_INDEX_MIN_NUM_BUCKETS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebloomindexbucketizedchecking"},"hoodie.bloom.index.bucketized.checking")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is BLOOM. When true, bucketized bloom filtering is enabled. This reduces skew seen in sort based bloom index lookup",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_INDEX_BUCKETIZED_CHECKING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebloomindexinputstoragelevel"},"hoodie.bloom.index.input.storage.level")),(0,r.yg)("td",{parentName:"tr",align:null},"MEMORY_AND_DISK_SER"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies when #bloomIndexUseCaching is set. Determine what level of persistence is used to cache input RDDs. Refer to org.apache.spark.storage.StorageLevel for different values",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_INDEX_INPUT_STORAGE_LEVEL_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebloomindexkeysperbucket"},"hoodie.bloom.index.keys.per.bucket")),(0,r.yg)("td",{parentName:"tr",align:null},"10000000"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if bloomIndexBucketizedChecking is enabled and index type is bloom. This configuration controls the \u201cbucket\u201d size which tracks the number of record-key checks made against a single file and is the unit of work allocated to each partition performing bloom filter lookup. A higher value would amortize the fixed cost of reading a bloom filter to memory.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_INDEX_KEYS_PER_BUCKET"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebloomindexparallelism"},"hoodie.bloom.index.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is BLOOM. This is the amount of parallelism for index lookup, which involves a shuffle. By default, this is auto computed based on input workload characteristics. If the parallelism is explicitly configured by the user, the user-configured value is used in defining the actual parallelism. If the indexing stage is slow due to the limited parallelism, you can increase this to tune the performance.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_INDEX_PARALLELISM"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebloomindexprunebyranges"},"hoodie.bloom.index.prune.by.ranges")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is BLOOM. When true, range information from files to leveraged speed up index lookups. Particularly helpful, if the key has a monotonously increasing prefix, such as timestamp. If the record key is completely random, it is better to turn this off, since range pruning will only  add extra overhead to the index lookup.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_INDEX_PRUNE_BY_RANGES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebloomindexupdatepartitionpath"},"hoodie.bloom.index.update.partition.path")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is GLOBAL_BLOOM. When set to true, an update including the partition path of a record that already exists will result in inserting the incoming record into the new partition and deleting the original record in the old partition. When set to false, the original record will only be updated in the old partition",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_INDEX_UPDATE_PARTITION_PATH_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebloomindexusecaching"},"hoodie.bloom.index.use.caching")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is BLOOM.When true, the input RDD will cached to speed up index lookup by reducing IO for computing parallelism or affected partitions",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_INDEX_USE_CACHING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebloomindexusemetadata"},"hoodie.bloom.index.use.metadata")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is BLOOM.When true, the index lookup uses bloom filters and column stats from metadata table when available to speed up the process.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_INDEX_USE_METADATA"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebloomindexusetreebasedfilter"},"hoodie.bloom.index.use.treebased.filter")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is BLOOM. When true, interval tree based file pruning optimization is enabled. This mode speeds-up file-pruning based on key ranges when compared with the brute-force mode",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BLOOM_INDEX_TREE_BASED_FILTER"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebucketindexmergethreshold"},"hoodie.bucket.index.merge.threshold")),(0,r.yg)("td",{parentName:"tr",align:null},"0.2"),(0,r.yg)("td",{parentName:"tr",align:null},"Control if buckets should be merged when using consistent hashing bucket indexSpecifically, if a file slice size is smaller than ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.xxxx.max.file.size")," * threshold, then it will be consideredas a merge candidate.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BUCKET_MERGE_THRESHOLD"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebucketindexnumbuckets"},"hoodie.bucket.index.num.buckets")),(0,r.yg)("td",{parentName:"tr",align:null},"256"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is BUCKET. Determine the number of buckets in the hudi table, and each partition is divided to N buckets.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BUCKET_INDEX_NUM_BUCKETS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiebucketindexsplitthreshold"},"hoodie.bucket.index.split.threshold")),(0,r.yg)("td",{parentName:"tr",align:null},"2.0"),(0,r.yg)("td",{parentName:"tr",align:null},"Control if the bucket should be split when using consistent hashing bucket index.Specifically, if a file slice size reaches ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.xxxx.max.file.size")," * threshold, then split will be carried out.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BUCKET_SPLIT_THRESHOLD"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieglobalindexreconcileparallelism"},"hoodie.global.index.reconcile.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"60"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is GLOBAL_BLOOM or GLOBAL_SIMPLE. This controls the parallelism for deduplication during indexing where more than 1 record could be tagged due to partition update.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: GLOBAL_INDEX_RECONCILE_PARALLELISM"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieglobalsimpleindexparallelism"},"hoodie.global.simple.index.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"100"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is GLOBAL_SIMPLE. This limits the parallelism of fetching records from the base files of all table partitions. The index picks the configured parallelism if the number of base files is larger than this configured value; otherwise, the number of base files is used as the parallelism. If the indexing stage is slow due to the limited parallelism, you can increase this to tune the performance.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: GLOBAL_SIMPLE_INDEX_PARALLELISM"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexbucketengine"},"hoodie.index.bucket.engine")),(0,r.yg)("td",{parentName:"tr",align:null},"SIMPLE"),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.index.HoodieIndex$BucketIndexEngineType: Determines the type of bucketing or hashing to use when ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.index.type")," is set to ",(0,r.yg)("inlineCode",{parentName:"td"},"BUCKET"),".     SIMPLE(default): Uses a fixed number of buckets for file groups which cannot shrink or expand. This works for both COW and MOR tables.     CONSISTENT_HASHING: Supports dynamic number of buckets with bucket resizing to properly size each bucket. This solves potential data skew problem where one bucket can be significantly larger than others in SIMPLE engine type. This only works with MOR tables.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BUCKET_INDEX_ENGINE_TYPE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexclass"},"hoodie.index.class")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Full path of user-defined index class and must be a subclass of HoodieIndex class. It will take precedence over the hoodie.index.type configuration if specified",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INDEX_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodierecordindexinputstoragelevel"},"hoodie.record.index.input.storage.level")),(0,r.yg)("td",{parentName:"tr",align:null},"MEMORY_AND_DISK_SER"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies when #recordIndexUseCaching is set. Determine what level of persistence is used to cache input RDDs. Refer to org.apache.spark.storage.StorageLevel for different values",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_INDEX_INPUT_STORAGE_LEVEL_VALUE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodierecordindexupdatepartitionpath"},"hoodie.record.index.update.partition.path")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Similar to Key: 'hoodie.bloom.index.update.partition.path' , default: true , isAdvanced: true , description: Only applies if index type is GLOBAL_BLOOM. When set to true, an update including the partition path of a record that already exists will result in inserting the incoming record into the new partition and deleting the original record in the old partition. When set to false, the original record will only be updated in the old partition since version: version is not defined deprecated after: version is not defined), but for record index.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_INDEX_UPDATE_PARTITION_PATH_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodierecordindexusecaching"},"hoodie.record.index.use.caching")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is RECORD_INDEX.When true, the input RDD will be cached to speed up index lookup by reducing IO for computing parallelism or affected partitions",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RECORD_INDEX_USE_CACHING"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiesimpleindexinputstoragelevel"},"hoodie.simple.index.input.storage.level")),(0,r.yg)("td",{parentName:"tr",align:null},"MEMORY_AND_DISK_SER"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies when #simpleIndexUseCaching is set. Determine what level of persistence is used to cache input RDDs. Refer to org.apache.spark.storage.StorageLevel for different values",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SIMPLE_INDEX_INPUT_STORAGE_LEVEL_VALUE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiesimpleindexparallelism"},"hoodie.simple.index.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is SIMPLE. This limits the parallelism of fetching records from the base files of affected partitions. By default, this is auto computed based on input workload characteristics. If the parallelism is explicitly configured by the user, the user-configured value is used in defining the actual parallelism. If the indexing stage is slow due to the limited parallelism, you can increase this to tune the performance.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SIMPLE_INDEX_PARALLELISM"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiesimpleindexupdatepartitionpath"},"hoodie.simple.index.update.partition.path")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Similar to Key: 'hoodie.bloom.index.update.partition.path' , default: true , isAdvanced: true , description: Only applies if index type is GLOBAL_BLOOM. When set to true, an update including the partition path of a record that already exists will result in inserting the incoming record into the new partition and deleting the original record in the old partition. When set to false, the original record will only be updated in the old partition since version: version is not defined deprecated after: version is not defined), but for simple index.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SIMPLE_INDEX_UPDATE_PARTITION_PATH_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiesimpleindexusecaching"},"hoodie.simple.index.use.caching")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is SIMPLE. When true, the incoming writes will cached to speed up index lookup by reducing IO for computing parallelism or affected partitions",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SIMPLE_INDEX_USE_CACHING"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"HBase-Index-Configs"},"HBase Index Configs"),(0,r.yg)("p",null,"Configurations that control indexing behavior (when HBase based indexing is enabled), which tags incoming records as either inserts or updates to older records."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#HBase-Index-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasekerberosuserkeytab"},"hoodie.index.hbase.kerberos.user.keytab")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"File name of the kerberos keytab file for connecting to the hbase cluster.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KERBEROS_USER_KEYTAB"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasekerberosuserprincipal"},"hoodie.index.hbase.kerberos.user.principal")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The kerberos principal name for connecting to the hbase cluster.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KERBEROS_USER_PRINCIPAL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasemasterkerberosprincipal"},"hoodie.index.hbase.master.kerberos.principal")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The value of hbase.master.kerberos.principal in hbase cluster.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MASTER_PRINCIPAL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasemaxqpsfraction"},"hoodie.index.hbase.max.qps.fraction")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum for HBASE_QPS_FRACTION_PROP to stabilize skewed write workloads",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_QPS_FRACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbaseminqpsfraction"},"hoodie.index.hbase.min.qps.fraction")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Minimum for HBASE_QPS_FRACTION_PROP to stabilize skewed write workloads",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MIN_QPS_FRACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbaseregionserverkerberosprincipal"},"hoodie.index.hbase.regionserver.kerberos.principal")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The value of hbase.regionserver.kerberos.principal in hbase cluster.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REGIONSERVER_PRINCIPAL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasesleepmsforgetbatch"},"hoodie.index.hbase.sleep.ms.for.get.batch")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SLEEP_MS_FOR_GET_BATCH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasesleepmsforputbatch"},"hoodie.index.hbase.sleep.ms.for.put.batch")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SLEEP_MS_FOR_PUT_BATCH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasetable"},"hoodie.index.hbase.table")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is HBASE. HBase Table name to use as the index. Hudi stores the row_key and ","[partition_path, fileID, commitTime]"," mapping in the table",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TABLENAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasezknodepath"},"hoodie.index.hbase.zknode.path")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is HBASE. This is the root znode that will contain all the znodes created/used by HBase",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ZK_NODE_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasezkport"},"hoodie.index.hbase.zkport")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is HBASE. HBase ZK Quorum port to connect to",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ZKPORT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasezkquorum"},"hoodie.index.hbase.zkquorum")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is HBASE. HBase ZK Quorum url to connect to",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ZKQUORUM"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiehbaseindexupdatepartitionpath"},"hoodie.hbase.index.update.partition.path")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applies if index type is HBASE. When an already existing record is upserted to a new partition compared to whats in storage, this config when set, will delete old record in old partition and will insert it as new record in new partition.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: UPDATE_PARTITION_PATH_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasebucketnumber"},"hoodie.index.hbase.bucket.number")),(0,r.yg)("td",{parentName:"tr",align:null},"8"),(0,r.yg)("td",{parentName:"tr",align:null},"Only applicable when using RebalancedSparkHoodieHBaseIndex, same as hbase regions count can get the best performance",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BUCKET_NUMBER"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasedesired_puts_time_in_secs"},"hoodie.index.hbase.desired_puts_time_in_secs")),(0,r.yg)("td",{parentName:"tr",align:null},"600"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DESIRED_PUTS_TIME_IN_SECONDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasedynamic_qps"},"hoodie.index.hbase.dynamic_qps")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Property to decide if HBASE_QPS_FRACTION_PROP is dynamically calculated based on write volume.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMPUTE_QPS_DYNAMICALLY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasegetbatchsize"},"hoodie.index.hbase.get.batch.size")),(0,r.yg)("td",{parentName:"tr",align:null},"100"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls the batch size for performing gets against HBase. Batching improves throughput, by saving round trips.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: GET_BATCH_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasemaxqpsperregionserver"},"hoodie.index.hbase.max.qps.per.region.server")),(0,r.yg)("td",{parentName:"tr",align:null},"1000"),(0,r.yg)("td",{parentName:"tr",align:null},"Property to set maximum QPS allowed per Region Server. This should be same across various jobs. This is intended to  limit the aggregate QPS generated across various jobs to an Hbase Region Server. It is recommended to set this  value based on global indexing throughput needs and most importantly, how much the HBase installation in use is  able to tolerate without Region Servers going down.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_QPS_PER_REGION_SERVER"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbaseputbatchsize"},"hoodie.index.hbase.put.batch.size")),(0,r.yg)("td",{parentName:"tr",align:null},"100"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls the batch size for performing puts against HBase. Batching improves throughput, by saving round trips.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PUT_BATCH_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbaseputbatchsizeautocompute"},"hoodie.index.hbase.put.batch.size.autocompute")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Property to set to enable auto computation of put batch size",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PUT_BATCH_SIZE_AUTO_COMPUTE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbaseqpsallocatorclass"},"hoodie.index.hbase.qps.allocator.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.index.hbase.DefaultHBaseQPSResourceAllocator"),(0,r.yg)("td",{parentName:"tr",align:null},"Property to set which implementation of HBase QPS resource allocator to be used, whichcontrols the batching rate dynamically.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: QPS_ALLOCATOR_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbaseqpsfraction"},"hoodie.index.hbase.qps.fraction")),(0,r.yg)("td",{parentName:"tr",align:null},"0.5"),(0,r.yg)("td",{parentName:"tr",align:null},"Property to set the fraction of the global share of QPS that should be allocated to this job. Let's say there are 3 jobs which have input size in terms of number of rows required for HbaseIndexing as x, 2x, 3x respectively. Then this fraction for the jobs would be (0.17) 1/6, 0.33 (2/6) and 0.5 (3/6) respectively. Default is 50%, which means a total of 2 jobs can run using HbaseIndex without overwhelming Region Servers.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: QPS_FRACTION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbaserollbacksync"},"hoodie.index.hbase.rollback.sync")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, the rollback method will delete the last failed task index. The default value is false. Because deleting the index will add extra load on the Hbase cluster for each rollback",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ROLLBACK_SYNC_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasesecurityauthentication"},"hoodie.index.hbase.security.authentication")),(0,r.yg)("td",{parentName:"tr",align:null},"simple"),(0,r.yg)("td",{parentName:"tr",align:null},"Property to decide if the hbase cluster secure authentication is enabled or not. Possible values are 'simple' (no authentication), and 'kerberos'.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SECURITY_AUTHENTICATION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasezkconnection_timeout_ms"},"hoodie.index.hbase.zk.connection_timeout_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"15000"),(0,r.yg)("td",{parentName:"tr",align:null},"Timeout to use for establishing connection with zookeeper, from HBase client.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ZK_CONNECTION_TIMEOUT_MS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasezksession_timeout_ms"},"hoodie.index.hbase.zk.session_timeout_ms")),(0,r.yg)("td",{parentName:"tr",align:null},"60000"),(0,r.yg)("td",{parentName:"tr",align:null},"Session timeout value to use for Zookeeper failure detection, for the HBase client.Lower this value, if you want to fail faster.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ZK_SESSION_TIMEOUT_MS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieindexhbasezkpathqps_root"},"hoodie.index.hbase.zkpath.qps_root")),(0,r.yg)("td",{parentName:"tr",align:null},"/QPS_ROOT"),(0,r.yg)("td",{parentName:"tr",align:null},"chroot in zookeeper, to use for all qps allocation co-ordination.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ZKPATH_QPS_ROOT"))))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"META_SYNC"},"Metastore and Catalog Sync Configs"),(0,r.yg)("p",null,"Configurations used by the Hudi to sync metadata to external metastores and catalogs."),(0,r.yg)("h3",{id:"Common-Metadata-Sync-Configs"},"Common Metadata Sync Configs"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Common-Metadata-Sync-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncenable"},"hoodie.datasource.meta.sync.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable Syncing the Hudi Table with an external meta store or data catalog.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_ENABLED"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Common-Metadata-Sync-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncassume_date_partitioning"},"hoodie.datasource.hive_sync.assume_date_partitioning")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Assume partitioning is yyyy/MM/dd",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_ASSUME_DATE_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbase_file_format"},"hoodie.datasource.hive_sync.base_file_format")),(0,r.yg)("td",{parentName:"tr",align:null},"PARQUET"),(0,r.yg)("td",{parentName:"tr",align:null},"Base file format for the sync.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_BASE_FILE_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncdatabase"},"hoodie.datasource.hive_sync.database")),(0,r.yg)("td",{parentName:"tr",align:null},"default"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the destination database that we should sync the hudi table to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DATABASE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpartition_extractor_class"},"hoodie.datasource.hive_sync.partition_extractor_class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.hive.MultiPartKeysValueExtractor"),(0,r.yg)("td",{parentName:"tr",align:null},"Class which implements PartitionValueExtractor to extract the partition values, default 'org.apache.hudi.hive.MultiPartKeysValueExtractor'.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_PARTITION_EXTRACTOR_CLASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpartition_fields"},"hoodie.datasource.hive_sync.partition_fields")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Field in the table to use for determining hive partition columns.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_PARTITION_FIELDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synctable"},"hoodie.datasource.hive_sync.table")),(0,r.yg)("td",{parentName:"tr",align:null},"unknown"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the destination table that we should sync the hudi table to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_TABLE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncbasepath"},"hoodie.datasource.meta.sync.base.path")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Base path of the hoodie table to sync",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_BASE_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemeta_syncconditionsync"},"hoodie.datasource.meta_sync.condition.sync")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, only sync on conditions like schema change or partition change.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_CONDITIONAL_SYNC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncdecode_partition"},"hoodie.meta.sync.decode_partition")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, meta sync will url-decode the partition path, as it is deemed as url-encoded. Default to false.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DECODE_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncincremental"},"hoodie.meta.sync.incremental")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to incrementally sync the partitions to the metastore, i.e., only added, changed, and deleted partitions based on the commit metadata. If set to ",(0,r.yg)("inlineCode",{parentName:"td"},"false"),", the meta sync executes a full partition sync operation when partitions are lost.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_INCREMENTAL"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncmetadata_file_listing"},"hoodie.meta.sync.metadata_file_listing")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable the internal metadata table for file listing for syncing with metastores",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_USE_FILE_LISTING_FROM_METADATA"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncsync_snapshot_with_table_name"},"hoodie.meta.sync.sync_snapshot_with_table_name")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"sync meta info to origin table if enable",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_SNAPSHOT_WITH_TABLE_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemeta_syncsparkversion"},"hoodie.meta_sync.spark.version")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"The spark version used when syncing with a metastore.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_SPARK_VERSION"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Glue-catalog-sync-based-client-Configurations"},"Glue catalog sync based client Configurations"),(0,r.yg)("p",null,"Configs that control Glue catalog sync based client."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Glue-catalog-sync-based-client-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncgluemetadata_file_listing"},"hoodie.datasource.meta.sync.glue.metadata_file_listing")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Makes athena use the metadata table to list partitions and files. Currently it won't benefit from other features such stats indexes",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: GLUE_METADATA_FILE_LISTING"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncglueskip_table_archive"},"hoodie.datasource.meta.sync.glue.skip_table_archive")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Glue catalog sync based client will skip archiving the table version if this config is set to true",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: GLUE_SKIP_TABLE_ARCHIVE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"BigQuery-Sync-Configs"},"BigQuery Sync Configs"),(0,r.yg)("p",null,"Configurations used by the Hudi to sync metadata to Google BigQuery."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#BigQuery-Sync-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncenable"},"hoodie.datasource.meta.sync.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable Syncing the Hudi Table with an external meta store or data catalog.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_ENABLED"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#BigQuery-Sync-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysyncbig_lake_connection_id"},"hoodie.gcp.bigquery.sync.big_lake_connection_id")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The Big Lake connection ID to use",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_BIG_LAKE_CONNECTION_ID"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysyncdataset_location"},"hoodie.gcp.bigquery.sync.dataset_location")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Location of the target dataset in BigQuery",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_DATASET_LOCATION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysyncproject_id"},"hoodie.gcp.bigquery.sync.project_id")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the target project in BigQuery",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_PROJECT_ID"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysyncsource_uri"},"hoodie.gcp.bigquery.sync.source_uri")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the source uri gcs path of the table",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_SOURCE_URI"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysyncsource_uri_prefix"},"hoodie.gcp.bigquery.sync.source_uri_prefix")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the source uri gcs path prefix of the table",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_SOURCE_URI_PREFIX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncassume_date_partitioning"},"hoodie.datasource.hive_sync.assume_date_partitioning")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Assume partitioning is yyyy/MM/dd",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_ASSUME_DATE_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbase_file_format"},"hoodie.datasource.hive_sync.base_file_format")),(0,r.yg)("td",{parentName:"tr",align:null},"PARQUET"),(0,r.yg)("td",{parentName:"tr",align:null},"Base file format for the sync.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_BASE_FILE_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncdatabase"},"hoodie.datasource.hive_sync.database")),(0,r.yg)("td",{parentName:"tr",align:null},"default"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the destination database that we should sync the hudi table to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DATABASE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpartition_extractor_class"},"hoodie.datasource.hive_sync.partition_extractor_class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.hive.MultiPartKeysValueExtractor"),(0,r.yg)("td",{parentName:"tr",align:null},"Class which implements PartitionValueExtractor to extract the partition values, default 'org.apache.hudi.hive.MultiPartKeysValueExtractor'.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_PARTITION_EXTRACTOR_CLASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpartition_fields"},"hoodie.datasource.hive_sync.partition_fields")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Field in the table to use for determining hive partition columns.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_PARTITION_FIELDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synctable"},"hoodie.datasource.hive_sync.table")),(0,r.yg)("td",{parentName:"tr",align:null},"unknown"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the destination table that we should sync the hudi table to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_TABLE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncbasepath"},"hoodie.datasource.meta.sync.base.path")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Base path of the hoodie table to sync",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_BASE_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemeta_syncconditionsync"},"hoodie.datasource.meta_sync.condition.sync")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, only sync on conditions like schema change or partition change.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_CONDITIONAL_SYNC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysyncassume_date_partitioning"},"hoodie.gcp.bigquery.sync.assume_date_partitioning")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Assume standard yyyy/mm/dd partitioning, this exists to support backward compatibility. If you use hoodie 0.3.x, do not set this parameter",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_ASSUME_DATE_PARTITIONING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysyncbase_path"},"hoodie.gcp.bigquery.sync.base_path")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Base path of the hoodie table to sync",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_SYNC_BASE_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysyncdataset_name"},"hoodie.gcp.bigquery.sync.dataset_name")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the target dataset in BigQuery",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_DATASET_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysyncpartition_fields"},"hoodie.gcp.bigquery.sync.partition_fields")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Comma-delimited partition fields. Default to non-partitioned.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_PARTITION_FIELDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysyncrequire_partition_filter"},"hoodie.gcp.bigquery.sync.require_partition_filter")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, configure table to require a partition filter to be specified when querying the table",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_REQUIRE_PARTITION_FILTER"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysynctable_name"},"hoodie.gcp.bigquery.sync.table_name")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the target table in BigQuery",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_TABLE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysyncuse_bq_manifest_file"},"hoodie.gcp.bigquery.sync.use_bq_manifest_file")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, generate a manifest file with data file absolute paths and use BigQuery manifest file support to directly create one external table over the Hudi table. If false (default), generate a manifest file with data file names and create two external tables and one view in BigQuery. Query the view for the same results as querying the Hudi table",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_USE_BQ_MANIFEST_FILE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiegcpbigquerysyncuse_file_listing_from_metadata"},"hoodie.gcp.bigquery.sync.use_file_listing_from_metadata")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Fetch file listing from Hudi's metadata",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BIGQUERY_SYNC_USE_FILE_LISTING_FROM_METADATA"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncdecode_partition"},"hoodie.meta.sync.decode_partition")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, meta sync will url-decode the partition path, as it is deemed as url-encoded. Default to false.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DECODE_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncincremental"},"hoodie.meta.sync.incremental")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to incrementally sync the partitions to the metastore, i.e., only added, changed, and deleted partitions based on the commit metadata. If set to ",(0,r.yg)("inlineCode",{parentName:"td"},"false"),", the meta sync executes a full partition sync operation when partitions are lost.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_INCREMENTAL"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncmetadata_file_listing"},"hoodie.meta.sync.metadata_file_listing")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable the internal metadata table for file listing for syncing with metastores",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_USE_FILE_LISTING_FROM_METADATA"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncsync_snapshot_with_table_name"},"hoodie.meta.sync.sync_snapshot_with_table_name")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"sync meta info to origin table if enable",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_SNAPSHOT_WITH_TABLE_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemeta_syncsparkversion"},"hoodie.meta_sync.spark.version")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"The spark version used when syncing with a metastore.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_SPARK_VERSION"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Hive-Sync-Configs"},"Hive Sync Configs"),(0,r.yg)("p",null,"Configurations used by the Hudi to sync metadata to Hive Metastore."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Hive-Sync-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncmode"},"hoodie.datasource.hive_sync.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Mode to choose for Hive ops. Valid values are hms, jdbc and hiveql.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_MODE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncenable"},"hoodie.datasource.hive_sync.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, register/sync the table to Apache Hive metastore.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncjdbcurl"},"hoodie.datasource.hive_sync.jdbcurl")),(0,r.yg)("td",{parentName:"tr",align:null},"jdbc:hive2://localhost:10000"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive metastore url",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_URL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncmetastoreuris"},"hoodie.datasource.hive_sync.metastore.uris")),(0,r.yg)("td",{parentName:"tr",align:null},"thrift://localhost:9083"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive metastore url",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METASTORE_URIS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncenable"},"hoodie.datasource.meta.sync.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable Syncing the Hudi Table with an external meta store or data catalog.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_ENABLED"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Hive-Sync-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncserde_properties"},"hoodie.datasource.hive_sync.serde_properties")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Serde properties to hive table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_TABLE_SERDE_PROPERTIES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synctable_properties"},"hoodie.datasource.hive_sync.table_properties")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Additional properties to store with table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_TABLE_PROPERTIES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncassume_date_partitioning"},"hoodie.datasource.hive_sync.assume_date_partitioning")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Assume partitioning is yyyy/MM/dd",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_ASSUME_DATE_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncauto_create_database"},"hoodie.datasource.hive_sync.auto_create_database")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Auto create hive database if does not exists",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_AUTO_CREATE_DATABASE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbase_file_format"},"hoodie.datasource.hive_sync.base_file_format")),(0,r.yg)("td",{parentName:"tr",align:null},"PARQUET"),(0,r.yg)("td",{parentName:"tr",align:null},"Base file format for the sync.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_BASE_FILE_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbatch_num"},"hoodie.datasource.hive_sync.batch_num")),(0,r.yg)("td",{parentName:"tr",align:null},"1000"),(0,r.yg)("td",{parentName:"tr",align:null},"The number of partitions one batch when synchronous partitions to hive.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_BATCH_SYNC_PARTITION_NUM"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbucket_sync"},"hoodie.datasource.hive_sync.bucket_sync")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether sync hive metastore bucket specification when using bucket index.The specification is 'CLUSTERED BY (trace_id) SORTED BY (trace_id ASC) INTO 65536 BUCKETS'",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_BUCKET_SYNC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbucket_sync_spec"},"hoodie.datasource.hive_sync.bucket_sync_spec")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"The hive metastore bucket specification when using bucket index.The specification is 'CLUSTERED BY (trace_id) SORTED BY (trace_id ASC) INTO 65536 BUCKETS'",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_BUCKET_SYNC_SPEC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synccreate_managed_table"},"hoodie.datasource.hive_sync.create_managed_table")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to sync the table as managed table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_CREATE_MANAGED_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncdatabase"},"hoodie.datasource.hive_sync.database")),(0,r.yg)("td",{parentName:"tr",align:null},"default"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the destination database that we should sync the hudi table to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DATABASE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncfilter_pushdown_enabled"},"hoodie.datasource.hive_sync.filter_pushdown_enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to enable push down partitions by filter",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_FILTER_PUSHDOWN_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncfilter_pushdown_max_size"},"hoodie.datasource.hive_sync.filter_pushdown_max_size")),(0,r.yg)("td",{parentName:"tr",align:null},"1000"),(0,r.yg)("td",{parentName:"tr",align:null},"Max size limit to push down partition filters, if the estimate push down filters exceed this size, will directly try to fetch all partitions",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_FILTER_PUSHDOWN_MAX_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncignore_exceptions"},"hoodie.datasource.hive_sync.ignore_exceptions")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Ignore exceptions when syncing with Hive.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_IGNORE_EXCEPTIONS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncomit_metadata_fields"},"hoodie.datasource.hive_sync.omit_metadata_fields")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to omit the hoodie metadata fields in the target table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_OMIT_METADATA_FIELDS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpartition_extractor_class"},"hoodie.datasource.hive_sync.partition_extractor_class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.hive.MultiPartKeysValueExtractor"),(0,r.yg)("td",{parentName:"tr",align:null},"Class which implements PartitionValueExtractor to extract the partition values, default 'org.apache.hudi.hive.MultiPartKeysValueExtractor'.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_PARTITION_EXTRACTOR_CLASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpartition_fields"},"hoodie.datasource.hive_sync.partition_fields")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Field in the table to use for determining hive partition columns.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_PARTITION_FIELDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpassword"},"hoodie.datasource.hive_sync.password")),(0,r.yg)("td",{parentName:"tr",align:null},"hive"),(0,r.yg)("td",{parentName:"tr",align:null},"hive password to use",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_PASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncschema_string_length_thresh"},"hoodie.datasource.hive_sync.schema_string_length_thresh")),(0,r.yg)("td",{parentName:"tr",align:null},"4000"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_SCHEMA_STRING_LENGTH_THRESHOLD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncskip_ro_suffix"},"hoodie.datasource.hive_sync.skip_ro_suffix")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Skip the _ro suffix for Read optimized table, when registering",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SKIP_RO_SUFFIX_FOR_READ_OPTIMIZED_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncsupport_timestamp"},"hoodie.datasource.hive_sync.support_timestamp")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"\u2018INT64\u2019 with original type TIMESTAMP_MICROS is converted to hive \u2018timestamp\u2019 type. Disabled by default for backward compatibility.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SUPPORT_TIMESTAMP_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncsync_as_datasource"},"hoodie.datasource.hive_sync.sync_as_datasource")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_AS_DATA_SOURCE_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncsync_comment"},"hoodie.datasource.hive_sync.sync_comment")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to sync the table column comments while syncing the table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_COMMENT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synctable"},"hoodie.datasource.hive_sync.table")),(0,r.yg)("td",{parentName:"tr",align:null},"unknown"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the destination table that we should sync the hudi table to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_TABLE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synctablestrategy"},"hoodie.datasource.hive_sync.table.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"ALL"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive table synchronization strategy. Available option: RO, RT, ALL.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_TABLE_STRATEGY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncuse_jdbc"},"hoodie.datasource.hive_sync.use_jdbc")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Use JDBC when hive synchronization is enabled",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_USE_JDBC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncuse_pre_apache_input_format"},"hoodie.datasource.hive_sync.use_pre_apache_input_format")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Flag to choose InputFormat under com.uber.hoodie package instead of org.apache.hudi package. Use this when you are in the process of migrating from com.uber.hoodie to org.apache.hudi. Stop using this after you migrated the table definition to org.apache.hudi input format",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_USE_PRE_APACHE_INPUT_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncusername"},"hoodie.datasource.hive_sync.username")),(0,r.yg)("td",{parentName:"tr",align:null},"hive"),(0,r.yg)("td",{parentName:"tr",align:null},"hive user name to use",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_USER"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncbasepath"},"hoodie.datasource.meta.sync.base.path")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Base path of the hoodie table to sync",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_BASE_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemeta_syncconditionsync"},"hoodie.datasource.meta_sync.condition.sync")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, only sync on conditions like schema change or partition change.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_CONDITIONAL_SYNC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncdecode_partition"},"hoodie.meta.sync.decode_partition")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, meta sync will url-decode the partition path, as it is deemed as url-encoded. Default to false.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DECODE_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncincremental"},"hoodie.meta.sync.incremental")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to incrementally sync the partitions to the metastore, i.e., only added, changed, and deleted partitions based on the commit metadata. If set to ",(0,r.yg)("inlineCode",{parentName:"td"},"false"),", the meta sync executes a full partition sync operation when partitions are lost.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_INCREMENTAL"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncmetadata_file_listing"},"hoodie.meta.sync.metadata_file_listing")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable the internal metadata table for file listing for syncing with metastores",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_USE_FILE_LISTING_FROM_METADATA"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncsync_snapshot_with_table_name"},"hoodie.meta.sync.sync_snapshot_with_table_name")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"sync meta info to origin table if enable",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_SNAPSHOT_WITH_TABLE_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemeta_syncsparkversion"},"hoodie.meta_sync.spark.version")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"The spark version used when syncing with a metastore.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_SPARK_VERSION"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Global-Hive-Sync-Configs"},"Global Hive Sync Configs"),(0,r.yg)("p",null,"Global replication configurations used by the Hudi to sync metadata to Hive Metastore."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Global-Hive-Sync-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncmode"},"hoodie.datasource.hive_sync.mode")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Mode to choose for Hive ops. Valid values are hms, jdbc and hiveql.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_MODE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncenable"},"hoodie.datasource.hive_sync.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true, register/sync the table to Apache Hive metastore.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncjdbcurl"},"hoodie.datasource.hive_sync.jdbcurl")),(0,r.yg)("td",{parentName:"tr",align:null},"jdbc:hive2://localhost:10000"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive metastore url",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_URL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncmetastoreuris"},"hoodie.datasource.hive_sync.metastore.uris")),(0,r.yg)("td",{parentName:"tr",align:null},"thrift://localhost:9083"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive metastore url",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METASTORE_URIS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncenable"},"hoodie.datasource.meta.sync.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable Syncing the Hudi Table with an external meta store or data catalog.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_ENABLED"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Global-Hive-Sync-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncserde_properties"},"hoodie.datasource.hive_sync.serde_properties")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Serde properties to hive table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_TABLE_SERDE_PROPERTIES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synctable_properties"},"hoodie.datasource.hive_sync.table_properties")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Additional properties to store with table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_TABLE_PROPERTIES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemeta_syncglobalreplicatetimestamp"},"hoodie.meta_sync.global.replicate.timestamp")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_GLOBAL_REPLICATE_TIMESTAMP"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncassume_date_partitioning"},"hoodie.datasource.hive_sync.assume_date_partitioning")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Assume partitioning is yyyy/MM/dd",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_ASSUME_DATE_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncauto_create_database"},"hoodie.datasource.hive_sync.auto_create_database")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Auto create hive database if does not exists",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_AUTO_CREATE_DATABASE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbase_file_format"},"hoodie.datasource.hive_sync.base_file_format")),(0,r.yg)("td",{parentName:"tr",align:null},"PARQUET"),(0,r.yg)("td",{parentName:"tr",align:null},"Base file format for the sync.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_BASE_FILE_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbatch_num"},"hoodie.datasource.hive_sync.batch_num")),(0,r.yg)("td",{parentName:"tr",align:null},"1000"),(0,r.yg)("td",{parentName:"tr",align:null},"The number of partitions one batch when synchronous partitions to hive.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_BATCH_SYNC_PARTITION_NUM"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbucket_sync"},"hoodie.datasource.hive_sync.bucket_sync")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether sync hive metastore bucket specification when using bucket index.The specification is 'CLUSTERED BY (trace_id) SORTED BY (trace_id ASC) INTO 65536 BUCKETS'",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_BUCKET_SYNC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbucket_sync_spec"},"hoodie.datasource.hive_sync.bucket_sync_spec")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"The hive metastore bucket specification when using bucket index.The specification is 'CLUSTERED BY (trace_id) SORTED BY (trace_id ASC) INTO 65536 BUCKETS'",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_BUCKET_SYNC_SPEC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synccreate_managed_table"},"hoodie.datasource.hive_sync.create_managed_table")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to sync the table as managed table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_CREATE_MANAGED_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncdatabase"},"hoodie.datasource.hive_sync.database")),(0,r.yg)("td",{parentName:"tr",align:null},"default"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the destination database that we should sync the hudi table to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DATABASE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncfilter_pushdown_enabled"},"hoodie.datasource.hive_sync.filter_pushdown_enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to enable push down partitions by filter",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_FILTER_PUSHDOWN_ENABLED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncfilter_pushdown_max_size"},"hoodie.datasource.hive_sync.filter_pushdown_max_size")),(0,r.yg)("td",{parentName:"tr",align:null},"1000"),(0,r.yg)("td",{parentName:"tr",align:null},"Max size limit to push down partition filters, if the estimate push down filters exceed this size, will directly try to fetch all partitions",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_FILTER_PUSHDOWN_MAX_SIZE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncignore_exceptions"},"hoodie.datasource.hive_sync.ignore_exceptions")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Ignore exceptions when syncing with Hive.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_IGNORE_EXCEPTIONS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncomit_metadata_fields"},"hoodie.datasource.hive_sync.omit_metadata_fields")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to omit the hoodie metadata fields in the target table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_OMIT_METADATA_FIELDS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpartition_extractor_class"},"hoodie.datasource.hive_sync.partition_extractor_class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.hive.MultiPartKeysValueExtractor"),(0,r.yg)("td",{parentName:"tr",align:null},"Class which implements PartitionValueExtractor to extract the partition values, default 'org.apache.hudi.hive.MultiPartKeysValueExtractor'.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_PARTITION_EXTRACTOR_CLASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpartition_fields"},"hoodie.datasource.hive_sync.partition_fields")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Field in the table to use for determining hive partition columns.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_PARTITION_FIELDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpassword"},"hoodie.datasource.hive_sync.password")),(0,r.yg)("td",{parentName:"tr",align:null},"hive"),(0,r.yg)("td",{parentName:"tr",align:null},"hive password to use",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_PASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncschema_string_length_thresh"},"hoodie.datasource.hive_sync.schema_string_length_thresh")),(0,r.yg)("td",{parentName:"tr",align:null},"4000"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_SCHEMA_STRING_LENGTH_THRESHOLD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncskip_ro_suffix"},"hoodie.datasource.hive_sync.skip_ro_suffix")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Skip the _ro suffix for Read optimized table, when registering",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SKIP_RO_SUFFIX_FOR_READ_OPTIMIZED_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncsupport_timestamp"},"hoodie.datasource.hive_sync.support_timestamp")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"\u2018INT64\u2019 with original type TIMESTAMP_MICROS is converted to hive \u2018timestamp\u2019 type. Disabled by default for backward compatibility.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SUPPORT_TIMESTAMP_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncsync_as_datasource"},"hoodie.datasource.hive_sync.sync_as_datasource")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_AS_DATA_SOURCE_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncsync_comment"},"hoodie.datasource.hive_sync.sync_comment")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to sync the table column comments while syncing the table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_COMMENT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synctable"},"hoodie.datasource.hive_sync.table")),(0,r.yg)("td",{parentName:"tr",align:null},"unknown"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the destination table that we should sync the hudi table to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_TABLE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synctablestrategy"},"hoodie.datasource.hive_sync.table.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"ALL"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive table synchronization strategy. Available option: RO, RT, ALL.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_SYNC_TABLE_STRATEGY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncuse_jdbc"},"hoodie.datasource.hive_sync.use_jdbc")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Use JDBC when hive synchronization is enabled",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_USE_JDBC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncuse_pre_apache_input_format"},"hoodie.datasource.hive_sync.use_pre_apache_input_format")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Flag to choose InputFormat under com.uber.hoodie package instead of org.apache.hudi package. Use this when you are in the process of migrating from com.uber.hoodie to org.apache.hudi. Stop using this after you migrated the table definition to org.apache.hudi input format",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_USE_PRE_APACHE_INPUT_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncusername"},"hoodie.datasource.hive_sync.username")),(0,r.yg)("td",{parentName:"tr",align:null},"hive"),(0,r.yg)("td",{parentName:"tr",align:null},"hive user name to use",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HIVE_USER"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncbasepath"},"hoodie.datasource.meta.sync.base.path")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Base path of the hoodie table to sync",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_BASE_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemeta_syncconditionsync"},"hoodie.datasource.meta_sync.condition.sync")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, only sync on conditions like schema change or partition change.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_CONDITIONAL_SYNC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncdecode_partition"},"hoodie.meta.sync.decode_partition")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, meta sync will url-decode the partition path, as it is deemed as url-encoded. Default to false.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DECODE_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncincremental"},"hoodie.meta.sync.incremental")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to incrementally sync the partitions to the metastore, i.e., only added, changed, and deleted partitions based on the commit metadata. If set to ",(0,r.yg)("inlineCode",{parentName:"td"},"false"),", the meta sync executes a full partition sync operation when partitions are lost.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_INCREMENTAL"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncmetadata_file_listing"},"hoodie.meta.sync.metadata_file_listing")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable the internal metadata table for file listing for syncing with metastores",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_USE_FILE_LISTING_FROM_METADATA"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncsync_snapshot_with_table_name"},"hoodie.meta.sync.sync_snapshot_with_table_name")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"sync meta info to origin table if enable",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_SNAPSHOT_WITH_TABLE_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemeta_syncsparkversion"},"hoodie.meta_sync.spark.version")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"The spark version used when syncing with a metastore.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_SPARK_VERSION"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"DataHub-Sync-Configs"},"DataHub Sync Configs"),(0,r.yg)("p",null,"Configurations used by the Hudi to sync metadata to DataHub."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#DataHub-Sync-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncenable"},"hoodie.datasource.meta.sync.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable Syncing the Hudi Table with an external meta store or data catalog.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_ENABLED"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#DataHub-Sync-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncdatahubemitterserver"},"hoodie.meta.sync.datahub.emitter.server")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Server URL of the DataHub instance.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DATAHUB_EMITTER_SERVER"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncdatahubemittersupplierclass"},"hoodie.meta.sync.datahub.emitter.supplier.class")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Pluggable class to supply a DataHub REST emitter to connect to the DataHub instance. This overwrites other emitter configs.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DATAHUB_EMITTER_SUPPLIER_CLASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncdatahubemittertoken"},"hoodie.meta.sync.datahub.emitter.token")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Auth token to connect to the DataHub instance.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DATAHUB_EMITTER_TOKEN"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncassume_date_partitioning"},"hoodie.datasource.hive_sync.assume_date_partitioning")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Assume partitioning is yyyy/MM/dd",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_ASSUME_DATE_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncbase_file_format"},"hoodie.datasource.hive_sync.base_file_format")),(0,r.yg)("td",{parentName:"tr",align:null},"PARQUET"),(0,r.yg)("td",{parentName:"tr",align:null},"Base file format for the sync.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_BASE_FILE_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncdatabase"},"hoodie.datasource.hive_sync.database")),(0,r.yg)("td",{parentName:"tr",align:null},"default"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the destination database that we should sync the hudi table to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DATABASE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpartition_extractor_class"},"hoodie.datasource.hive_sync.partition_extractor_class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.hive.MultiPartKeysValueExtractor"),(0,r.yg)("td",{parentName:"tr",align:null},"Class which implements PartitionValueExtractor to extract the partition values, default 'org.apache.hudi.hive.MultiPartKeysValueExtractor'.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_PARTITION_EXTRACTOR_CLASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_syncpartition_fields"},"hoodie.datasource.hive_sync.partition_fields")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Field in the table to use for determining hive partition columns.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_PARTITION_FIELDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcehive_synctable"},"hoodie.datasource.hive_sync.table")),(0,r.yg)("td",{parentName:"tr",align:null},"unknown"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the destination table that we should sync the hudi table to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_TABLE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemetasyncbasepath"},"hoodie.datasource.meta.sync.base.path")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Base path of the hoodie table to sync",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_BASE_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiedatasourcemeta_syncconditionsync"},"hoodie.datasource.meta_sync.condition.sync")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, only sync on conditions like schema change or partition change.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_CONDITIONAL_SYNC"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncdatahubdataplatformname"},"hoodie.meta.sync.datahub.dataplatform.name")),(0,r.yg)("td",{parentName:"tr",align:null},"hudi"),(0,r.yg)("td",{parentName:"tr",align:null},"String used to represent Hudi when creating its corresponding DataPlatform entity within Datahub",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DATAHUB_DATAPLATFORM_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncdatahubdatasetenv"},"hoodie.meta.sync.datahub.dataset.env")),(0,r.yg)("td",{parentName:"tr",align:null},"DEV"),(0,r.yg)("td",{parentName:"tr",align:null},"Environment to use when pushing entities to Datahub",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DATAHUB_DATASET_ENV"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncdatahubdatasetidentifierclass"},"hoodie.meta.sync.datahub.dataset.identifier.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.sync.datahub.config.HoodieDataHubDatasetIdentifier"),(0,r.yg)("td",{parentName:"tr",align:null},"Pluggable class to help provide info to identify a DataHub Dataset.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DATAHUB_DATASET_IDENTIFIER_CLASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncdecode_partition"},"hoodie.meta.sync.decode_partition")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, meta sync will url-decode the partition path, as it is deemed as url-encoded. Default to false.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_DECODE_PARTITION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncincremental"},"hoodie.meta.sync.incremental")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to incrementally sync the partitions to the metastore, i.e., only added, changed, and deleted partitions based on the commit metadata. If set to ",(0,r.yg)("inlineCode",{parentName:"td"},"false"),", the meta sync executes a full partition sync operation when partitions are lost.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_INCREMENTAL"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncmetadata_file_listing"},"hoodie.meta.sync.metadata_file_listing")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable the internal metadata table for file listing for syncing with metastores",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_USE_FILE_LISTING_FROM_METADATA"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncsync_snapshot_with_table_name"},"hoodie.meta.sync.sync_snapshot_with_table_name")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"sync meta info to origin table if enable",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_SNAPSHOT_WITH_TABLE_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemeta_syncsparkversion"},"hoodie.meta_sync.spark.version")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"The spark version used when syncing with a metastore.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_SPARK_VERSION"))))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"METRICS"},"Metrics Configs"),(0,r.yg)("p",null,"These set of configs are used to enable monitoring and reporting of key Hudi stats and metrics."),(0,r.yg)("h3",{id:"Metrics-Configurations-for-Amazon-CloudWatch"},"Metrics Configurations for Amazon CloudWatch"),(0,r.yg)("p",null,"Enables reporting on Hudi metrics using Amazon CloudWatch.  Hudi publishes metrics on every commit, clean, rollback etc."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Metrics-Configurations-for-Amazon-CloudWatch-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricscloudwatchmaxDatumsPerRequest"},"hoodie.metrics.cloudwatch.maxDatumsPerRequest")),(0,r.yg)("td",{parentName:"tr",align:null},"20"),(0,r.yg)("td",{parentName:"tr",align:null},"Max number of Datums per request",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_DATUMS_PER_REQUEST"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricscloudwatchmetricprefix"},"hoodie.metrics.cloudwatch.metric.prefix")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Metric prefix of reporter",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METRIC_PREFIX"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricscloudwatchnamespace"},"hoodie.metrics.cloudwatch.namespace")),(0,r.yg)("td",{parentName:"tr",align:null},"Hudi"),(0,r.yg)("td",{parentName:"tr",align:null},"Namespace of reporter",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METRIC_NAMESPACE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricscloudwatchreportperiodseconds"},"hoodie.metrics.cloudwatch.report.period.seconds")),(0,r.yg)("td",{parentName:"tr",align:null},"60"),(0,r.yg)("td",{parentName:"tr",align:null},"Reporting interval in seconds",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REPORT_PERIOD_SECONDS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Metrics-Configurations"},"Metrics Configurations"),(0,r.yg)("p",null,"Enables reporting on Hudi metrics. Hudi publishes metrics on every commit, clean, rollback etc. The following sections list the supported reporters."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Metrics-Configurations-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricson"},"hoodie.metrics.on")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Turn on/off metrics reporting. off by default.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TURN_METRICS_ON"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.5.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsreportertype"},"hoodie.metrics.reporter.type")),(0,r.yg)("td",{parentName:"tr",align:null},"GRAPHITE"),(0,r.yg)("td",{parentName:"tr",align:null},"Type of metrics reporter.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METRICS_REPORTER_TYPE_VALUE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.5.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricscompactionlogblockson"},"hoodie.metricscompaction.log.blocks.on")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Turn on/off metrics reporting for log blocks with compaction commit. off by default.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TURN_METRICS_COMPACTION_LOG_BLOCKS_ON"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Metrics-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsexecutorenable"},"hoodie.metrics.executor.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EXECUTOR_METRICS_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.7.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsconfigsproperties"},"hoodie.metrics.configs.properties")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Comma separated list of config file paths for metric exporter configs",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METRICS_REPORTER_FILE_BASED_CONFIGS_PATH"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricslockenable"},"hoodie.metrics.lock.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable metrics for locking infra. Useful when operating in multiwriter mode",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOCK_METRICS_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsreporterclass"},"hoodie.metrics.reporter.class")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METRICS_REPORTER_CLASS_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsreportermetricsnameprefix"},"hoodie.metrics.reporter.metricsname.prefix")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"The prefix given to the metrics names.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METRICS_REPORTER_PREFIX"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.11.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Metrics-Configurations-for-Datadog-reporter"},"Metrics Configurations for Datadog reporter"),(0,r.yg)("p",null,"Enables reporting on Hudi metrics using the Datadog reporter type. Hudi publishes metrics on every commit, clean, rollback etc."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Metrics-Configurations-for-Datadog-reporter-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsdatadogapikey"},"hoodie.metrics.datadog.api.key")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Datadog API key",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: API_KEY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsdatadogapikeysupplier"},"hoodie.metrics.datadog.api.key.supplier")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Datadog API key supplier to supply the API key at runtime. This will take effect if hoodie.metrics.datadog.api.key is not set.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: API_KEY_SUPPLIER"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsdatadogapisite"},"hoodie.metrics.datadog.api.site")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Datadog API site: EU or US",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: API_SITE_VALUE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsdatadogmetrichost"},"hoodie.metrics.datadog.metric.host")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Datadog metric host to be sent along with metrics data.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METRIC_HOST_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsdatadogmetricprefix"},"hoodie.metrics.datadog.metric.prefix")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Datadog metric prefix to be prepended to each metric name with a dot as delimiter. For example, if it is set to foo, foo. will be prepended.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METRIC_PREFIX_VALUE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsdatadogmetrictags"},"hoodie.metrics.datadog.metric.tags")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Datadog metric tags (comma-delimited) to be sent along with metrics data.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: METRIC_TAG_VALUES"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsdatadogapikeyskipvalidation"},"hoodie.metrics.datadog.api.key.skip.validation")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Before sending metrics via Datadog API, whether to skip validating Datadog API key or not. Default to false.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: API_KEY_SKIP_VALIDATION"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsdatadogapitimeoutseconds"},"hoodie.metrics.datadog.api.timeout.seconds")),(0,r.yg)("td",{parentName:"tr",align:null},"3"),(0,r.yg)("td",{parentName:"tr",align:null},"Datadog API timeout in seconds. Default to 3.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: API_TIMEOUT_IN_SECONDS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsdatadogreportperiodseconds"},"hoodie.metrics.datadog.report.period.seconds")),(0,r.yg)("td",{parentName:"tr",align:null},"30"),(0,r.yg)("td",{parentName:"tr",align:null},"Datadog reporting period in seconds. Default to 30.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: REPORT_PERIOD_IN_SECONDS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Metrics-Configurations-for-Graphite"},"Metrics Configurations for Graphite"),(0,r.yg)("p",null,"Enables reporting on Hudi metrics using Graphite.  Hudi publishes metrics on every commit, clean, rollback etc."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Metrics-Configurations-for-Graphite-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsgraphitemetricprefix"},"hoodie.metrics.graphite.metric.prefix")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Standard prefix applied to all metrics. This helps to add datacenter, environment information for e.g",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: GRAPHITE_METRIC_PREFIX_VALUE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.5.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsgraphitehost"},"hoodie.metrics.graphite.host")),(0,r.yg)("td",{parentName:"tr",align:null},"localhost"),(0,r.yg)("td",{parentName:"tr",align:null},"Graphite host to connect to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: GRAPHITE_SERVER_HOST_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.5.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsgraphiteport"},"hoodie.metrics.graphite.port")),(0,r.yg)("td",{parentName:"tr",align:null},"4756"),(0,r.yg)("td",{parentName:"tr",align:null},"Graphite port to connect to.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: GRAPHITE_SERVER_PORT_NUM"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.5.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsgraphitereportperiodseconds"},"hoodie.metrics.graphite.report.period.seconds")),(0,r.yg)("td",{parentName:"tr",align:null},"30"),(0,r.yg)("td",{parentName:"tr",align:null},"Graphite reporting period in seconds. Default to 30.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: GRAPHITE_REPORT_PERIOD_IN_SECONDS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Metrics-Configurations-for-Jmx"},"Metrics Configurations for Jmx"),(0,r.yg)("p",null,"Enables reporting on Hudi metrics using Jmx.  Hudi publishes metrics on every commit, clean, rollback etc."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Metrics-Configurations-for-Jmx-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsjmxhost"},"hoodie.metrics.jmx.host")),(0,r.yg)("td",{parentName:"tr",align:null},"localhost"),(0,r.yg)("td",{parentName:"tr",align:null},"Jmx host to connect to",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: JMX_HOST_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.5.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsjmxport"},"hoodie.metrics.jmx.port")),(0,r.yg)("td",{parentName:"tr",align:null},"9889"),(0,r.yg)("td",{parentName:"tr",align:null},"Jmx port to connect to",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: JMX_PORT_NUM"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.5.1"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Metrics-Configurations-for-Prometheus"},"Metrics Configurations for Prometheus"),(0,r.yg)("p",null,"Enables reporting on Hudi metrics using Prometheus.  Hudi publishes metrics on every commit, clean, rollback etc."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Metrics-Configurations-for-Prometheus-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricsprometheusport"},"hoodie.metrics.prometheus.port")),(0,r.yg)("td",{parentName:"tr",align:null},"9090"),(0,r.yg)("td",{parentName:"tr",align:null},"Port for prometheus server.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PROMETHEUS_PORT_NUM"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricspushgatewaydeleteonshutdown"},"hoodie.metrics.pushgateway.delete.on.shutdown")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Delete the pushgateway info or not when job shutdown, true by default.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PUSHGATEWAY_DELETE_ON_SHUTDOWN_ENABLE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricspushgatewayhost"},"hoodie.metrics.pushgateway.host")),(0,r.yg)("td",{parentName:"tr",align:null},"localhost"),(0,r.yg)("td",{parentName:"tr",align:null},"Hostname of the prometheus push gateway.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PUSHGATEWAY_HOST_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricspushgatewayjobname"},"hoodie.metrics.pushgateway.job.name")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the push gateway job.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PUSHGATEWAY_JOBNAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricspushgatewayport"},"hoodie.metrics.pushgateway.port")),(0,r.yg)("td",{parentName:"tr",align:null},"9091"),(0,r.yg)("td",{parentName:"tr",align:null},"Port for the push gateway.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PUSHGATEWAY_PORT_NUM"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricspushgatewayrandomjobnamesuffix"},"hoodie.metrics.pushgateway.random.job.name.suffix")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether the pushgateway name need a random suffix , default true.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PUSHGATEWAY_RANDOM_JOBNAME_SUFFIX"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricspushgatewayreportlabels"},"hoodie.metrics.pushgateway.report.labels")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"Label for the metrics emitted to the Pushgateway. Labels can be specified with key:value pairs separated by commas",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PUSHGATEWAY_LABELS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetricspushgatewayreportperiodseconds"},"hoodie.metrics.pushgateway.report.period.seconds")),(0,r.yg)("td",{parentName:"tr",align:null},"30"),(0,r.yg)("td",{parentName:"tr",align:null},"Reporting interval in seconds.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PUSHGATEWAY_REPORT_PERIOD_IN_SECONDS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.6.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"RECORD_PAYLOAD"},"Record Payload Config"),(0,r.yg)("p",null,"This is the lowest level of customization offered by Hudi. Record payloads define how to produce new values to upsert based on incoming new record and stored old record. Hudi provides default implementations such as OverwriteWithLatestAvroPayload which simply update table with the latest/last-written record. This can be overridden to a custom class extending HoodieRecordPayload class, on both datasource and WriteClient levels."),(0,r.yg)("h3",{id:"Payload-Configurations"},"Payload Configurations"),(0,r.yg)("p",null,"Payload related configs, that can be leveraged to control merges based on specific business fields in the data."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Payload-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiecompactionpayloadclass"},"hoodie.compaction.payload.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.common.model.OverwriteWithLatestAvroPayload"),(0,r.yg)("td",{parentName:"tr",align:null},"This needs to be same as class used during insert/upserts. Just like writing, compaction also uses the record payload class to merge records in the log against each other, merge again with the base file and produce the final record to be written after compaction.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PAYLOAD_CLASS_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiepayloadeventtimefield"},"hoodie.payload.event.time.field")),(0,r.yg)("td",{parentName:"tr",align:null},"ts"),(0,r.yg)("td",{parentName:"tr",align:null},"Table column/field name to derive timestamp associated with the records. This canbe useful for e.g, determining the freshness of the table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EVENT_TIME_FIELD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiepayloadorderingfield"},"hoodie.payload.ordering.field")),(0,r.yg)("td",{parentName:"tr",align:null},"ts"),(0,r.yg)("td",{parentName:"tr",align:null},"Table column/field name to order records that have the same key, before merging and writing to storage.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ORDERING_FIELD"))))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"KAFKA_CONNECT"},"Kafka Connect Configs"),(0,r.yg)("p",null,"These set of configs are used for Kafka Connect Sink Connector for writing Hudi Tables"),(0,r.yg)("h3",{id:"Kafka-Sink-Connect-Configurations"},"Kafka Sink Connect Configurations"),(0,r.yg)("p",null,"Configurations for Kafka Connect Sink Connector for Hudi."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Kafka-Sink-Connect-Configurations-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#bootstrapservers"},"bootstrap.servers")),(0,r.yg)("td",{parentName:"tr",align:null},"localhost:9092"),(0,r.yg)("td",{parentName:"tr",align:null},"The bootstrap servers for the Kafka Cluster.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KAFKA_BOOTSTRAP_SERVERS"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Kafka-Sink-Connect-Configurations-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hadoopconfdir"},"hadoop.conf.dir")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The Hadoop configuration directory.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HADOOP_CONF_DIR"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hadoophome"},"hadoop.home")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The Hadoop home directory.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HADOOP_HOME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiekafkaallowcommitonerrors"},"hoodie.kafka.allow.commit.on.errors")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Commit even when some records failed to be written",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ALLOW_COMMIT_ON_ERRORS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiekafkacommitintervalsecs"},"hoodie.kafka.commit.interval.secs")),(0,r.yg)("td",{parentName:"tr",align:null},"60"),(0,r.yg)("td",{parentName:"tr",align:null},"The interval at which Hudi will commit the records written to the files, making them consumable on the read-side.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COMMIT_INTERVAL_SECS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiekafkacompactionasyncenable"},"hoodie.kafka.compaction.async.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Controls whether async compaction should be turned on for MOR table writing.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ASYNC_COMPACT_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiekafkacontroltopic"},"hoodie.kafka.control.topic")),(0,r.yg)("td",{parentName:"tr",align:null},"hudi-control-topic"),(0,r.yg)("td",{parentName:"tr",align:null},"Kafka topic name used by the Hudi Sink Connector for sending and receiving control messages. Not used for data records.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CONTROL_TOPIC_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiekafkacoordinatorwritetimeoutsecs"},"hoodie.kafka.coordinator.write.timeout.secs")),(0,r.yg)("td",{parentName:"tr",align:null},"300"),(0,r.yg)("td",{parentName:"tr",align:null},"The timeout after sending an END_COMMIT until when the coordinator will wait for the write statuses from all the partitionsto ignore the current commit and start a new commit.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: COORDINATOR_WRITE_TIMEOUT_SECS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncclasses"},"hoodie.meta.sync.classes")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.hive.HiveSyncTool"),(0,r.yg)("td",{parentName:"tr",align:null},"Meta sync client tool, using comma to separate multi tools",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_CLASSES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiemetasyncenable"},"hoodie.meta.sync.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Enable Meta Sync such as Hive",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: META_SYNC_ENABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieschemaproviderclass"},"hoodie.schemaprovider.class")),(0,r.yg)("td",{parentName:"tr",align:null},"org.apache.hudi.schema.FilebasedSchemaProvider"),(0,r.yg)("td",{parentName:"tr",align:null},"subclass of org.apache.hudi.schema.SchemaProvider to attach schemas to input ","&"," target table data, built in options: org.apache.hudi.schema.FilebasedSchemaProvider.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_PROVIDER_CLASS"))))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"AWS"},"Amazon Web Services Configs"),(0,r.yg)("p",null,"Configurations specific to Amazon Web Services."),(0,r.yg)("h3",{id:"Amazon-Web-Services-Configs"},"Amazon Web Services Configs"),(0,r.yg)("p",null,"Amazon Web Services configurations to access resources like Amazon DynamoDB (for locks), Amazon CloudWatch (metrics)."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Amazon-Web-Services-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieawsaccesskey"},"hoodie.aws.access.key")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"AWS access key id",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: AWS_ACCESS_KEY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieawssecretkey"},"hoodie.aws.secret.key")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"AWS secret key",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: AWS_SECRET_KEY"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodieawssessiontoken"},"hoodie.aws.session.token")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"AWS session token",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: AWS_SESSION_TOKEN"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.10.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"HUDI_STREAMER"},"Hudi Streamer Configs"),(0,r.yg)("p",null,"These set of configs are used for Hudi Streamer utility which provides the way to ingest from different sources such as DFS or Kafka."),(0,r.yg)("h3",{id:"Hudi-Streamer-Configs"},"Hudi Streamer Configs"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Hudi-Streamer-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcekafkatopic"},"hoodie.streamer.source.kafka.topic")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Kafka topic name. The config is specific to HoodieMultiTableStreamer",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KAFKA_TOPIC"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Hudi-Streamer-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamercheckpointproviderpath"},"hoodie.streamer.checkpoint.provider.path")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The path for providing the checkpoints.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CHECKPOINT_PROVIDER_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreameringestiontablesToBeIngested"},"hoodie.streamer.ingestion.tablesToBeIngested")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Comma separated names of tables to be ingested in the format ","<","database",">",".","<","table",">",", for example db1.table1,db1.table2",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TABLES_TO_BE_INGESTED"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamertransformerclass"},"hoodie.streamer.transformer.class")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Names of transformer classes to apply. The config is specific to HoodieMultiTableStreamer.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TRANSFORMER_CLASS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamercheckpointforceskip"},"hoodie.streamer.checkpoint.force.skip")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Config to force to skip saving checkpoint in the commit metadata.It is typically used in one-time backfill scenarios, where checkpoints are not to be persisted.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CHECKPOINT_FORCE_SKIP"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreameringestiontargetBasePath"},"hoodie.streamer.ingestion.targetBasePath")),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"The path to which a particular table is ingested. The config is specific to HoodieMultiTableStreamer and overrides path determined using option ",(0,r.yg)("inlineCode",{parentName:"td"},"--base-path-prefix")," for a table. This config is ignored for a single table streamer",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TARGET_BASE_PATH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersamplewritesenabled"},"hoodie.streamer.sample.writes.enabled")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Set this to true to sample from the first batch of records and write to the auxiliary path, before writing to the table.The sampled records are used to calculate the average record size. The relevant write client will have ",(0,r.yg)("inlineCode",{parentName:"td"},"hoodie.copyonwrite.record.size.estimate")," being overwritten by the calculated result.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SAMPLE_WRITES_ENABLED"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersamplewritessize"},"hoodie.streamer.sample.writes.size")),(0,r.yg)("td",{parentName:"tr",align:null},"5000"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of records to sample from the first write. To improve the estimation's accuracy, for smaller or more compressable record size, set the sample size bigger. For bigger or less compressable record size, set smaller.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SAMPLE_WRITES_SIZE"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcekafkaappendoffsets"},"hoodie.streamer.source.kafka.append.offsets")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When enabled, appends kafka offset info like source offset(_hoodie_kafka_source_offset), partition (_hoodie_kafka_source_partition) and timestamp (_hoodie_kafka_source_timestamp) to the records. By default its disabled and no kafka offsets are added",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KAFKA_APPEND_OFFSETS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcesanitizeinvalidcharmask"},"hoodie.streamer.source.sanitize.invalid.char.mask")),(0,r.yg)("td",{parentName:"tr",align:null},"__"),(0,r.yg)("td",{parentName:"tr",align:null},"Defines the character sequence that replaces invalid characters in schema field names if hoodie.streamer.source.sanitize.invalid.schema.field.names is enabled.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_FIELD_NAME_INVALID_CHAR_MASK"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcesanitizeinvalidschemafieldnames"},"hoodie.streamer.source.sanitize.invalid.schema.field.names")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Sanitizes names of invalid schema fields both in the data read from source and also in the schema Replaces invalid characters with hoodie.streamer.source.sanitize.invalid.char.mask. Invalid characters are by goes by avro naming convention (",(0,r.yg)("a",{parentName:"td",href:"https://avro.apache.org/docs/current/spec.html#names"},"https://avro.apache.org/docs/current/spec.html#names"),").",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SANITIZE_SCHEMA_FIELD_NAMES"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"Hudi-Streamer-SQL-Transformer-Configs"},"Hudi Streamer SQL Transformer Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of SQL transformer in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Hudi-Streamer-SQL-Transformer-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamertransformersql"},"hoodie.streamer.transformer.sql")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"SQL Query to be executed during write",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TRANSFORMER_SQL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamertransformersqlfile"},"hoodie.streamer.transformer.sql.file")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"File with a SQL script to be executed during write",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TRANSFORMER_SQL_FILE"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"DELTA_STREAMER_SOURCE"},"Hudi Streamer Source Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of reading source data."),(0,r.yg)("h4",{id:"Cloud-Source-Configs"},"Cloud Source Configs"),(0,r.yg)("p",null,"Configs that are common during ingestion across different cloud stores"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Cloud-Source-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourceclouddatadatasourceoptions"},"hoodie.streamer.source.cloud.data.datasource.options")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},'A JSON string passed to the Spark DataFrameReader while loading the dataset. Example: hoodie.streamer.gcp.spark.datasource.options={"header":"true","encoding":"UTF-8"} ',(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPARK_DATASOURCE_OPTIONS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourceclouddataignorerelpathprefix"},"hoodie.streamer.source.cloud.data.ignore.relpath.prefix")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Ignore objects in the bucket whose relative path matches this prefix",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: IGNORE_RELATIVE_PATH_PREFIX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourceclouddataignorerelpathsubstring"},"hoodie.streamer.source.cloud.data.ignore.relpath.substring")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Ignore objects in the bucket whose relative path contains this substring",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: IGNORE_RELATIVE_PATH_SUBSTR"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourceclouddatapartitionfieldsfrompath"},"hoodie.streamer.source.cloud.data.partition.fields.from.path")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"A comma delimited list of path-based partition fields in the source file structure.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PATH_BASED_PARTITION_FIELDS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourceclouddatapartitionmaxsize"},"hoodie.streamer.source.cloud.data.partition.max.size")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"specify this value in bytes, to coalesce partitions of source dataset not greater than specified limit",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_MAX_BYTES_PER_PARTITION"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourceclouddataselectfileextension"},"hoodie.streamer.source.cloud.data.select.file.extension")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Only match files with this extension. By default, this is the same as hoodie.streamer.source.hoodieincr.file.format",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CLOUD_DATAFILE_EXTENSION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourceclouddataselectrelpathprefix"},"hoodie.streamer.source.cloud.data.select.relpath.prefix")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Only selects objects in the bucket whose relative path matches this prefix",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SELECT_RELATIVE_PATH_PREFIX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourceclouddatacheckfileexists"},"hoodie.streamer.source.cloud.data.check.file.exists")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, checks whether file exists before attempting to pull it",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_EXISTS_CHECK"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourceclouddatadatafileformat"},"hoodie.streamer.source.cloud.data.datafile.format")),(0,r.yg)("td",{parentName:"tr",align:null},"parquet"),(0,r.yg)("td",{parentName:"tr",align:null},"Format of the data file. By default, this will be the same as hoodie.streamer.source.hoodieincr.file.format",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DATAFILE_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourceclouddatareadercommaseparatedpathformat"},"hoodie.streamer.source.cloud.data.reader.comma.separated.path.format")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},'Boolean value for specifying path format in load args of spark.read.format("..").load("a.xml,b.xml,c.xml"),    ',(0,r.yg)("em",{parentName:"td"}," set true if path format needs to be comma separated string value, if false it's passed as array of strings like    "),' spark.read.format("..").load(new String[]{a.xml,b.xml,c.xml})',(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPARK_DATASOURCE_READER_COMMA_SEPARATED_PATH_FORMAT"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcecloudmetaack"},"hoodie.streamer.source.cloud.meta.ack")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to acknowledge Metadata messages during Cloud Ingestion or not. This is useful during dev and testing.  In Prod this should always be true. In case of Cloud Pubsub, not acknowledging means Pubsub will keep redelivering the same messages.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ACK_MESSAGES"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcecloudmetabatchsize"},"hoodie.streamer.source.cloud.meta.batch.size")),(0,r.yg)("td",{parentName:"tr",align:null},"10"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of metadata messages to pull in one API call to the cloud events queue. Multiple API calls with this batch size are sent to cloud events queue, until we consume hoodie.streamer.source.cloud.meta.max.num.messages.per.syncfrom the queue or hoodie.streamer.source.cloud.meta.max.fetch.time.per.sync.ms amount of time has passed or queue is empty. ",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: BATCH_SIZE_CONF"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcecloudmetamaxfetchtimepersyncsecs"},"hoodie.streamer.source.cloud.meta.max.fetch.time.per.sync.secs")),(0,r.yg)("td",{parentName:"tr",align:null},"60"),(0,r.yg)("td",{parentName:"tr",align:null},"Max time in secs to consume hoodie.streamer.source.cloud.meta.max.num.messages.per.sync messages from cloud queue. Cloud event queues like SQS, PubSub can return empty responses even when messages are available the queue, this config ensures we don't wait forever to consume MAX_MESSAGES_CONF messages, but time out and move on further.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_FETCH_TIME_PER_SYNC_SECS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.1"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcecloudmetamaxnummessagespersync"},"hoodie.streamer.source.cloud.meta.max.num.messages.per.sync")),(0,r.yg)("td",{parentName:"tr",align:null},"1000"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of messages to consume per sync round. Multiple rounds of hoodie.streamer.source.cloud.meta.batch.size could be invoked to reach max messages as configured by this config",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_NUM_MESSAGES_PER_SYNC"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.1"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"DFS-Path-Selector-Configs"},"DFS Path Selector Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of path selector for DFS source in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#DFS-Path-Selector-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcedfsroot"},"hoodie.streamer.source.dfs.root")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Root path of the source on DFS",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ROOT_INPUT_PATH"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#DFS-Path-Selector-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourceinputselector"},"hoodie.streamer.source.input.selector")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Source input selector",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_INPUT_SELECTOR"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"Date-Partition-Path-Selector-Configs"},"Date Partition Path Selector Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of date partition path selector for DFS source in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Date-Partition-Path-Selector-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcedfsdatepartitionedselectorcurrentdate"},"hoodie.streamer.source.dfs.datepartitioned.selector.currentdate")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Current date.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: CURRENT_DATE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcedfsdatepartitioneddateformat"},"hoodie.streamer.source.dfs.datepartitioned.date.format")),(0,r.yg)("td",{parentName:"tr",align:null},"yyyy-MM-dd"),(0,r.yg)("td",{parentName:"tr",align:null},"Date format.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DATE_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcedfsdatepartitionedselectordepth"},"hoodie.streamer.source.dfs.datepartitioned.selector.depth")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Depth of the files to scan. 0 implies no (date) partition.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DATE_PARTITION_DEPTH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcedfsdatepartitionedselectorlookbackdays"},"hoodie.streamer.source.dfs.datepartitioned.selector.lookback.days")),(0,r.yg)("td",{parentName:"tr",align:null},"2"),(0,r.yg)("td",{parentName:"tr",align:null},"The maximum look-back days for scanning.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: LOOKBACK_DAYS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcedfsdatepartitionedselectorparallelism"},"hoodie.streamer.source.dfs.datepartitioned.selector.parallelism")),(0,r.yg)("td",{parentName:"tr",align:null},"20"),(0,r.yg)("td",{parentName:"tr",align:null},"Parallelism for listing partitions.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PARTITIONS_LIST_PARALLELISM"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"GCS-Events-Source-Configs"},"GCS Events Source Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of GCS Events Source in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#GCS-Events-Source-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcegcsprojectid"},"hoodie.streamer.source.gcs.project.id")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The GCP Project Id where the Pubsub Subscription to ingest from resides. Needed to connect to the Pubsub subscription",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: GOOGLE_PROJECT_ID"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcegcssubscriptionid"},"hoodie.streamer.source.gcs.subscription.id")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The GCP Pubsub subscription id for the GCS Notifications. Needed to connect to the Pubsub subscription",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PUBSUB_SUBSCRIPTION_ID"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"Hive-Incremental-Pulling-Source-Configs"},"Hive Incremental Pulling Source Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of incremental pulling from a Hive table as a source in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Hive-Incremental-Pulling-Source-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourceincrpullroot"},"hoodie.streamer.source.incrpull.root")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The root path of Hive incremental pulling source.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ROOT_INPUT_PATH"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"Hudi-Incremental-Source-Configs"},"Hudi Incremental Source Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of incremental pulling from a Hudi table as a source in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Hudi-Incremental-Source-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcehoodieincrpath"},"hoodie.streamer.source.hoodieincr.path")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Base-path for the source Hudi table",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HOODIE_SRC_BASE_PATH"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Hudi-Incremental-Source-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcehoodieincrmissingcheckpointstrategy"},"hoodie.streamer.source.hoodieincr.missing.checkpoint.strategy")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Allows Hudi Streamer to decide the instant to consume from when checkpoint is not set.  Possible values: ","[READ_LATEST (Read from latest commit in hoodie source table), READ_UPTO_LATEST_COMMIT (Read everything upto latest commit)]",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MISSING_CHECKPOINT_STRATEGY"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcehoodieincrpartitionextractorclass"},"hoodie.streamer.source.hoodieincr.partition.extractor.class")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"PartitionValueExtractor class to extract partition fields from _hoodie_partition_path",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HOODIE_SRC_PARTITION_EXTRACTORCLASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcehoodieincrpartitionfields"},"hoodie.streamer.source.hoodieincr.partition.fields")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies partition fields that needs to be added to source table after parsing _hoodie_partition_path.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HOODIE_SRC_PARTITION_FIELDS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcehoodieincrdropallmetafieldsfromsource"},"hoodie.streamer.source.hoodieincr.drop.all.meta.fields.from.source")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Drops all meta fields from the source hudi table while ingesting into sink hudi table.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: HOODIE_DROP_ALL_META_FIELDS_FROM_SOURCE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcehoodieincrfileformat"},"hoodie.streamer.source.hoodieincr.file.format")),(0,r.yg)("td",{parentName:"tr",align:null},"parquet"),(0,r.yg)("td",{parentName:"tr",align:null},"This config is passed to the reader while loading dataset. Default value is parquet.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_FILE_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcehoodieincrnum_instants"},"hoodie.streamer.source.hoodieincr.num_instants")),(0,r.yg)("td",{parentName:"tr",align:null},"5"),(0,r.yg)("td",{parentName:"tr",align:null},"Max number of instants whose changes can be incrementally fetched",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: NUM_INSTANTS_PER_FETCH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcehoodieincrread_latest_on_missing_ckpt"},"hoodie.streamer.source.hoodieincr.read_latest_on_missing_ckpt")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, allows Hudi Streamer to incrementally fetch from latest committed instant when checkpoint is not provided. This config is deprecated. Please refer to hoodie.streamer.source.hoodieincr.missing.checkpoint.strategy",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: READ_LATEST_INSTANT_ON_MISSING_CKPT"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"JDBC-Source-Configs"},"JDBC Source Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of JDBC source in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#JDBC-Source-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerjdbcdriverclass"},"hoodie.streamer.jdbc.driver.class")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Driver class used for JDBC connection",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DRIVER_CLASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerjdbcextraoptions"},"hoodie.streamer.jdbc.extra.options.")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Used to set any extra options the user specifies for jdbc",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: EXTRA_OPTIONS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerjdbcincrfallbacktofullfetch"},"hoodie.streamer.jdbc.incr.fallback.to.full.fetch")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"If set true, makes incremental fetch to fallback to full fetch in case of any error",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: FALLBACK_TO_FULL_FETCH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerjdbcincrpull"},"hoodie.streamer.jdbc.incr.pull")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Will the JDBC source do an incremental pull?",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: IS_INCREMENTAL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerjdbcpassword"},"hoodie.streamer.jdbc.password")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Password used for JDBC connection",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PASSWORD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerjdbcpasswordfile"},"hoodie.streamer.jdbc.password.file")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Base-path for the JDBC password file.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PASSWORD_FILE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerjdbcstoragelevel"},"hoodie.streamer.jdbc.storage.level")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Used to control the persistence level. Default value: MEMORY_AND_DISK_SER",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: STORAGE_LEVEL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerjdbctableincrcolumnname"},"hoodie.streamer.jdbc.table.incr.column.name")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"If run in incremental mode, this field is to pull new data incrementally",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: INCREMENTAL_COLUMN"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerjdbctablename"},"hoodie.streamer.jdbc.table.name")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"RDBMS table to pull",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: RDBMS_TABLE_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerjdbcurl"},"hoodie.streamer.jdbc.url")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"JDBC url for the Hoodie datasource.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: URL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerjdbcuser"},"hoodie.streamer.jdbc.user")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Username used for JDBC connection",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: USER"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"Json-Kafka-Post-Processor-Configs"},"Json Kafka Post Processor Configs"),(0,r.yg)("p",null,"Configurations controlling the post processor of Json Kafka Source in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Json-Kafka-Post-Processor-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcejsonkafkapostprocessormaxwelldatabaseregex"},"hoodie.streamer.source.json.kafka.post.processor.maxwell.database.regex")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Database name regex",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DATABASE_NAME_REGEX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcejsonkafkapostprocessormaxwelltableregex"},"hoodie.streamer.source.json.kafka.post.processor.maxwell.table.regex")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Table name regex",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TABLE_NAME_REGEX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcejsonkafkaprocessorclass"},"hoodie.streamer.source.json.kafka.processor.class")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Json kafka source post processor class name, post process data after consuming fromsource and before giving it to Hudi Streamer.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: JSON_KAFKA_PROCESSOR_CLASS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcejsonkafkapostprocessormaxwellprecombinefieldformat"},"hoodie.streamer.source.json.kafka.post.processor.maxwell.precombine.field.format")),(0,r.yg)("td",{parentName:"tr",align:null},"yyyy-MM-dd HH:mm:ss"),(0,r.yg)("td",{parentName:"tr",align:null},"When the preCombine filed is in DATE_STRING format, use should tell hoodiewhat format it is. 'yyyy-MM-dd HH:mm:ss' by default",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PRECOMBINE_FIELD_FORMAT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcejsonkafkapostprocessormaxwellprecombinefieldtype"},"hoodie.streamer.source.json.kafka.post.processor.maxwell.precombine.field.type")),(0,r.yg)("td",{parentName:"tr",align:null},"DATE_STRING"),(0,r.yg)("td",{parentName:"tr",align:null},"Data type of the preCombine field. could be NON_TIMESTAMP, DATE_STRING,UNIX_TIMESTAMP or EPOCHMILLISECONDS. DATE_STRING by default",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PRECOMBINE_FIELD_TYPE"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"Kafka-Source-Configs"},"Kafka Source Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of Kafka source in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Kafka-Source-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcekafkatopic"},"hoodie.streamer.source.kafka.topic")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Kafka topic name.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KAFKA_TOPIC_NAME"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Kafka-Source-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcekafkavaluedeserializerschema"},"hoodie.streamer.source.kafka.value.deserializer.schema")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Schema to deserialize the records.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KAFKA_VALUE_DESERIALIZER_SCHEMA"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#autooffsetreset"},"auto.offset.reset")),(0,r.yg)("td",{parentName:"tr",align:null},"LATEST"),(0,r.yg)("td",{parentName:"tr",align:null},"Kafka consumer strategy for reading data.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KAFKA_AUTO_OFFSET_RESET"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerkafkasourcemaxEvents"},"hoodie.streamer.kafka.source.maxEvents")),(0,r.yg)("td",{parentName:"tr",align:null},"5000000"),(0,r.yg)("td",{parentName:"tr",align:null},"Maximum number of records obtained in each batch.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: MAX_EVENTS_FROM_KAFKA_SOURCE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcekafkacheckpointtype"},"hoodie.streamer.source.kafka.checkpoint.type")),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"Kafka checkpoint type.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KAFKA_CHECKPOINT_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcekafkaenablecommitoffset"},"hoodie.streamer.source.kafka.enable.commit.offset")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Automatically submits offset to kafka.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_KAFKA_COMMIT_OFFSET"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcekafkaenablefailOnDataLoss"},"hoodie.streamer.source.kafka.enable.failOnDataLoss")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Fail when checkpoint goes out of bounds instead of seeking to earliest offsets.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: ENABLE_FAIL_ON_DATA_LOSS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcekafkafetch_partitiontimeout"},"hoodie.streamer.source.kafka.fetch_partition.time.out")),(0,r.yg)("td",{parentName:"tr",align:null},"300000"),(0,r.yg)("td",{parentName:"tr",align:null},"Time out for fetching partitions. 5min by default",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KAFKA_FETCH_PARTITION_TIME_OUT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcekafkaminPartitions"},"hoodie.streamer.source.kafka.minPartitions")),(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"Desired minimum number of partitions to read from Kafka. By default, Hudi has a 1-1 mapping of topicPartitions to Hudi partitions consuming from Kafka. If set this option to a value greater than topicPartitions, Hudi will divvy up large Kafka partitions to smaller pieces. Please note that this configuration is like a hint: the number of input tasks will be approximately minPartitions. It can be less or more depending on rounding errors or Kafka partitions that didn't receive any new data.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KAFKA_SOURCE_MIN_PARTITIONS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.14.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcekafkavaluedeserializerclass"},"hoodie.streamer.source.kafka.value.deserializer.class")),(0,r.yg)("td",{parentName:"tr",align:null},"io.confluent.kafka.serializers.KafkaAvroDeserializer"),(0,r.yg)("td",{parentName:"tr",align:null},"This class is used by kafka client to deserialize the records.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: KAFKA_AVRO_VALUE_DESERIALIZER_CLASS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.9.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"Pulsar-Source-Configs"},"Pulsar Source Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of Pulsar source in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Pulsar-Source-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcepulsartopic"},"hoodie.streamer.source.pulsar.topic")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Name of the target Pulsar topic to source data from",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PULSAR_SOURCE_TOPIC_NAME"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcepulsarendpointadminurl"},"hoodie.streamer.source.pulsar.endpoint.admin.url")),(0,r.yg)("td",{parentName:"tr",align:null},"http://localhost:8080"),(0,r.yg)("td",{parentName:"tr",align:null},"URL of the target Pulsar endpoint (of the form 'pulsar://host:port'",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PULSAR_SOURCE_ADMIN_ENDPOINT_URL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcepulsarendpointserviceurl"},"hoodie.streamer.source.pulsar.endpoint.service.url")),(0,r.yg)("td",{parentName:"tr",align:null},"pulsar://localhost:6650"),(0,r.yg)("td",{parentName:"tr",align:null},"URL of the target Pulsar endpoint (of the form 'pulsar://host:port'",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PULSAR_SOURCE_SERVICE_ENDPOINT_URL"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Pulsar-Source-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcepulsarmaxRecords"},"hoodie.streamer.source.pulsar.maxRecords")),(0,r.yg)("td",{parentName:"tr",align:null},"5000000"),(0,r.yg)("td",{parentName:"tr",align:null},"Max number of records obtained in a single each batch",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PULSAR_SOURCE_MAX_RECORDS_PER_BATCH_THRESHOLD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcepulsaroffsetautoResetStrategy"},"hoodie.streamer.source.pulsar.offset.autoResetStrategy")),(0,r.yg)("td",{parentName:"tr",align:null},"LATEST"),(0,r.yg)("td",{parentName:"tr",align:null},"Policy determining how offsets shall be automatically reset in case there's no checkpoint information present",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PULSAR_SOURCE_OFFSET_AUTO_RESET_STRATEGY"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"S3-Event-based-Hudi-Incremental-Source-Configs"},"S3 Event-based Hudi Incremental Source Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of incremental pulling from S3 events meta information from Hudi table as a source in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#S3-Event-based-Hudi-Incremental-Source-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersources3incrignorekeyprefix"},"hoodie.streamer.source.s3incr.ignore.key.prefix")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Control whether to ignore the s3 objects starting with this prefix",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: S3_IGNORE_KEY_PREFIX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersources3incrignorekeysubstring"},"hoodie.streamer.source.s3incr.ignore.key.substring")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Control whether to ignore the s3 objects with this substring",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: S3_IGNORE_KEY_SUBSTRING"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersources3incrkeyprefix"},"hoodie.streamer.source.s3incr.key.prefix")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Control whether to filter the s3 objects starting with this prefix",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: S3_KEY_PREFIX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersources3incrsparkdatasourceoptions"},"hoodie.streamer.source.s3incr.spark.datasource.options")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},'Json string, passed to the reader while loading dataset. Example Hudi Streamer conf   --hoodie-conf hoodie.streamer.source.s3incr.spark.datasource.options={"header":"true","encoding":"UTF-8"}',(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPARK_DATASOURCE_OPTIONS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersources3incrcheckfileexists"},"hoodie.streamer.source.s3incr.check.file.exists")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"Control whether we do existence check for files before consuming them",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: S3_INCR_ENABLE_EXISTS_CHECK"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersources3incrfsprefix"},"hoodie.streamer.source.s3incr.fs.prefix")),(0,r.yg)("td",{parentName:"tr",align:null},"s3"),(0,r.yg)("td",{parentName:"tr",align:null},"The file system prefix.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: S3_FS_PREFIX"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"S3-Source-Configs"},"S3 Source Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of S3 source in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#S3-Source-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamers3sourcequeueurl"},"hoodie.streamer.s3.source.queue.url")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Queue url for cloud object events",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: S3_SOURCE_QUEUE_URL"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#S3-Source-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamers3sourcequeueregion"},"hoodie.streamer.s3.source.queue.region")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},'Case-sensitive region name of the cloud provider for the queue. For example, "us-east-1".',(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: S3_SOURCE_QUEUE_REGION"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamers3sourcequeuefs"},"hoodie.streamer.s3.source.queue.fs")),(0,r.yg)("td",{parentName:"tr",align:null},"s3"),(0,r.yg)("td",{parentName:"tr",align:null},"File system corresponding to queue. For example, for AWS SQS it is s3/s3a.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: S3_SOURCE_QUEUE_FS"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamers3sourcequeuelongpollwait"},"hoodie.streamer.s3.source.queue.long.poll.wait")),(0,r.yg)("td",{parentName:"tr",align:null},"20"),(0,r.yg)("td",{parentName:"tr",align:null},"Long poll wait time in seconds, If set as 0 then client will fetch on short poll basis.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: S3_QUEUE_LONG_POLL_WAIT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamers3sourcequeuemaxmessagesperbatch"},"hoodie.streamer.s3.source.queue.max.messages.per.batch")),(0,r.yg)("td",{parentName:"tr",align:null},"5"),(0,r.yg)("td",{parentName:"tr",align:null},"Max messages for each batch of Hudi Streamer run. Source will process these maximum number of message at a time.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: S3_SOURCE_QUEUE_MAX_MESSAGES_PER_BATCH"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamers3sourcequeuemaxmessagesperrequest"},"hoodie.streamer.s3.source.queue.max.messages.per.request")),(0,r.yg)("td",{parentName:"tr",align:null},"10"),(0,r.yg)("td",{parentName:"tr",align:null},"Max messages for each request",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: S3_SOURCE_QUEUE_MAX_MESSAGES_PER_REQUEST"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamers3sourcequeuevisibilitytimeout"},"hoodie.streamer.s3.source.queue.visibility.timeout")),(0,r.yg)("td",{parentName:"tr",align:null},"30"),(0,r.yg)("td",{parentName:"tr",align:null},"Visibility timeout for messages in queue. After we consume the message, queue will move the consumed messages to in-flight state, these messages can't be consumed again by source for this timeout period.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: S3_SOURCE_QUEUE_VISIBILITY_TIMEOUT"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"SQL-Source-Configs"},"SQL Source Configs"),(0,r.yg)("p",null,"Configurations controlling the behavior of SQL source in Hudi Streamer."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#SQL-Source-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamersourcesqlsqlquery"},"hoodie.streamer.source.sql.sql.query")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"SQL query for fetching source data.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_SQL"))))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"SCHEMA_PROVIDER"},"Hudi Streamer Schema Provider Configs"),(0,r.yg)("p",null,"Configurations that control the schema provider for Hudi Streamer."),(0,r.yg)("h4",{id:"Hudi-Streamer-Schema-Provider-Configs"},"Hudi Streamer Schema Provider Configs"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Hudi-Streamer-Schema-Provider-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderregistrytargetUrl"},"hoodie.streamer.schemaprovider.registry.targetUrl")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The schema of the target you are writing to e.g. https://foo:",(0,r.yg)("a",{parentName:"td",href:"mailto:bar@schemaregistry.org"},"bar@schemaregistry.org"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TARGET_SCHEMA_REGISTRY_URL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderregistryurl"},"hoodie.streamer.schemaprovider.registry.url")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The schema of the source you are reading from e.g. https://foo:",(0,r.yg)("a",{parentName:"td",href:"mailto:bar@schemaregistry.org"},"bar@schemaregistry.org"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SRC_SCHEMA_REGISTRY_URL"))))),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Hudi-Streamer-Schema-Provider-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderregistrybaseUrl"},"hoodie.streamer.schemaprovider.registry.baseUrl")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The base URL of the schema registry.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_REGISTRY_BASE_URL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderregistryschemaconverter"},"hoodie.streamer.schemaprovider.registry.schemaconverter")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The class name of the custom schema converter to use.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_CONVERTER"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderregistrysourceUrlSuffix"},"hoodie.streamer.schemaprovider.registry.sourceUrlSuffix")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The source URL suffix.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_REGISTRY_SOURCE_URL_SUFFIX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderregistrytargetUrlSuffix"},"hoodie.streamer.schemaprovider.registry.targetUrlSuffix")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The target URL suffix.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_REGISTRY_TARGET_URL_SUFFIX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderregistryurlSuffix"},"hoodie.streamer.schemaprovider.registry.urlSuffix")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The suffix of the URL for the schema registry.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_REGISTRY_URL_SUFFIX"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderspark_avro_post_processorenable"},"hoodie.streamer.schemaprovider.spark_avro_post_processor.enable")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to enable Spark Avro post processor.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SPARK_AVRO_POST_PROCESSOR_ENABLE"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"File-based-Schema-Provider-Configs"},"File-based Schema Provider Configs"),(0,r.yg)("p",null,"Configurations for file-based schema provider."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#File-based-Schema-Provider-Configs-basic-configs"},(0,r.yg)("strong",{parentName:"a"},"Basic Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidersourceschemafile"},"hoodie.streamer.schemaprovider.source.schema.file")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The schema of the source you are reading from",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_SCHEMA_FILE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidertargetschemafile"},"hoodie.streamer.schemaprovider.target.schema.file")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The schema of the target you are writing to",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TARGET_SCHEMA_FILE"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"Hive-Schema-Provider-Configs"},"Hive Schema Provider Configs"),(0,r.yg)("p",null,"Configurations for Hive schema provider."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Hive-Schema-Provider-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidersourceschemahivetable"},"hoodie.streamer.schemaprovider.source.schema.hive.table")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive table from where source schema can be fetched",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_SCHEMA_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidertargetschemahivetable"},"hoodie.streamer.schemaprovider.target.schema.hive.table")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive table from where target schema can be fetched",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TARGET_SCHEMA_TABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidersourceschemahivedatabase"},"hoodie.streamer.schemaprovider.source.schema.hive.database")),(0,r.yg)("td",{parentName:"tr",align:null},"default"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive database from where source schema can be fetched",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_SCHEMA_DATABASE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidertargetschemahivedatabase"},"hoodie.streamer.schemaprovider.target.schema.hive.database")),(0,r.yg)("td",{parentName:"tr",align:null},"default"),(0,r.yg)("td",{parentName:"tr",align:null},"Hive database from where target schema can be fetched",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: TARGET_SCHEMA_DATABASE"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"JDBC-based-Schema-Provider-Configs"},"JDBC-based Schema Provider Configs"),(0,r.yg)("p",null,"Configurations for JDBC-based schema provider."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#JDBC-based-Schema-Provider-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidersourceschemajdbcconnectionurl"},"hoodie.streamer.schemaprovider.source.schema.jdbc.connection.url")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The JDBC URL to connect to. The source-specific connection properties may be specified in the URL. e.g., jdbc:postgresql://localhost/test?user=fred","&","password=secret",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_SCHEMA_JDBC_CONNECTION_URL"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidersourceschemajdbcdbtable"},"hoodie.streamer.schemaprovider.source.schema.jdbc.dbtable")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The table with the schema to reference e.g. test_database.test1_table or test1_table",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_SCHEMA_JDBC_DBTABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidersourceschemajdbcdrivertype"},"hoodie.streamer.schemaprovider.source.schema.jdbc.driver.type")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The class name of the JDBC driver to use to connect to this URL. e.g. org.h2.Driver",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_SCHEMA_JDBC_DRIVER_TYPE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidersourceschemajdbcnullable"},"hoodie.streamer.schemaprovider.source.schema.jdbc.nullable")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"If true, all the columns are nullable.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_SCHEMA_JDBC_NULLABLE"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidersourceschemajdbcpassword"},"hoodie.streamer.schemaprovider.source.schema.jdbc.password")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Password for the connection e.g. secret",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_SCHEMA_JDBC_PASSWORD"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidersourceschemajdbctimeout"},"hoodie.streamer.schemaprovider.source.schema.jdbc.timeout")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The number of seconds the driver will wait for a Statement object to execute. Zero means there is no limit. In the write path, this option depends on how JDBC drivers implement the API setQueryTimeout, e.g., the h2 JDBC driver checks the timeout of each query instead of an entire JDBC batch. It defaults to 0.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_SCHEMA_JDBC_TIMEOUT"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaprovidersourceschemajdbcusername"},"hoodie.streamer.schemaprovider.source.schema.jdbc.username")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Username for the connection e.g. fred",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SOURCE_SCHEMA_JDBC_USERNAME"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"JDBC-based-Schema-Provider-Configs"},"JDBC-based Schema Provider Configs"),(0,r.yg)("p",null,"Configurations for Proto schema provider."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#JDBC-based-Schema-Provider-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderprotoclassname"},"hoodie.streamer.schemaprovider.proto.class.name")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The Protobuf Message class used as the source for the schema.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PROTO_SCHEMA_CLASS_NAME"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderprotoflattenwrappers"},"hoodie.streamer.schemaprovider.proto.flatten.wrappers")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true wrapped primitives like Int64Value are translated to a record with a single 'value' field. By default, the value is false and the wrapped primitives are treated as a nullable value",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PROTO_SCHEMA_WRAPPED_PRIMITIVES_AS_RECORDS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderprotomaxrecursiondepth"},"hoodie.streamer.schemaprovider.proto.max.recursion.depth")),(0,r.yg)("td",{parentName:"tr",align:null},"5"),(0,r.yg)("td",{parentName:"tr",align:null},"The max depth to unravel the Proto schema when translating into an Avro schema. Setting this depth allows the user to convert a schema that is recursive in proto into something that can be represented in their lake format like Parquet. After a given class has been seen N times within a single branch, the schema provider will create a record with a byte array to hold the remaining proto data and a string to hold the message descriptor's name for context.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PROTO_SCHEMA_MAX_RECURSION_DEPTH"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderprototimestampsasrecords"},"hoodie.streamer.schemaprovider.proto.timestamps.as.records")),(0,r.yg)("td",{parentName:"tr",align:null},"false"),(0,r.yg)("td",{parentName:"tr",align:null},"When set to true Timestamp fields are translated to a record with a seconds and nanos field. By default, the value is false and the timestamp is converted to a long with the timestamp-micros logical type",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: PROTO_SCHEMA_TIMESTAMPS_AS_RECORDS"),(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Since Version: 0.13.0"))))),(0,r.yg)("hr",null),(0,r.yg)("h4",{id:"Schema-Post-Processor-Config-Configs"},"Schema Post Processor Config Configs"),(0,r.yg)("p",null,"Configurations for Schema Post Processor"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"#Schema-Post-Processor-Config-Configs-advanced-configs"},(0,r.yg)("strong",{parentName:"a"},"Advanced Configs"))),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Config Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderschema_post_processor"},"hoodie.streamer.schemaprovider.schema_post_processor")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"The class name of the schema post processor.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_POST_PROCESSOR"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderschema_post_processoraddcolumndefault"},"hoodie.streamer.schemaprovider.schema_post_processor.add.column.default")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"New column's default value",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_POST_PROCESSOR_ADD_COLUMN_DEFAULT_PROP"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderschema_post_processoraddcolumndoc"},"hoodie.streamer.schemaprovider.schema_post_processor.add.column.doc")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Docs about new column",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_POST_PROCESSOR_ADD_COLUMN_DOC_PROP"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderschema_post_processoraddcolumnname"},"hoodie.streamer.schemaprovider.schema_post_processor.add.column.name")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"New column's name",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_POST_PROCESSOR_ADD_COLUMN_NAME_PROP"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderschema_post_processoraddcolumntype"},"hoodie.streamer.schemaprovider.schema_post_processor.add.column.type")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"New column's type",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_POST_PROCESSOR_ADD_COLUMN_TYPE_PROP"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderschema_post_processordeletecolumns"},"hoodie.streamer.schemaprovider.schema_post_processor.delete.columns")),(0,r.yg)("td",{parentName:"tr",align:null},"(N/A)"),(0,r.yg)("td",{parentName:"tr",align:null},"Columns to delete in the schema post processor.",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: DELETE_COLUMN_POST_PROCESSOR_COLUMN"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("a",{parentName:"td",href:"#hoodiestreamerschemaproviderschema_post_processoraddcolumnnullable"},"hoodie.streamer.schemaprovider.schema_post_processor.add.column.nullable")),(0,r.yg)("td",{parentName:"tr",align:null},"true"),(0,r.yg)("td",{parentName:"tr",align:null},"New column's nullable",(0,r.yg)("br",null),(0,r.yg)("inlineCode",{parentName:"td"},"Config Param: SCHEMA_POST_PROCESSOR_ADD_COLUMN_NULLABLE_PROP"))))),(0,r.yg)("hr",null))}s.isMDXComponent=!0}}]);