"use strict";(self.webpackChunkhudi=self.webpackChunkhudi||[]).push([[73769],{79045:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/04/26/the-lakehouse-trifecta","metadata":{"permalink":"/cn/blog/2023/04/26/the-lakehouse-trifecta","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2023-04-26-the-lakehouse-trifecta.mdx","source":"@site/blog/2023-04-26-the-lakehouse-trifecta.mdx","title":"Delta, Hudi, and Iceberg: The Data Lakehouse Trifecta","description":"Redirecting... please wait!!","date":"2023-04-26T00:00:00.000Z","formattedDate":"April 26, 2023","tags":[{"label":"lakehouse","permalink":"/cn/blog/tags/lakehouse"},{"label":"delta lake","permalink":"/cn/blog/tags/delta-lake"},{"label":"hudi","permalink":"/cn/blog/tags/hudi"},{"label":"iceberg","permalink":"/cn/blog/tags/iceberg"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Andrey Gusarov"}],"nextItem":{"title":"Speed up your write latencies using Bucket Index in Apache Hudi","permalink":"/cn/blog/2023/04/07/Speed-up-your-write-latencies-using-Bucket-Index-in-Apache-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://dzone.com/articles/delta-hudi-and-iceberg-the-data-lakehouse-trifecta\\">Redirecting... please wait!! </Redirect>"},{"id":"/2023/04/07/Speed-up-your-write-latencies-using-Bucket-Index-in-Apache-Hudi","metadata":{"permalink":"/cn/blog/2023/04/07/Speed-up-your-write-latencies-using-Bucket-Index-in-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2023-04-07-Speed-up-your-write-latencies-using-Bucket-Index-in-Apache-Hudi.mdx","source":"@site/blog/2023-04-07-Speed-up-your-write-latencies-using-Bucket-Index-in-Apache-Hudi.mdx","title":"Speed up your write latencies using Bucket Index in Apache Hudi","description":"Redirecting... please wait!!","date":"2023-04-07T00:00:00.000Z","formattedDate":"April 7, 2023","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"indexing","permalink":"/cn/blog/tags/indexing"},{"label":"hudi","permalink":"/cn/blog/tags/hudi"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Sivabalan Narayanan"}],"prevItem":{"title":"Delta, Hudi, and Iceberg: The Data Lakehouse Trifecta","permalink":"/cn/blog/2023/04/26/the-lakehouse-trifecta"},"nextItem":{"title":"Global vs Non-global index in Apache Hudi","permalink":"/cn/blog/2023/04/02/global-vs-non-global-index-in-apache-hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://medium.com/@simpsons/speed-up-your-write-latencies-using-bucket-index-in-apache-hudi-2f7c297493dc\\">Redirecting... please wait!! </Redirect>"},{"id":"/2023/04/02/global-vs-non-global-index-in-apache-hudi","metadata":{"permalink":"/cn/blog/2023/04/02/global-vs-non-global-index-in-apache-hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2023-04-02-global-vs-non-global-index-in-apache-hudi.mdx","source":"@site/blog/2023-04-02-global-vs-non-global-index-in-apache-hudi.mdx","title":"Global vs Non-global index in Apache Hudi","description":"Redirecting... please wait!!","date":"2023-04-02T00:00:00.000Z","formattedDate":"April 2, 2023","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"indexing","permalink":"/cn/blog/tags/indexing"},{"label":"hudi","permalink":"/cn/blog/tags/hudi"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Sivabalan Narayanan"}],"prevItem":{"title":"Speed up your write latencies using Bucket Index in Apache Hudi","permalink":"/cn/blog/2023/04/07/Speed-up-your-write-latencies-using-Bucket-Index-in-Apache-Hudi"},"nextItem":{"title":"Spark ETL Chapter 8 with Lakehouse | Apache HUDI","permalink":"/cn/blog/2023/03/23/Spark-ETL-Chapter-8-with-Lakehouse-Apache-HUDI"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://medium.com/@simpsons/global-vs-non-global-index-in-apache-hudi-ac880b031cbc\\">Redirecting... please wait!! </Redirect>"},{"id":"/2023/03/23/Spark-ETL-Chapter-8-with-Lakehouse-Apache-HUDI","metadata":{"permalink":"/cn/blog/2023/03/23/Spark-ETL-Chapter-8-with-Lakehouse-Apache-HUDI","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2023-03-23-Spark-ETL-Chapter-8-with-Lakehouse-Apache-HUDI.mdx","source":"@site/blog/2023-03-23-Spark-ETL-Chapter-8-with-Lakehouse-Apache-HUDI.mdx","title":"Spark ETL Chapter 8 with Lakehouse | Apache HUDI","description":"Redirecting... please wait!!","date":"2023-03-23T00:00:00.000Z","formattedDate":"March 23, 2023","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"spark","permalink":"/cn/blog/tags/spark"},{"label":"hudi","permalink":"/cn/blog/tags/hudi"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Kalpan Shah"}],"prevItem":{"title":"Global vs Non-global index in Apache Hudi","permalink":"/cn/blog/2023/04/02/global-vs-non-global-index-in-apache-hudi"},"nextItem":{"title":"Introducing native support for Apache Hudi, Delta Lake, and Apache Iceberg on AWS Glue for Apache Spark, Part 2: AWS Glue Studio Visual Editor","permalink":"/cn/blog/2023/03/20/Introducing-native-support-for-Apache Hudi-Delta-Lake-and-Apache-Iceberg-on-AWS-Glue-for-Apache-Spark-Part-2-AWS-Glue-Studio-Visual-Editor"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://medium.com/plumbersofdatascience/spark-etl-chapter-8-with-lakehouse-apache-hudi-d4794b8a79e6\\">Redirecting... please wait!! </Redirect>"},{"id":"/2023/03/20/Introducing-native-support-for-Apache Hudi-Delta-Lake-and-Apache-Iceberg-on-AWS-Glue-for-Apache-Spark-Part-2-AWS-Glue-Studio-Visual-Editor","metadata":{"permalink":"/cn/blog/2023/03/20/Introducing-native-support-for-Apache Hudi-Delta-Lake-and-Apache-Iceberg-on-AWS-Glue-for-Apache-Spark-Part-2-AWS-Glue-Studio-Visual-Editor","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2023-03-20-Introducing-native-support-for-Apache Hudi-Delta-Lake-and-Apache-Iceberg-on-AWS-Glue-for-Apache-Spark-Part-2-AWS-Glue-Studio-Visual-Editor.mdx","source":"@site/blog/2023-03-20-Introducing-native-support-for-Apache Hudi-Delta-Lake-and-Apache-Iceberg-on-AWS-Glue-for-Apache-Spark-Part-2-AWS-Glue-Studio-Visual-Editor.mdx","title":"Introducing native support for Apache Hudi, Delta Lake, and Apache Iceberg on AWS Glue for Apache Spark, Part 2: AWS Glue Studio Visual Editor","description":"Redirecting... please wait!!","date":"2023-03-20T00:00:00.000Z","formattedDate":"March 20, 2023","tags":[{"label":"aws glue","permalink":"/cn/blog/tags/aws-glue"},{"label":"glue studio","permalink":"/cn/blog/tags/glue-studio"},{"label":"hudi","permalink":"/cn/blog/tags/hudi"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Noritaka Sekiyama"},{"name":"Scott Long"},{"name":"Sean Ma"}],"prevItem":{"title":"Spark ETL Chapter 8 with Lakehouse | Apache HUDI","permalink":"/cn/blog/2023/03/23/Spark-ETL-Chapter-8-with-Lakehouse-Apache-HUDI"},"nextItem":{"title":"Setting Uber\u2019s Transactional Data Lake in Motion with Incremental ETL Using Apache Hudi","permalink":"/cn/blog/2023/03/16/Setting-Uber-Transactional-Data-Lake-in-Motion-with-Incremental-ETL-Using-Apache-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/part-2-glue-studio-visual-editor-introducing-native-support-for-apache-hudi-delta-lake-and-apache-iceberg-on-aws-glue-for-apache-spark/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2023/03/16/Setting-Uber-Transactional-Data-Lake-in-Motion-with-Incremental-ETL-Using-Apache-Hudi","metadata":{"permalink":"/cn/blog/2023/03/16/Setting-Uber-Transactional-Data-Lake-in-Motion-with-Incremental-ETL-Using-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2023-03-16-Setting-Uber-Transactional-Data-Lake-in-Motion-with-Incremental-ETL-Using-Apache-Hudi.mdx","source":"@site/blog/2023-03-16-Setting-Uber-Transactional-Data-Lake-in-Motion-with-Incremental-ETL-Using-Apache-Hudi.mdx","title":"Setting Uber\u2019s Transactional Data Lake in Motion with Incremental ETL Using Apache Hudi","description":"Redirecting... please wait!!","date":"2023-03-16T00:00:00.000Z","formattedDate":"March 16, 2023","tags":[{"label":"incremental pipeline","permalink":"/cn/blog/tags/incremental-pipeline"},{"label":"datalake","permalink":"/cn/blog/tags/datalake"},{"label":"hudi","permalink":"/cn/blog/tags/hudi"},{"label":"medallion architecture","permalink":"/cn/blog/tags/medallion-architecture"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Vinoth Govindarajan"},{"name":"Saketh Chintapalli"},{"name":"Yogesh Saswade"},{"name":"Aayush Bareja"}],"prevItem":{"title":"Introducing native support for Apache Hudi, Delta Lake, and Apache Iceberg on AWS Glue for Apache Spark, Part 2: AWS Glue Studio Visual Editor","permalink":"/cn/blog/2023/03/20/Introducing-native-support-for-Apache Hudi-Delta-Lake-and-Apache-Iceberg-on-AWS-Glue-for-Apache-Spark-Part-2-AWS-Glue-Studio-Visual-Editor"},"nextItem":{"title":"Automate schema evolution at scale with Apache Hudi in AWS Glue | Amazon Web Services","permalink":"/cn/blog/2023/02/07/automate-schema-evolution-at-scale-with-apache-hudi-in-aws-glue"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.uber.com/blog/ubers-lakehouse-architecture/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2023/02/07/automate-schema-evolution-at-scale-with-apache-hudi-in-aws-glue","metadata":{"permalink":"/cn/blog/2023/02/07/automate-schema-evolution-at-scale-with-apache-hudi-in-aws-glue","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2023-02-07-automate-schema-evolution-at-scale-with-apache-hudi-in-aws-glue.mdx","source":"@site/blog/2023-02-07-automate-schema-evolution-at-scale-with-apache-hudi-in-aws-glue.mdx","title":"Automate schema evolution at scale with Apache Hudi in AWS Glue | Amazon Web Services","description":"Redirecting... please wait!!","date":"2023-02-07T00:00:00.000Z","formattedDate":"February 7, 2023","tags":[{"label":"schema evolution","permalink":"/cn/blog/tags/schema-evolution"},{"label":"datalake","permalink":"/cn/blog/tags/datalake"},{"label":"comparison","permalink":"/cn/blog/tags/comparison"},{"label":"onehouse","permalink":"/cn/blog/tags/onehouse"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Subhro Bose"},{"name":"Eva Fang"},{"name":"Ketan Karalkar"}],"prevItem":{"title":"Setting Uber\u2019s Transactional Data Lake in Motion with Incremental ETL Using Apache Hudi","permalink":"/cn/blog/2023/03/16/Setting-Uber-Transactional-Data-Lake-in-Motion-with-Incremental-ETL-Using-Apache-Hudi"},"nextItem":{"title":"Introducing native support for Apache Hudi, Delta Lake, and Apache Iceberg on AWS Glue for Apache Spark, Part 1: Getting Started","permalink":"/cn/blog/2023/01/27/Introducing-native-support-for-Apache-Hudi-Delta-Lake-Apache-Iceberg-on-AWS-Glue-for-Apache-Spark"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/automate-schema-evolution-at-scale-with-apache-hudi-in-aws-glue/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2023/01/27/Introducing-native-support-for-Apache-Hudi-Delta-Lake-Apache-Iceberg-on-AWS-Glue-for-Apache-Spark","metadata":{"permalink":"/cn/blog/2023/01/27/Introducing-native-support-for-Apache-Hudi-Delta-Lake-Apache-Iceberg-on-AWS-Glue-for-Apache-Spark","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2023-01-27-Introducing-native-support-for-Apache-Hudi-Delta-Lake-Apache-Iceberg-on-AWS-Glue-for-Apache-Spark.mdx","source":"@site/blog/2023-01-27-Introducing-native-support-for-Apache-Hudi-Delta-Lake-Apache-Iceberg-on-AWS-Glue-for-Apache-Spark.mdx","title":"Introducing native support for Apache Hudi, Delta Lake, and Apache Iceberg on AWS Glue for Apache Spark, Part 1: Getting Started","description":"Redirecting... please wait!!","date":"2023-01-27T00:00:00.000Z","formattedDate":"January 27, 2023","tags":[{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"},{"label":"workshop","permalink":"/cn/blog/tags/workshop"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Akira Ajisaka, Noritaka Sekiyama and Savio Dsouza"}],"prevItem":{"title":"Automate schema evolution at scale with Apache Hudi in AWS Glue | Amazon Web Services","permalink":"/cn/blog/2023/02/07/automate-schema-evolution-at-scale-with-apache-hudi-in-aws-glue"},"nextItem":{"title":"Apache Hudi vs Delta Lake vs Apache Iceberg - Lakehouse Feature Comparison","permalink":"/cn/blog/2023/01/11/Apache-Hudi-vs-Delta-Lake-vs-Apache-Iceberg-Lakehouse-Feature-Comparison"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/part-1-getting-started-introducing-native-support-for-apache-hudi-delta-lake-and-apache-iceberg-on-aws-glue-for-apache-spark/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2023/01/11/Apache-Hudi-vs-Delta-Lake-vs-Apache-Iceberg-Lakehouse-Feature-Comparison","metadata":{"permalink":"/cn/blog/2023/01/11/Apache-Hudi-vs-Delta-Lake-vs-Apache-Iceberg-Lakehouse-Feature-Comparison","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2023-01-11-Apache-Hudi-vs-Delta-Lake-vs-Apache-Iceberg-Lakehouse-Feature-Comparison.mdx","source":"@site/blog/2023-01-11-Apache-Hudi-vs-Delta-Lake-vs-Apache-Iceberg-Lakehouse-Feature-Comparison.mdx","title":"Apache Hudi vs Delta Lake vs Apache Iceberg - Lakehouse Feature Comparison","description":"Redirecting... please wait!!","date":"2023-01-11T00:00:00.000Z","formattedDate":"January 11, 2023","tags":[{"label":"lakehouse","permalink":"/cn/blog/tags/lakehouse"},{"label":"datalake","permalink":"/cn/blog/tags/datalake"},{"label":"comparison","permalink":"/cn/blog/tags/comparison"},{"label":"onehouse","permalink":"/cn/blog/tags/onehouse"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Kyle Weller"}],"prevItem":{"title":"Introducing native support for Apache Hudi, Delta Lake, and Apache Iceberg on AWS Glue for Apache Spark, Part 1: Getting Started","permalink":"/cn/blog/2023/01/27/Introducing-native-support-for-Apache-Hudi-Delta-Lake-Apache-Iceberg-on-AWS-Glue-for-Apache-Spark"},"nextItem":{"title":"Apache Hudi 2022 - A year in Review","permalink":"/cn/blog/2022/12/29/Apache-Hudi-2022-A-Year-In-Review"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.onehouse.ai/blog/apache-hudi-vs-delta-lake-vs-apache-iceberg-lakehouse-feature-comparison\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/12/29/Apache-Hudi-2022-A-Year-In-Review","metadata":{"permalink":"/cn/blog/2022/12/29/Apache-Hudi-2022-A-Year-In-Review","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-12-29-Apache-Hudi-2022-A-Year-In-Review.md","source":"@site/blog/2022-12-29-Apache-Hudi-2022-A-Year-In-Review.md","title":"Apache Hudi 2022 - A year in Review","description":"Apache Hudi Momentum","date":"2022-12-29T00:00:00.000Z","formattedDate":"December 29, 2022","tags":[{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":7.36,"truncated":false,"authors":[{"name":"Sivabalan Narayanan"}],"prevItem":{"title":"Apache Hudi vs Delta Lake vs Apache Iceberg - Lakehouse Feature Comparison","permalink":"/cn/blog/2023/01/11/Apache-Hudi-vs-Delta-Lake-vs-Apache-Iceberg-Lakehouse-Feature-Comparison"},"nextItem":{"title":"Build Your First Hudi Lakehouse with AWS S3 and AWS Glue","permalink":"/cn/blog/2022/12/19/Build-Your-First-Hudi-Lakehouse-with-AWS-Glue-and-AWS-S3"}},"content":"<img src=\\"/assets/images/blog/Apache-Hudi-2022-Review.png\\" alt=\\"drawing\\" style={{width:\'80%\', display:\'block\', marginLeft:\'auto\', marginRight:\'auto\'}} />\\n\\n## Apache Hudi Momentum\\nAs we wrap up 2022 I want to take the opportunity to reflect on and highlight the incredible progress of the Apache Hudi \\nproject and most importantly, the community. First and foremost, I want to thank all of the contributors who have made \\n2022 the best year for the project ever. There were [over 2,200 PRs](https://ossinsight.io/analyze/apache/hudi#pull-requests) \\ncreated (+38% YoY) and over 600+ users engaged on [Github](https://github.com/apache/hudi/). The Apache Hudi community \\n[slack channel](https://join.slack.com/t/apache-hudi/shared_invite/zt-1e94d3xro-JvlNO1kSeIHJBTVfLPlI5w) has grown to more \\nthan 2,600 users (+100% YoY growth) averaging nearly 200 messages per month! The most impressive stat is that with this \\nvolume growth, the median response time to questions is ~3h. [Come join the community](https://join.slack.com/t/apache-hudi/shared_invite/zt-1e94d3xro-JvlNO1kSeIHJBTVfLPlI5w) \\nwhere people are sharing and helping each other!\\n\\n<img src=\\"/assets/images/blog/Apache-Hudi-Pull-Request-History.png\\" alt=\\"drawing\\" style={{width:\'80%\', display:\'block\', marginLeft:\'auto\', marginRight:\'auto\'}} />\\n\\n## Key Releases in 2022\\n2022 has been a year jam packed with exciting new features for Apache Hudi across 0.11.0 and 0.12.0 releases. In addition to new features, vendor/ecosystem partnerships and relationships have been strengthened across many in the community. [AWS continues to double down](https://www.onehouse.ai/blog/apache-hudi-native-aws-integrations) on Apache Hudi, upgrading versions in [EMR](https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-hudi.html), [Athena](https://docs.aws.amazon.com/athena/latest/ug/querying-hudi.html), [Redshift](https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-external-tables.html), and announcing a new [native connector inside Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-format-hudi.html). [Presto](https://prestodb.io/docs/current/connector/hudi.html) and [Trino](https://trino.io/docs/current/connector/hudi.html) merged native Hudi connectors for interactive analytics. [DBT](https://hudi.apache.org/blog/2022/07/11/build-open-lakehouse-using-apache-hudi-and-dbt/), [Confluent](https://github.com/apache/hudi/tree/master/hudi-kafka-connect), [Datahub](https://hudi.apache.org/docs/syncing_datahub), and several others have added support for Hudi tables. While Google has supported Hudi for a while in [BigQuery](https://hudi.apache.org/docs/gcp_bigquery/) and [Dataproc](https://cloud.google.com/blog/products/data-analytics/getting-started-with-new-table-formats-on-dataproc), it also announced plans to add Hudi in [BigLake](https://cloud.google.com/blog/products/data-analytics/building-most-open-data-cloud-all-data-all-source-any-platform). The first tutorial for [Hudi on Azure Synapse Analytics](https://www.onehouse.ai/blog/apache-hudi-on-microsoft-azure) was published.\\n\\nWhile there are too many features added in 2022 to list them all, take a look at some of the exciting highlights:\\n\\n- [Multi-Modal Index](https://hudi.apache.org/blog/2022/05/17/Introducing-Multi-Modal-Index-for-the-Lakehouse-in-Apache-Hudi) is a first-of-its-kind high-performance indexing subsystem for the Lakehouse. It improves metadata lookup performance by up to 100x and reduces overall query latency by up to 30x. Two new indices were added to the metadata table - Bloom filter index that enables faster upsert performance and[  column stats index along with Data skipping](https://hudi.apache.org/blog/2022/06/09/Singificant-queries-speedup-from-Hudi-Column-Stats-Index-and-Data-Skipping-features)  helps speed up queries dramatically.\\n- Hudi added support for [asynchronous indexing](https://hudi.apache.org/releases/release-0.11.0/#async-indexer) to assist building such indices without blocking ingestion so that regular writers don\'t need to scale up resources for such one off spikes.\\n- A new type of index called Bucket Index was introduced this year. This could be game changing for deterministic workloads with partitioned datasets. It is very light-weight and allows the distribution of records to buckets using a hash function.\\n- Filesystem based Lock Provider - This implementation avoids the need of external systems and leverages the abilities of underlying filesystem to support lock provider needed for optimistic concurrency control in case of multiple writers. Please check the [lock configuration](https://hudi.apache.org/docs/configurations#Locks-Configurations) for details.\\n- Deltastreamer Graceful Completion - Users can now configure a post-write completion strategy with deltastreamer continuous mode for graceful shutdown.\\n- Schema on read is supported as an experimental feature since 0.11.0, allowing users to leverage Spark SQL DDL\xa0 support for [evolving data schema](https://hudi.apache.org/docs/schema_evolution) needs(drop, rename etc).\xa0 Added support for a lot of [CALL commands](https://hudi.apache.org/docs/procedures/) to invoke an array of actions on Hudi tables.\\n- It is now feasible to [encrypt](https://hudi.apache.org/docs/encryption/) your data that you store with Apache Hudi.\\n- Pulsar Write Commit Callback - On new events to the Hudi table, users can get notified via Pulsar.\\n- Flink Enhancements: We added metadata table support, async clustering, data skipping, and bucket index for write paths. We also extended flink support to versions 1.13.x, 1.14.x and[  1.15.x](https://hudi.apache.org/releases/release-0.12.0/#bundle-updates).\\n- Presto Hudi integration: In addition to the hive connector we have had for a long time, we added [native Presto Hudi connector](https://prestodb.io/docs/current/connector/hudi.html). This enables users to get access to advanced features of Hudi faster. Users can now leverage metadata table to reduce file listing cost. We also added support for accessing clustered datasets this year.\\n- Trino Hudi integration: We also added [native Trino Hudi connector](https://trino.io/docs/current/connector/hudi.html) to assist in querying Hudi tables via Trino Engine. Users can now leverage metadata table to make their queries performant.\\n- Performance enhancements: Many performance optimizations were landed by the community throughout the year to keep Hudi on par with competition or better. Check out this [TPC-DS benchmark](https://hudi.apache.org/blog/2022/06/29/Apache-Hudi-vs-Delta-Lake-transparent-tpc-ds-lakehouse-performance-benchmarks) comparing Hudi vs Delta Lake.\\n- [Long Term Support](https://hudi.apache.org/releases/release-0.12.2#long-term-support): We start to maintain 0.12 as the Long Term Support releases for users to migrate to and stay for a longer duration. In lieu of that, we have made 0.12.1\xa0 and 0.12.2 releases to assist users with stable release that comes packed with a lot of stability and bug fixes.\\n\\n## Community Events\\nApache Hudi is a global community and thankfully we live in a world today that empowers virtual collaboration and productivity. In addition to connecting virtually this year we have seen the Apache Hudi community gather at many events in person. Re:Invent, Data+AI Summit, Flink Forward, Alluxio Day, Data Council, PrestoCon, Confluent Current, DBT Coalesce, Cinco de Trino, Data Platform Summit, and many more.\\n\\n<img src=\\"/assets/images/blog/Apache-Hudi-Conferences.png\\" alt=\\"drawing\\" style={{width:\'80%\', display:\'block\', marginLeft:\'auto\', marginRight:\'auto\'}} />\\n\\nYou don\u2019t have to travel far to meet and collaborate with the Hudi community. We hold monthly virtual meetups, weekly office hours, and there are plenty of friendly faces on Hudi Slack who like to talk shop. Join us via Zoom for the next Hudi meetup!\\n\\n## Community Content\\nA wide diversity of organizations around the globe use Apache Hudi as the foundation of their production data platforms. Over 800+ organizations have engaged with Hudi (up 60% YoY) Here are a few highlights of content written by the community sharing their experiences, designs, and best practices:\\n\\n1. [Build your Hudi data lake on AWS](https://aws.amazon.com/blogs/big-data/part-1-build-your-apache-hudi-data-lake-on-aws-using-amazon-emr/) - Suthan Phillips and Dylan Qu from AWS\\n2. [Soumil Shah Hudi Youtube Playlist](https://www.youtube.com/playlist?list=PLL2hlSFBmWwwbMpcyMjYuRn8cN99gFSY6) - Soumil Shah from JobTarget\\n3. [SCD-2 with Apache Hudi](https://medium.com/walmartglobaltech/implementation-of-scd-2-slowly-changing-dimension-with-apache-hudi-465e0eb94a5) - Jayasheel Kalgal from Walmart\\n4. [Hudi vs Delta vs Iceberg comparisons](https://www.onehouse.ai/blog/apache-hudi-vs-delta-lake-vs-apache-iceberg-lakehouse-feature-comparison) - Kyle Weller from Onehouse\\n5. [Serverless, real-time analytics platform](https://aws.amazon.com/blogs/big-data/how-nerdwallet-uses-aws-and-apache-hudi-to-build-a-serverless-real-time-analytics-platform/) - Kevin Chun from NerdWallet\\n6. [DBT and Hudi to Build Open Lakehouse](https://hudi.apache.org/blog/2022/07/11/build-open-lakehouse-using-apache-hudi-and-dbt/) - Vinoth Govindarajan from Apple\\n7. [TPC-DS Benchmarks Hudi vs Delta Lake](https://www.onehouse.ai/blog/apache-hudi-vs-delta-lake-transparent-tpc-ds-lakehouse-performance-benchmarks) - Alexey Kudinkin from Onehouse\\n8. [Key Learnings Using Hudi building a Lakehouse](https://blogs.halodoc.io/key-learnings-on-using-apache-hudi-in-building-lakehouse-architecture-halodoc/) - Jitendra Shah from Halodoc\\n9. [Growing your business with modern data capabilities](https://aws.amazon.com/blogs/architecture/insights-for-ctos-part-3-growing-your-business-with-modern-data-capabilities/) - Jonathan Hwang from Zendesk\\n10. [Low-latency data lake using MSK, Flink, and Hudi](https://aws.amazon.com/blogs/big-data/create-a-low-latency-source-to-data-lake-pipeline-using-amazon-msk-connect-apache-flink-and-apache-hudi/) - Ali Alemi from AWS\\n11. [Fresher data lakes on AWS S3](https://robinhood.engineering/author-balaji-varadarajan-e3f496815ebf) - Balaji Varadarajan from Robinhood\\n12. [Experiences with Hudi from Uber meetup](https://www.youtube.com/watch?v=ZamXiT9aqs8) - Sam Guleff from Walmart and Vinay Patil from Disney+ Hotstar\\n\\n## What to look for in 2023\\nThanks to the strength of the community, Apache Hudi has a bright future for 2023. Check out [this recording](https://youtu.be/9LPSdd-AS8E?t=2090) from our Re:Invent meetup where Vinoth Chandar talks about exciting new features to expect in 2023.\\n\\n0.13.0 will be the next major release, with a package of exciting new features. Here are a few highlights:\\n\\n- [Record-key-based index](https://cwiki.apache.org/confluence/display/HUDI/RFC-08++Record+level+indexing+mechanisms+for+Hudi+datasets) to speed up the lookup of records for UUID-based updates and deletes, well tested with 10+ TB index data for hundreds of billions of records at Uber;\\n- [Consistent Hashing Index](https://github.com/apache/hudi/blob/master/rfc/rfc-42/rfc-42.md) with dynamically-sized buckets to achieve fast upsert performance with no data skew among file groups compared to existing [Bucket Index](https://cwiki.apache.org/confluence/display/HUDI/RFC+-+29%3A+Hash+Index);\\n- [New CDC format](https://github.com/apache/hudi/blob/master/rfc/rfc-51/rfc-51.md) with Debezium-like database change logs to provide before and after image and operation field for streaming changes from Hudi tables, friendly to engines like Flink;\\n- [New Record Merge API](https://github.com/apache/hudi/blob/master/rfc/rfc-46/rfc-46.md) to support engine-specific record representation for more efficient writes;\\n- [Early detection of conflicts](https://github.com/apache/hudi/blob/master/rfc/rfc-56/rfc-56.md) among concurrent writers to give back compute resources proactively.\\n\\nThe long-term vision of Apache Hudi is to make streaming data lake the mainstream, achieving sub-minute commit SLAs with stellar query performance and incremental ETLs.\xa0 We plan to harden the indexing subsystem with [Table APIs](https://github.com/apache/hudi/pull/7080) for easy integration with query engines and access to Hudi metadata and indexes, [Indexing Functions](https://github.com/apache/hudi/pull/7235) and [a Federated Storage Layer](https://github.com/apache/hudi/blob/master/rfc/rfc-60/rfc-60.md) to eliminate the notion of partitions and reduce I/O, and new [secondary indexes](https://github.com/apache/hudi/pull/5370).\xa0 To realize fast queries, we will provide an option of a standalone [MetaServer](https://github.com/apache/hudi/pull/4718) serving Hudi metadata to plan queries in milliseconds and a [Hudi-aware lake cache](https://docs.google.com/presentation/d/1QBgLw11TM2Qf1KUESofGrQDb63EuggNCpPaxc82Kldo/edit#slide=id.gf7e0551254_0_5) that speeds up the read performance of MOR tables along with fast writes for updates.\xa0 Incremental and streaming SQL will be enhanced in Spark and Flink.\xa0 For Hudi on Flink, we plan to make the multi-modal indexing production-ready, bring read and write compatibility between Flink and Spark engines, and harden the streaming capabilities, including CDC, streaming ETL semantics, pre-aggregation models and materialized views.\\n\\nCheck out [Hudi Roadmap](https://hudi.apache.org/roadmap) for more to come in 2023!\\n\\nIf you haven\'t tried Apache Hudi yet, 2023 is your year! Here are a few useful links to help you get started:\\n \\n1. [Apache Hudi Docs](https://hudi.apache.org/docs/overview)\\n2. [Hudi Slack Channel](https://join.slack.com/t/apache-hudi/shared_invite/zt-1e94d3xro-JvlNO1kSeIHJBTVfLPlI5w)\\n3. [Hudi Weekly Office Hours](https://hudi.apache.org/community/office_hours) and [Monthly Meetup](https://hudi.apache.org/community/syncs#monthly-community-call)\\n4. [Contributor Guide](https://hudi.apache.org/contribute/how-to-contribute)\\n\\nIf you enjoyed Hudi in 2022 don\'t forget to give it a little star on [Github](https://github.com/apache/hudi/) \u2b50"},{"id":"/2022/12/19/Build-Your-First-Hudi-Lakehouse-with-AWS-Glue-and-AWS-S3","metadata":{"permalink":"/cn/blog/2022/12/19/Build-Your-First-Hudi-Lakehouse-with-AWS-Glue-and-AWS-S3","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-12-19-Build-Your-First-Hudi-Lakehouse-with-AWS-Glue-and-AWS-S3.md","source":"@site/blog/2022-12-19-Build-Your-First-Hudi-Lakehouse-with-AWS-Glue-and-AWS-S3.md","title":"Build Your First Hudi Lakehouse with AWS S3 and AWS Glue","description":"/assets/images/blog/DataCouncil.jpg","date":"2022-12-19T00:00:00.000Z","formattedDate":"December 19, 2022","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"},{"label":"aws","permalink":"/cn/blog/tags/aws"}],"readingTime":1.26,"truncated":false,"authors":[{"name":"Nadine Farah"}],"prevItem":{"title":"Apache Hudi 2022 - A year in Review","permalink":"/cn/blog/2022/12/29/Apache-Hudi-2022-A-Year-In-Review"},"nextItem":{"title":"Run Apache Hudi at scale on AWS","permalink":"/cn/blog/2022/12/01/Run-apache-hudi-at-scale-on-aws"}},"content":"![/assets/images/blog/DataCouncil.jpg](/assets/images/blog/DataCouncil.jpg)\\n\\n\\n# Build Your First Hudi Lakehouse with AWS S3 and AWS Glue\\n\\nSoumil Shah is a Hudi community champion building [YouTube content](https://www.youtube.com/@SoumilShah/playlists) so developers can easily get started incorporating a lakehouse into their data infrastructure. In this [video](https://www.youtube.com/watch?v=5zF4jc_3rFs&list=PLL2hlSFBmWwwbMpcyMjYuRn8cN99gFSY6), Soumil shows you how to get started with AWS Glue, AWS S3, Hudi and Athena.\\n\\nIn this tutorial, you\u2019ll learn how to:\\n-   Create and configure AWS Glue\\n-   Create a Hudi Table\\n-   Create a Spark Data Frame\\n-   Add data to the Hudi Table \\n-   Query data via Athena\\n\\n![/assets/images/blog/build-your-first-hudi-lakehouse-12-19-diagram.jpg](/assets/images/blog/build-your-first-hudi-lakehouse-12-19-diagram.jpg)\\n\\n\\n**Step 1**: Users in this architecture purchase things from online retailers and generate an order transaction that is kept in DynamoDB.\\n\\n**Step 2**: The raw data layer stores the order transaction data that is fed into the data lake. To accomplish this, enable Kinesis Data Streams for DynamoDB, and we will stream real-time transactions from DynamoDB into kinesis data streams, process the streaming data with lambda, and insert the data into the next kinesis stream, where a glue streaming job will process and insert the data into Apache Hudi Transaction data lake.\\n  \\n**Step 3**: Users can build dashboards and derive insights using QuickSight.\\n\\n## Getting Started\\n\\nTo get started on building this data app, follow the YouTube video on\\n[Build Datalakes on S3 and Glue with Apache HUDI](https://www.youtube.com/watch?v=5zF4jc_3rFs&list=PLL2hlSFBmWwwbMpcyMjYuRn8cN99gFSY6&).\\n\\nFollow the the [step-by-step instructions](https://drive.google.com/file/d/1W-E_SupsoI8VZWGtq5d7doxdWdNDPEoj/view). \\n\\n  \\nApply the [code source](https://github.com/soumilshah1995/dynamodb-hudi-stream-project).\\n\\n## Questions\\n\\nIf you run into blockers doing this tutorial, please reach out on the Apache Hudi community and tag **soumilshah1995** to help debug."},{"id":"/2022/12/01/Run-apache-hudi-at-scale-on-aws","metadata":{"permalink":"/cn/blog/2022/12/01/Run-apache-hudi-at-scale-on-aws","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-12-01-Run-apache-hudi-at-scale-on-aws.mdx","source":"@site/blog/2022-12-01-Run-apache-hudi-at-scale-on-aws.mdx","title":"Run Apache Hudi at scale on AWS","description":"Redirecting... please wait!!","date":"2022-12-01T00:00:00.000Z","formattedDate":"December 1, 2022","tags":[{"label":"aws","permalink":"/cn/blog/tags/aws"},{"label":"guide","permalink":"/cn/blog/tags/guide"},{"label":"hudi","permalink":"/cn/blog/tags/hudi"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Imtiaz Sayed,"},{"name":"Shana Schipers"},{"name":"Dylan Qu"},{"name":"Carlos Rodrigues"},{"name":"Arun A K"},{"name":"Francisco Morillo"}],"prevItem":{"title":"Build Your First Hudi Lakehouse with AWS S3 and AWS Glue","permalink":"/cn/blog/2022/12/19/Build-Your-First-Hudi-Lakehouse-with-AWS-Glue-and-AWS-S3"},"nextItem":{"title":"Build your Apache Hudi data lake on AWS using Amazon EMR \u2013 Part 1","permalink":"/cn/blog/2022/11/22/Build-your-Apache-Hudi-data-lake-on-AWS-using-Amazon-EMR-Part-1"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://pages.awscloud.com/GLOBAL-devadopt-DL-Apache-Hudi-Technical-Guide-2023-learn.html?sc_channel=sm&sc_campaign=DB_Blog&sc_publisher=LINKEDIN&sc_geo=GLOBAL&sc_outcome=awareness&trk=DB_Blog&linkId=205888417/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/11/22/Build-your-Apache-Hudi-data-lake-on-AWS-using-Amazon-EMR-Part-1","metadata":{"permalink":"/cn/blog/2022/11/22/Build-your-Apache-Hudi-data-lake-on-AWS-using-Amazon-EMR-Part-1","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-11-22-Build-your-Apache-Hudi-data-lake-on-AWS-using-Amazon-EMR-Part-1.mdx","source":"@site/blog/2022-11-22-Build-your-Apache-Hudi-data-lake-on-AWS-using-Amazon-EMR-Part-1.mdx","title":"Build your Apache Hudi data lake on AWS using Amazon EMR \u2013 Part 1","description":"Redirecting... please wait!!","date":"2022-11-22T00:00:00.000Z","formattedDate":"November 22, 2022","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"best-practices","permalink":"/cn/blog/tags/best-practices"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Suthan Phillips"},{"name":"Dylan Qu"}],"prevItem":{"title":"Run Apache Hudi at scale on AWS","permalink":"/cn/blog/2022/12/01/Run-apache-hudi-at-scale-on-aws"},"nextItem":{"title":"How Hudl built a cost-optimized AWS Glue pipeline with Apache Hudi datasets","permalink":"/cn/blog/2022/11/10/How-Hudl-built-a-cost-optimized-AWS-Glue-pipeline-with-Apache-Hudi-datasets"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/part-1-build-your-apache-hudi-data-lake-on-aws-using-amazon-emr//\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/11/10/How-Hudl-built-a-cost-optimized-AWS-Glue-pipeline-with-Apache-Hudi-datasets","metadata":{"permalink":"/cn/blog/2022/11/10/How-Hudl-built-a-cost-optimized-AWS-Glue-pipeline-with-Apache-Hudi-datasets","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-11-10-How-Hudl-built-a-cost-optimized-AWS-Glue-pipeline-with-Apache-Hudi-datasets.mdx","source":"@site/blog/2022-11-10-How-Hudl-built-a-cost-optimized-AWS-Glue-pipeline-with-Apache-Hudi-datasets.mdx","title":"How Hudl built a cost-optimized AWS Glue pipeline with Apache Hudi datasets","description":"Redirecting... please wait!!","date":"2022-11-10T00:00:00.000Z","formattedDate":"November 10, 2022","tags":[{"label":"usecase","permalink":"/cn/blog/tags/usecase"},{"label":"cost-efficiency","permalink":"/cn/blog/tags/cost-efficiency"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"near real-time analytics","permalink":"/cn/blog/tags/near-real-time-analytics"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Indira Balakrishnan"},{"name":"Ramzi Yassine"},{"name":"Swagat Kulkarni"}],"prevItem":{"title":"Build your Apache Hudi data lake on AWS using Amazon EMR \u2013 Part 1","permalink":"/cn/blog/2022/11/22/Build-your-Apache-Hudi-data-lake-on-AWS-using-Amazon-EMR-Part-1"},"nextItem":{"title":"Get started with Apache Hudi using AWS Glue by implementing key design concepts \u2013 Part 1","permalink":"/cn/blog/2022/10/17/Get-started-with-Apache-Hudi-using-AWS"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/how-hudl-built-a-cost-optimized-aws-glue-pipeline-with-apache-hudi-datasets/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/10/17/Get-started-with-Apache-Hudi-using-AWS","metadata":{"permalink":"/cn/blog/2022/10/17/Get-started-with-Apache-Hudi-using-AWS","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-10-17-Get-started-with-Apache-Hudi-using-AWS.mdx","source":"@site/blog/2022-10-17-Get-started-with-Apache-Hudi-using-AWS.mdx","title":"Get started with Apache Hudi using AWS Glue by implementing key design concepts \u2013 Part 1","description":"Redirecting... please wait!!","date":"2022-10-17T00:00:00.000Z","formattedDate":"October 17, 2022","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"bulk-insert","permalink":"/cn/blog/tags/bulk-insert"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Amit Maindola"},{"name":"Srinivas Kandi"},{"name":"Mitesh Patel"}],"prevItem":{"title":"How Hudl built a cost-optimized AWS Glue pipeline with Apache Hudi datasets","permalink":"/cn/blog/2022/11/10/How-Hudl-built-a-cost-optimized-AWS-Glue-pipeline-with-Apache-Hudi-datasets"},"nextItem":{"title":"Ingest streaming data to Apache Hudi tables using AWS Glue and Apache Hudi DeltaStreamer","permalink":"/cn/blog/2022/10/06/Ingest-streaming-data-to-Apache-Hudi-using-AWS-Glue-and-DeltaStreamer"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/part-1-get-started-with-apache-hudi-using-aws-glue-by-implementing-key-design-concepts/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/10/06/Ingest-streaming-data-to-Apache-Hudi-using-AWS-Glue-and-DeltaStreamer","metadata":{"permalink":"/cn/blog/2022/10/06/Ingest-streaming-data-to-Apache-Hudi-using-AWS-Glue-and-DeltaStreamer","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-10-06-Ingest-streaming-data-to-Apache-Hudi-using-AWS-Glue-and-DeltaStreamer.mdx","source":"@site/blog/2022-10-06-Ingest-streaming-data-to-Apache-Hudi-using-AWS-Glue-and-DeltaStreamer.mdx","title":"Ingest streaming data to Apache Hudi tables using AWS Glue and Apache Hudi DeltaStreamer","description":"Redirecting... please wait!!","date":"2022-10-06T00:00:00.000Z","formattedDate":"October 6, 2022","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"streaming ingestion","permalink":"/cn/blog/tags/streaming-ingestion"},{"label":"deltastreamer","permalink":"/cn/blog/tags/deltastreamer"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Vishal Pathak"},{"name":"Anand Prakash"},{"name":"Noritaka Sekiyama"}],"prevItem":{"title":"Get started with Apache Hudi using AWS Glue by implementing key design concepts \u2013 Part 1","permalink":"/cn/blog/2022/10/17/Get-started-with-Apache-Hudi-using-AWS"},"nextItem":{"title":"Data processing with Spark: time traveling","permalink":"/cn/blog/2022/09/28/Data-processing-with-Spark-time-traveling"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/ingest-streaming-data-to-apache-hudi-tables-using-aws-glue-and-apache-hudi-deltastreamer/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/09/28/Data-processing-with-Spark-time-traveling","metadata":{"permalink":"/cn/blog/2022/09/28/Data-processing-with-Spark-time-traveling","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-09-28-Data-processing-with-Spark-time-traveling.mdx","source":"@site/blog/2022-09-28-Data-processing-with-Spark-time-traveling.mdx","title":"Data processing with Spark: time traveling","description":"Redirecting... please wait!!","date":"2022-09-28T00:00:00.000Z","formattedDate":"September 28, 2022","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"time-travel","permalink":"/cn/blog/tags/time-travel"},{"label":"devgenius","permalink":"/cn/blog/tags/devgenius"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Petrica Leuca"}],"prevItem":{"title":"Ingest streaming data to Apache Hudi tables using AWS Glue and Apache Hudi DeltaStreamer","permalink":"/cn/blog/2022/10/06/Ingest-streaming-data-to-Apache-Hudi-using-AWS-Glue-and-DeltaStreamer"},"nextItem":{"title":"Building Streaming Data Lakes with Hudi and MinIO","permalink":"/cn/blog/2022/09/20/Building-Streaming-Data-Lakes-with-Hudi-and-MinIO"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://blog.devgenius.io/data-processing-with-spark-time-traveling-55905f765694\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/09/20/Building-Streaming-Data-Lakes-with-Hudi-and-MinIO","metadata":{"permalink":"/cn/blog/2022/09/20/Building-Streaming-Data-Lakes-with-Hudi-and-MinIO","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-09-20-Building-Streaming-Data-Lakes-with-Hudi-and-MinIO.mdx","source":"@site/blog/2022-09-20-Building-Streaming-Data-Lakes-with-Hudi-and-MinIO.mdx","title":"Building Streaming Data Lakes with Hudi and MinIO","description":"Redirecting... please wait!!","date":"2022-09-20T00:00:00.000Z","formattedDate":"September 20, 2022","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"datalake","permalink":"/cn/blog/tags/datalake"},{"label":"datalake-platform","permalink":"/cn/blog/tags/datalake-platform"},{"label":"streaming ingestion","permalink":"/cn/blog/tags/streaming-ingestion"},{"label":"minio","permalink":"/cn/blog/tags/minio"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Matt Sarrel"}],"prevItem":{"title":"Data processing with Spark: time traveling","permalink":"/cn/blog/2022/09/28/Data-processing-with-Spark-time-traveling"},"nextItem":{"title":"Data Lake / Lakehouse Guide: Powered by Data Lake Table Formats (Delta Lake, Iceberg, Hudi)","permalink":"/cn/blog/2022/08/25/Data-Lake-Lakehouse-Guide-Powered-by-Data-Lake-Table-Formats-Delta-Lake-Iceberg-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://blog.min.io/streaming-data-lakes-hudi-minio/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/08/25/Data-Lake-Lakehouse-Guide-Powered-by-Data-Lake-Table-Formats-Delta-Lake-Iceberg-Hudi","metadata":{"permalink":"/cn/blog/2022/08/25/Data-Lake-Lakehouse-Guide-Powered-by-Data-Lake-Table-Formats-Delta-Lake-Iceberg-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-08-25-Data-Lake-Lakehouse-Guide-Powered-by-Data-Lake-Table-Formats-Delta-Lake-Iceberg-Hudi.mdx","source":"@site/blog/2022-08-25-Data-Lake-Lakehouse-Guide-Powered-by-Data-Lake-Table-Formats-Delta-Lake-Iceberg-Hudi.mdx","title":"Data Lake / Lakehouse Guide: Powered by Data Lake Table Formats (Delta Lake, Iceberg, Hudi)","description":"Redirecting... please wait!!","date":"2022-08-25T00:00:00.000Z","formattedDate":"August 25, 2022","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"datalake","permalink":"/cn/blog/tags/datalake"},{"label":"lakehouse","permalink":"/cn/blog/tags/lakehouse"},{"label":"comparison","permalink":"/cn/blog/tags/comparison"},{"label":"airbyte","permalink":"/cn/blog/tags/airbyte"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Simon Sp\xe4ti"}],"prevItem":{"title":"Building Streaming Data Lakes with Hudi and MinIO","permalink":"/cn/blog/2022/09/20/Building-Streaming-Data-Lakes-with-Hudi-and-MinIO"},"nextItem":{"title":"Implementation of SCD-2 (Slowly Changing Dimension) with Apache Hudi & Spark","permalink":"/cn/blog/2022/08/24/Implementation-of-SCD-2-with-Apache-Hudi-and-Spark"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://airbyte.com/blog/data-lake-lakehouse-guide-powered-by-table-formats-delta-lake-iceberg-hudi\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/08/24/Implementation-of-SCD-2-with-Apache-Hudi-and-Spark","metadata":{"permalink":"/cn/blog/2022/08/24/Implementation-of-SCD-2-with-Apache-Hudi-and-Spark","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-08-24-Implementation-of-SCD-2-with-Apache-Hudi-and-Spark.mdx","source":"@site/blog/2022-08-24-Implementation-of-SCD-2-with-Apache-Hudi-and-Spark.mdx","title":"Implementation of SCD-2 (Slowly Changing Dimension) with Apache Hudi & Spark","description":"Redirecting... please wait!!","date":"2022-08-24T00:00:00.000Z","formattedDate":"August 24, 2022","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"scd2","permalink":"/cn/blog/tags/scd-2"},{"label":"walmartglobaltech","permalink":"/cn/blog/tags/walmartglobaltech"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Jayasheel Kalgal"},{"name":"Esha Dhing"},{"name":"Prashant Mishra"}],"prevItem":{"title":"Data Lake / Lakehouse Guide: Powered by Data Lake Table Formats (Delta Lake, Iceberg, Hudi)","permalink":"/cn/blog/2022/08/25/Data-Lake-Lakehouse-Guide-Powered-by-Data-Lake-Table-Formats-Delta-Lake-Iceberg-Hudi"},"nextItem":{"title":"Use Flink Hudi to Build a Streaming Data Lake Platform","permalink":"/cn/blog/2022/08/12/Use-Flink-Hudi-to-Build-a-Streaming-Data-Lake-Platform"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://medium.com/walmartglobaltech/implementation-of-scd-2-slowly-changing-dimension-with-apache-hudi-465e0eb94a5\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/08/12/Use-Flink-Hudi-to-Build-a-Streaming-Data-Lake-Platform","metadata":{"permalink":"/cn/blog/2022/08/12/Use-Flink-Hudi-to-Build-a-Streaming-Data-Lake-Platform","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-08-12-Use-Flink-Hudi-to-Build-a-Streaming-Data-Lake-Platform.mdx","source":"@site/blog/2022-08-12-Use-Flink-Hudi-to-Build-a-Streaming-Data-Lake-Platform.mdx","title":"Use Flink Hudi to Build a Streaming Data Lake Platform","description":"Redirecting... please wait!!","date":"2022-08-12T00:00:00.000Z","formattedDate":"August 12, 2022","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"apache flink","permalink":"/cn/blog/tags/apache-flink"},{"label":"alibabacloud","permalink":"/cn/blog/tags/alibabacloud"},{"label":"streaming ingestion","permalink":"/cn/blog/tags/streaming-ingestion"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Chen Yuzhao"},{"name":"Liu Dalong"}],"prevItem":{"title":"Implementation of SCD-2 (Slowly Changing Dimension) with Apache Hudi & Spark","permalink":"/cn/blog/2022/08/24/Implementation-of-SCD-2-with-Apache-Hudi-and-Spark"},"nextItem":{"title":"How NerdWallet uses AWS and Apache Hudi to build a serverless, real-time analytics platform","permalink":"/cn/blog/2022/08/09/How-NerdWallet-uses-AWS-and-Apache-Hudi-to-build-a-serverless-real-time-analytics-platform"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.alibabacloud.com/blog/use-flink-hudi-to-build-a-streaming-data-lake-platform_599240\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/08/09/How-NerdWallet-uses-AWS-and-Apache-Hudi-to-build-a-serverless-real-time-analytics-platform","metadata":{"permalink":"/cn/blog/2022/08/09/How-NerdWallet-uses-AWS-and-Apache-Hudi-to-build-a-serverless-real-time-analytics-platform","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-08-09-How-NerdWallet-uses-AWS-and-Apache-Hudi-to-build-a-serverless-real-time-analytics-platform.mdx","source":"@site/blog/2022-08-09-How-NerdWallet-uses-AWS-and-Apache-Hudi-to-build-a-serverless-real-time-analytics-platform.mdx","title":"How NerdWallet uses AWS and Apache Hudi to build a serverless, real-time analytics platform","description":"Redirecting... please wait!!","date":"2022-08-09T00:00:00.000Z","formattedDate":"August 9, 2022","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"near real-time analytics","permalink":"/cn/blog/tags/near-real-time-analytics"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Kevin Chun"},{"name":"Dylan Qu"}],"prevItem":{"title":"Use Flink Hudi to Build a Streaming Data Lake Platform","permalink":"/cn/blog/2022/08/12/Use-Flink-Hudi-to-Build-a-Streaming-Data-Lake-Platform"},"nextItem":{"title":"Build Open Lakehouse using Apache Hudi & dbt","permalink":"/cn/blog/2022/07/11/build-open-lakehouse-using-apache-hudi-and-dbt"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/how-nerdwallet-uses-aws-and-apache-hudi-to-build-a-serverless-real-time-analytics-platform/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/07/11/build-open-lakehouse-using-apache-hudi-and-dbt","metadata":{"permalink":"/cn/blog/2022/07/11/build-open-lakehouse-using-apache-hudi-and-dbt","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-07-11-build-open-lakehouse-using-apache-hudi-and-dbt.md","source":"@site/blog/2022-07-11-build-open-lakehouse-using-apache-hudi-and-dbt.md","title":"Build Open Lakehouse using Apache Hudi & dbt","description":"The focus of this blog is to show you how to build an open lakehouse leveraging incremental data processing and performing field-level updates. We are excited to announce that you can now use Apache Hudi + dbt for building open data lakehouses.","date":"2022-07-11T00:00:00.000Z","formattedDate":"July 11, 2022","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"deltastreamer","permalink":"/cn/blog/tags/deltastreamer"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":6.64,"truncated":false,"authors":[{"name":"Vinoth Govindarajan"}],"prevItem":{"title":"How NerdWallet uses AWS and Apache Hudi to build a serverless, real-time analytics platform","permalink":"/cn/blog/2022/08/09/How-NerdWallet-uses-AWS-and-Apache-Hudi-to-build-a-serverless-real-time-analytics-platform"},"nextItem":{"title":"Apache Hudi vs Delta Lake - Transparent TPC-DS Lakehouse Performance Benchmarks","permalink":"/cn/blog/2022/06/29/Apache-Hudi-vs-Delta-Lake-transparent-tpc-ds-lakehouse-performance-benchmarks"}},"content":"The focus of this blog is to show you how to build an open lakehouse leveraging incremental data processing and performing field-level updates. We are excited to announce that you can now use Apache Hudi + dbt for building open data lakehouses.\\n\\n![/assets/images/blog/hudi_dbt_lakehouse.png](/assets/images/blog/hudi_dbt_lakehouse.png)\\n\\n\\nLet\'s first clarify a few terminologies used in this blog before we dive into the details.\\n\\n## What is Apache Hudi?\\n\\nApache Hudi brings ACID transactions, record-level updates/deletes, and change streams to data lakehouses.\\n\\nApache Hudi is an open-source data management framework used to simplify incremental data processing and data pipeline development. This framework more efficiently manages business requirements like data lifecycle and improves data quality.\\n\\n## What is dbt?\\n\\ndbt (data build tool) is a data transformation tool that enables data analysts and engineers to transform, test, and document data in the cloud data warehouses.\\n\\ndbt enables analytics engineers to transform data in their warehouses by simply writing select statements. dbt handles turning these select statements into tables and views.\\n\\ndbt does the T in ELT (Extract, Load, Transform) processes \u2013 it doesn\u2019t extract or load data, but it\u2019s extremely good at transforming data that\u2019s already loaded into your warehouse.\\n\\n## What is a Lakehouse?\\n\\nA lakehouse is a new, open architecture that combines the best elements of data lakes and data warehouses. Lakehouses are enabled by a new system design: implementing transaction management and data management features similar to those in a data warehouse directly on top of low-cost cloud storage in open formats. They are what you would get if you had to redesign data warehouses in the modern world, now that cheap and highly reliable storage (in the form of object stores) are available.\\n\\nIn other words, while data lakes historically have been viewed as a bunch of files added to cloud storage folders, lakehouse tables support transactions, updates, deletes, and in the case of Apache Hudi, even database-like functionality like indexing or change capture.\\n\\n## How to build an open lakehouse?\\n\\nNow, we know what is a lakehouse, so let\'s build one, In order to build an open lakehouse, you need a few components:\\n\\n* Open table format which supports ACID transactions\\n   * Apache Hudi (integrated with dbt)\\n   * Delta Lake (proprietary features locked to Databricks runtime)\\n   * Apache Iceberg (currently not integrated with dbt)\\n* Data transformation tool\\n   * Open source dbt is the de-facto popular choice for transformation layer\\n* Distributed data processing engine\\n   * Apache Spark is the de-facto popular choice for compute engine\\n* Cloud Storage\\n   * You can choose any of the cost-effective cloud stores or HDFS\\n* Bring your favorite query engine\\n\\nTo build the lakehouse you need a way to extract and load the data into Hudi table format and then transform in-place using dbt.\\n\\nDBT supports Hudi out of the box with the [dbt-spark](https://github.com/dbt-labs/dbt-spark) adapter package. When creating modeled datasets using dbt you can choose Hudi as the format for your tables.\\n\\nYou can follow the instructions on this [page](https://github.com/apache/hudi/blob/master/hudi-examples/hudi-examples-dbt/README.md) to learn how to install and configure dbt+hudi.\\n\\n## Step 1: How to extract & load the raw data datasets?\\n\\nThis is the first step in building your data lake and there are many choices here to load the data into our open lakehouse. I\u2019m going to go with one of the Hudi\u2019s native tools called Delta Streamer since all the ingestion features are pre-built and battle-tested in production at scale.\\n\\nHudi\u2019s [DeltaStreamer](https://hudi.apache.org/docs/hoodie_deltastreamer) does the EL in ELT (Extract, Load, Transform) processes \u2013 it\u2019s extremely good at extracting, loading, and optionally [transforming data](https://hudi.apache.org/docs/transforms) that\u2019s already loaded into your lakehouse.\\n\\n## Step 2: How to configure hudi with the dbt project?\\n\\nTo use the Hudi with your dbt project,  all you need to do is choose the file format as Hudi. The file format config can either be specified in specific models, or for all the models in your dbt_project.yml file:\\n\\n```yml title=\\"dbt_project.yml\\"\\nmodels:\\n   +file_format: hudi\\n```\\n\\nor:\\n\\n```sql title=\\"model/my_model.sql\\"\\n{{ config(\\n   materialized = \'incremental\',\\n   incremental_strategy = \'merge\',\\n   file_format = \'hudi\',\\n   unique_key = \'id\',\\n   \u2026\\n) }}\\n```\\n\\nAfter choosing hudi as the file_format you can create materialized datasets using dbt, which offers additional benefits that are unique to the Hudi table format such as field-level upserts/deletes.\\n\\n## Step 3: How to read the raw data incrementally?\\n\\nBefore we learn how to build incremental materialization, let\u2019s quickly learn, What are materializations in dbt? Materializations are strategies for persisting dbt models in a lakehouse. There are four types of materializations built into dbt. They are:\\n* table\\n* view\\n* incremental\\n* ephemeral\\n\\nAmong all the materialization types, only incremental models allow dbt to insert or update records into a table since the last time that dbt was run, which unlocks the powers of Hudi, we will dive into the details.\\n\\nTo use incremental models, you need to perform these two activities:\\n1. Tell dbt how to filter the rows on the incremental executions\\n2. Define the uniqueness constraint of the model (required when using >= Hudi 0.10.1 version)\\n\\n### How to apply filters on an incremental run?\\n\\ndbt provides you a macro `is_incremental()` which is very useful to define the filters exclusively for incremental materializations.\\n\\nOften, you\'ll want to filter for \\"new\\" rows, as in, rows that have been created since the last time dbt ran this model. The best way to find the timestamp of the most recent run of this model is by checking the most recent timestamp in your target table. dbt makes it easy to query your target table by using the \\"[{{ this }}](https://docs.getdbt.com/reference/dbt-jinja-functions/this)\\" variable.\\n\\n```sql title=\\"models/my_model.sql\\"\\n{{\\n   config(\\n       materialized=\'incremental\',\\n       file_format=\'hudi\',\\n   )\\n}}\\n\\nselect\\n   *\\nfrom raw_app_data.events\\n{% if is_incremental() %}\\n   -- this filter will only be applied on an incremental run\\n   where event_time > (select max(event_time) from {{ this }})\\n{% endif %}\\n```\\n\\n### How to define the uniqueness constraint?\\n\\nA unique_key is the primary key of the dataset, which determines whether a record has new values and should be updated/deleted, or inserted.\\n\\nYou can define the unique_key in the configuration block at the top of your model. This unique_key will act as the primaryKey (hoodie.datasource.write.recordkey.field) on the hudi table.\\n\\n## Step 4: How to use the upsert feature while writing datasets?\\n\\ndbt offers multiple load strategies when loading the transformed datasets, such as:\\n* append (default)\\n* insert_overwrite (optional)\\n* merge (optional, Only available for Hudi and Delta formats)\\n\\nBy default dbt uses the append strategy, which may cause duplicate rows when you execute dbt run command multiple times on the same payload.\\n\\nWhen you choose the insert_overwrite strategy, dbt will overwrite the entire partition or full table load for every dbt run, which causes unnecessary overheads and is very expensive.\\n\\nIn addition to all the existing strategies to load the data, with hudi you can use the exclusive merge strategy when using incremental materialization. Using the merge strategy you can perform field-level updates/deletes on your data lakehouse which is performant and cost-efficient. As a result, you will get access to fresher data and accelerated insights.\\n\\n### How to perform field-level updates?\\n\\nIf you are using the merge strategy and have specified a unique_key, by default, dbt will entirely overwrite matched rows with new values.\\n\\nSince Apache Spark adapter supports the merge strategy, you may optionally pass a list of column names to a `merge_update_columns` config. In that case, dbt will update only the columns specified by the config, and keep the previous values of other columns.\\n\\n```sql title=\\"models/my_model.sql\\"\\n{{ config(\\n   materialized = \'incremental\',\\n   incremental_strategy = \'merge\',\\n   file_format = \'hudi\',\\n   unique_key = \'id\',\\n   merge_update_columns = [\'msg\', \'updated_ts\'],\\n) }}\\n```\\n\\n### How to configure additional hoodie custom configs?\\n\\nWhen you want to specify additional hudi configs, you can do that with the options config:\\n\\n```sql title=\\"models/my_model.sql\\"\\n{{ config(\\n   materialized=\'incremental\',\\n   file_format=\'hudi\',\\n   incremental_strategy=\'merge\',\\n   options={\\n       \'type\': \'mor\',\\n       \'primaryKey\': \'id\',\\n       \'precombineKey\': \'ts\',\\n   },\\n   unique_key=\'id\',\\n   partition_by=\'datestr\',\\n   pre_hook=[\\"set spark.sql.datetime.java8API.enabled=false;\\"],\\n  )\\n}}\\n```\\n\\nHope you understood the benefits of using Apache Hudi with dbt to build your next open lakehouse, good luck!"},{"id":"/2022/06/29/Apache-Hudi-vs-Delta-Lake-transparent-tpc-ds-lakehouse-performance-benchmarks","metadata":{"permalink":"/cn/blog/2022/06/29/Apache-Hudi-vs-Delta-Lake-transparent-tpc-ds-lakehouse-performance-benchmarks","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-06-29-Apache-Hudi-vs-Delta-Lake-transparent-tpc-ds-lakehouse-performance-benchmarks.mdx","source":"@site/blog/2022-06-29-Apache-Hudi-vs-Delta-Lake-transparent-tpc-ds-lakehouse-performance-benchmarks.mdx","title":"Apache Hudi vs Delta Lake - Transparent TPC-DS Lakehouse Performance Benchmarks","description":"Redirecting... please wait!!","date":"2022-06-29T00:00:00.000Z","formattedDate":"June 29, 2022","tags":[{"label":"performance","permalink":"/cn/blog/tags/performance"},{"label":"datalake","permalink":"/cn/blog/tags/datalake"},{"label":"comparison","permalink":"/cn/blog/tags/comparison"},{"label":"onehouse","permalink":"/cn/blog/tags/onehouse"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Alexey Kudinkin"}],"prevItem":{"title":"Build Open Lakehouse using Apache Hudi & dbt","permalink":"/cn/blog/2022/07/11/build-open-lakehouse-using-apache-hudi-and-dbt"},"nextItem":{"title":"Hudi\u2019s Column Stats Index and Data Skipping feature help speed up queries by an orders of magnitude!","permalink":"/cn/blog/2022/06/09/Singificant-queries-speedup-from-Hudi-Column-Stats-Index-and-Data-Skipping-features"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.onehouse.ai/blog/apache-hudi-vs-delta-lake-transparent-tpc-ds-lakehouse-performance-benchmarks\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/06/09/Singificant-queries-speedup-from-Hudi-Column-Stats-Index-and-Data-Skipping-features","metadata":{"permalink":"/cn/blog/2022/06/09/Singificant-queries-speedup-from-Hudi-Column-Stats-Index-and-Data-Skipping-features","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-06-09-Singificant-queries-speedup-from-Hudi-Column-Stats-Index-and-Data-Skipping-features.mdx","source":"@site/blog/2022-06-09-Singificant-queries-speedup-from-Hudi-Column-Stats-Index-and-Data-Skipping-features.mdx","title":"Hudi\u2019s Column Stats Index and Data Skipping feature help speed up queries by an orders of magnitude!","description":"Redirecting... please wait!!","date":"2022-06-09T00:00:00.000Z","formattedDate":"June 9, 2022","tags":[{"label":"design","permalink":"/cn/blog/tags/design"},{"label":"indexing","permalink":"/cn/blog/tags/indexing"},{"label":"data skipping","permalink":"/cn/blog/tags/data-skipping"},{"label":"onehouse","permalink":"/cn/blog/tags/onehouse"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Alexey Kudinkin"}],"prevItem":{"title":"Apache Hudi vs Delta Lake - Transparent TPC-DS Lakehouse Performance Benchmarks","permalink":"/cn/blog/2022/06/29/Apache-Hudi-vs-Delta-Lake-transparent-tpc-ds-lakehouse-performance-benchmarks"},"nextItem":{"title":"Asynchronous Indexing using Hudi","permalink":"/cn/blog/2022/06/04/Asynchronous-Indexing-Using-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.onehouse.ai/blog/hudis-column-stats-index-and-data-skipping-feature-help-speed-up-queries-by-an-orders-of-magnitude\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/06/04/Asynchronous-Indexing-Using-Hudi","metadata":{"permalink":"/cn/blog/2022/06/04/Asynchronous-Indexing-Using-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-06-04-Asynchronous-Indexing-Using-Hudi.mdx","source":"@site/blog/2022-06-04-Asynchronous-Indexing-Using-Hudi.mdx","title":"Asynchronous Indexing using Hudi","description":"Redirecting... please wait!!","date":"2022-06-04T00:00:00.000Z","formattedDate":"June 4, 2022","tags":[{"label":"design","permalink":"/cn/blog/tags/design"},{"label":"multi-modal indexing","permalink":"/cn/blog/tags/multi-modal-indexing"},{"label":"onehouse","permalink":"/cn/blog/tags/onehouse"},{"label":"async indexing","permalink":"/cn/blog/tags/async-indexing"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Sagar Sumit"}],"prevItem":{"title":"Hudi\u2019s Column Stats Index and Data Skipping feature help speed up queries by an orders of magnitude!","permalink":"/cn/blog/2022/06/09/Singificant-queries-speedup-from-Hudi-Column-Stats-Index-and-Data-Skipping-features"},"nextItem":{"title":"The story of building a data lake that can be deleted on a record-by-record basis using Apache Hudi","permalink":"/cn/blog/2022/05/25/Record-by-record-deletable-data-lake-using-Apache-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.onehouse.ai/blog/asynchronous-indexing-using-hudi\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/05/25/Record-by-record-deletable-data-lake-using-Apache-Hudi","metadata":{"permalink":"/cn/blog/2022/05/25/Record-by-record-deletable-data-lake-using-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-05-25-Record-by-record-deletable-data-lake-using-Apache-Hudi.mdx","source":"@site/blog/2022-05-25-Record-by-record-deletable-data-lake-using-Apache-Hudi.mdx","title":"The story of building a data lake that can be deleted on a record-by-record basis using Apache Hudi","description":"Redirecting... please wait!!","date":"2022-05-25T00:00:00.000Z","formattedDate":"May 25, 2022","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"gdpr deletion","permalink":"/cn/blog/tags/gdpr-deletion"},{"label":"yahoo","permalink":"/cn/blog/tags/yahoo"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Shota Ejima"}],"prevItem":{"title":"Asynchronous Indexing using Hudi","permalink":"/cn/blog/2022/06/04/Asynchronous-Indexing-Using-Hudi"},"nextItem":{"title":"Multi-Modal Index for the Lakehouse in Apache Hudi","permalink":"/cn/blog/2022/05/17/Introducing-Multi-Modal-Index-for-the-Lakehouse-in-Apache-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://techblog.yahoo.co.jp/entry/2022052530303179/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/05/17/Introducing-Multi-Modal-Index-for-the-Lakehouse-in-Apache-Hudi","metadata":{"permalink":"/cn/blog/2022/05/17/Introducing-Multi-Modal-Index-for-the-Lakehouse-in-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-05-17-Introducing-Multi-Modal-Index-for-the-Lakehouse-in-Apache-Hudi.mdx","source":"@site/blog/2022-05-17-Introducing-Multi-Modal-Index-for-the-Lakehouse-in-Apache-Hudi.mdx","title":"Multi-Modal Index for the Lakehouse in Apache Hudi","description":"Redirecting... please wait!!","date":"2022-05-17T00:00:00.000Z","formattedDate":"May 17, 2022","tags":[{"label":"design","permalink":"/cn/blog/tags/design"},{"label":"multi-modal indexing","permalink":"/cn/blog/tags/multi-modal-indexing"},{"label":"lakehouse","permalink":"/cn/blog/tags/lakehouse"},{"label":"onehouse","permalink":"/cn/blog/tags/onehouse"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Sivabalan Narayanan"},{"name":"Ethan Guo"}],"prevItem":{"title":"The story of building a data lake that can be deleted on a record-by-record basis using Apache Hudi","permalink":"/cn/blog/2022/05/25/Record-by-record-deletable-data-lake-using-Apache-Hudi"},"nextItem":{"title":"Corrections in data lakehouse table format comparisons","permalink":"/cn/blog/2022/04/19/Corrections-in-data-lakehouse-table-format-comparisons"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.onehouse.ai/blog/introducing-multi-modal-index-for-the-lakehouse-in-apache-hudi\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/04/19/Corrections-in-data-lakehouse-table-format-comparisons","metadata":{"permalink":"/cn/blog/2022/04/19/Corrections-in-data-lakehouse-table-format-comparisons","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-04-19-Corrections-in-data-lakehouse-table-format-comparisons.mdx","source":"@site/blog/2022-04-19-Corrections-in-data-lakehouse-table-format-comparisons.mdx","title":"Corrections in data lakehouse table format comparisons","description":"Redirecting... please wait!!","date":"2022-04-19T00:00:00.000Z","formattedDate":"April 19, 2022","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"lakehouse","permalink":"/cn/blog/tags/lakehouse"},{"label":"bytearray","permalink":"/cn/blog/tags/bytearray"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Vinoth Chandar"}],"prevItem":{"title":"Multi-Modal Index for the Lakehouse in Apache Hudi","permalink":"/cn/blog/2022/05/17/Introducing-Multi-Modal-Index-for-the-Lakehouse-in-Apache-Hudi"},"nextItem":{"title":"Key Learnings on Using Apache HUDI in building Lakehouse Architecture @ Halodoc","permalink":"/cn/blog/2022/04/04/Key-Learnings-on-Using-Apache-HUDI-in-building-Lakehouse-Architecture-at-Halodoc"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://bytearray.io/corrections-in-data-lakehouse-table-format-comparisons-b72eb63ece32\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/04/04/Key-Learnings-on-Using-Apache-HUDI-in-building-Lakehouse-Architecture-at-Halodoc","metadata":{"permalink":"/cn/blog/2022/04/04/Key-Learnings-on-Using-Apache-HUDI-in-building-Lakehouse-Architecture-at-Halodoc","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-04-04-Key-Learnings-on-Using-Apache-HUDI-in-building-Lakehouse-Architecture-at-Halodoc.mdx","source":"@site/blog/2022-04-04-Key-Learnings-on-Using-Apache-HUDI-in-building-Lakehouse-Architecture-at-Halodoc.mdx","title":"Key Learnings on Using Apache HUDI in building Lakehouse Architecture @ Halodoc","description":"Redirecting... please wait!!","date":"2022-04-04T00:00:00.000Z","formattedDate":"April 4, 2022","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"lakehouse","permalink":"/cn/blog/tags/lakehouse"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"halodoc","permalink":"/cn/blog/tags/halodoc"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Jitendra Shah"}],"prevItem":{"title":"Corrections in data lakehouse table format comparisons","permalink":"/cn/blog/2022/04/19/Corrections-in-data-lakehouse-table-format-comparisons"},"nextItem":{"title":"New features from Apache Hudi 0.9.0 on Amazon EMR","permalink":"/cn/blog/2022/04/04/New-features-from-Apache-Hudi-0.9.0-on-Amazon-EMR"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://blogs.halodoc.io/key-learnings-on-using-apache-hudi-in-building-lakehouse-architecture-halodoc/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/04/04/New-features-from-Apache-Hudi-0.9.0-on-Amazon-EMR","metadata":{"permalink":"/cn/blog/2022/04/04/New-features-from-Apache-Hudi-0.9.0-on-Amazon-EMR","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-04-04-New-features-from-Apache-Hudi-0.9.0-on-Amazon-EMR.mdx","source":"@site/blog/2022-04-04-New-features-from-Apache-Hudi-0.9.0-on-Amazon-EMR.mdx","title":"New features from Apache Hudi 0.9.0 on Amazon EMR","description":"Redirecting... please wait!!","date":"2022-04-04T00:00:00.000Z","formattedDate":"April 4, 2022","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Kunal Gautam"},{"name":"Gabriele Cacciola"},{"name":"Udit Mehrotra"}],"prevItem":{"title":"Key Learnings on Using Apache HUDI in building Lakehouse Architecture @ Halodoc","permalink":"/cn/blog/2022/04/04/Key-Learnings-on-Using-Apache-HUDI-in-building-Lakehouse-Architecture-at-Halodoc"},"nextItem":{"title":"Zendesk - Insights for CTOs: Part 3 \u2013 Growing your business with modern data capabilities","permalink":"/cn/blog/2022/03/24/Zendesk-Insights-for-CTOs-Part-3-Growing-your-business-with-modern-data-capabilities"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/new-features-from-apache-hudi-0-9-0-on-amazon-emr/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/03/24/Zendesk-Insights-for-CTOs-Part-3-Growing-your-business-with-modern-data-capabilities","metadata":{"permalink":"/cn/blog/2022/03/24/Zendesk-Insights-for-CTOs-Part-3-Growing-your-business-with-modern-data-capabilities","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-03-24-Zendesk-Insights-for-CTOs-Part-3-Growing-your-business-with-modern-data-capabilities.mdx","source":"@site/blog/2022-03-24-Zendesk-Insights-for-CTOs-Part-3-Growing-your-business-with-modern-data-capabilities.mdx","title":"Zendesk - Insights for CTOs: Part 3 \u2013 Growing your business with modern data capabilities","description":"Redirecting... please wait!!","date":"2022-03-24T00:00:00.000Z","formattedDate":"March 24, 2022","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"modern data-architecture","permalink":"/cn/blog/tags/modern-data-architecture"},{"label":"near real-time analytics","permalink":"/cn/blog/tags/near-real-time-analytics"},{"label":"gdpr deletion","permalink":"/cn/blog/tags/gdpr-deletion"},{"label":"streaming ingestion","permalink":"/cn/blog/tags/streaming-ingestion"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Syed Jaffry"},{"name":"Johnathan Hwang"}],"prevItem":{"title":"New features from Apache Hudi 0.9.0 on Amazon EMR","permalink":"/cn/blog/2022/04/04/New-features-from-Apache-Hudi-0.9.0-on-Amazon-EMR"},"nextItem":{"title":"Build a serverless pipeline to analyze streaming data using AWS Glue, Apache Hudi, and Amazon S3","permalink":"/cn/blog/2022/03/09/Build-a-serverless-pipeline-to-analyze-streaming-data-using-AWS-Glue-Apache-Hudi-and-Amazon-S3"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/architecture/insights-for-ctos-part-3-growing-your-business-with-modern-data-capabilities/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/03/09/Build-a-serverless-pipeline-to-analyze-streaming-data-using-AWS-Glue-Apache-Hudi-and-Amazon-S3","metadata":{"permalink":"/cn/blog/2022/03/09/Build-a-serverless-pipeline-to-analyze-streaming-data-using-AWS-Glue-Apache-Hudi-and-Amazon-S3","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-03-09-Build-a-serverless-pipeline-to-analyze-streaming-data-using-AWS-Glue-Apache-Hudi-and-Amazon-S3.mdx","source":"@site/blog/2022-03-09-Build-a-serverless-pipeline-to-analyze-streaming-data-using-AWS-Glue-Apache-Hudi-and-Amazon-S3.mdx","title":"Build a serverless pipeline to analyze streaming data using AWS Glue, Apache Hudi, and Amazon S3","description":"Redirecting... please wait!!","date":"2022-03-09T00:00:00.000Z","formattedDate":"March 9, 2022","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"streaming ingestion","permalink":"/cn/blog/tags/streaming-ingestion"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Nikhil Khokhar"},{"name":"Dipta Bhattacharya"}],"prevItem":{"title":"Zendesk - Insights for CTOs: Part 3 \u2013 Growing your business with modern data capabilities","permalink":"/cn/blog/2022/03/24/Zendesk-Insights-for-CTOs-Part-3-Growing-your-business-with-modern-data-capabilities"},"nextItem":{"title":"Create a low-latency source-to-data lake pipeline using Amazon MSK Connect, Apache Flink, and Apache Hudi","permalink":"/cn/blog/2022/03/01/Create-a-low-latency-source-to-data-lake-pipeline-using-Amazon-MSK-Connect-Apache-Flink-and-Apache-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/build-a-serverless-pipeline-to-analyze-streaming-data-using-aws-glue-apache-hudi-and-amazon-s3/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/03/01/Create-a-low-latency-source-to-data-lake-pipeline-using-Amazon-MSK-Connect-Apache-Flink-and-Apache-Hudi","metadata":{"permalink":"/cn/blog/2022/03/01/Create-a-low-latency-source-to-data-lake-pipeline-using-Amazon-MSK-Connect-Apache-Flink-and-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-03-01-Create-a-low-latency-source-to-data-lake-pipeline-using-Amazon-MSK-Connect-Apache-Flink-and-Apache-Hudi.mdx","source":"@site/blog/2022-03-01-Create-a-low-latency-source-to-data-lake-pipeline-using-Amazon-MSK-Connect-Apache-Flink-and-Apache-Hudi.mdx","title":"Create a low-latency source-to-data lake pipeline using Amazon MSK Connect, Apache Flink, and Apache Hudi","description":"Redirecting... please wait!!","date":"2022-03-01T00:00:00.000Z","formattedDate":"March 1, 2022","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"streaming ingestion","permalink":"/cn/blog/tags/streaming-ingestion"},{"label":"apache flink","permalink":"/cn/blog/tags/apache-flink"},{"label":"apache kafka","permalink":"/cn/blog/tags/apache-kafka"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Ali Alemi"}],"prevItem":{"title":"Build a serverless pipeline to analyze streaming data using AWS Glue, Apache Hudi, and Amazon S3","permalink":"/cn/blog/2022/03/09/Build-a-serverless-pipeline-to-analyze-streaming-data-using-AWS-Glue-Apache-Hudi-and-Amazon-S3"},"nextItem":{"title":"Understanding its core concepts from hudi persistence files","permalink":"/cn/blog/2022/02/20/Understanding-its-core-concepts-from-hudi-persistence-files"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/create-a-low-latency-source-to-data-lake-pipeline-using-amazon-msk-connect-apache-flink-and-apache-hudi/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/02/20/Understanding-its-core-concepts-from-hudi-persistence-files","metadata":{"permalink":"/cn/blog/2022/02/20/Understanding-its-core-concepts-from-hudi-persistence-files","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-02-20-Understanding-its-core-concepts-from-hudi-persistence-files.mdx","source":"@site/blog/2022-02-20-Understanding-its-core-concepts-from-hudi-persistence-files.mdx","title":"Understanding its core concepts from hudi persistence files","description":"Redirecting... please wait!!","date":"2022-02-20T00:00:00.000Z","formattedDate":"February 20, 2022","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"storage-spec","permalink":"/cn/blog/tags/storage-spec"},{"label":"programmer","permalink":"/cn/blog/tags/programmer"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"QbertsBrother"}],"prevItem":{"title":"Create a low-latency source-to-data lake pipeline using Amazon MSK Connect, Apache Flink, and Apache Hudi","permalink":"/cn/blog/2022/03/01/Create-a-low-latency-source-to-data-lake-pipeline-using-Amazon-MSK-Connect-Apache-Flink-and-Apache-Hudi"},"nextItem":{"title":"Fresher Data Lake on AWS S3","permalink":"/cn/blog/2022/02/17/Fresher-Data-Lake-on-AWS-S3"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://programmer.ink/think/understanding-its-core-concepts-from-hudi-persistence-files.html\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/02/17/Fresher-Data-Lake-on-AWS-S3","metadata":{"permalink":"/cn/blog/2022/02/17/Fresher-Data-Lake-on-AWS-S3","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-02-17-Fresher-Data-Lake-on-AWS-S3.mdx","source":"@site/blog/2022-02-17-Fresher-Data-Lake-on-AWS-S3.mdx","title":"Fresher Data Lake on AWS S3","description":"Redirecting... please wait!!","date":"2022-02-17T00:00:00.000Z","formattedDate":"February 17, 2022","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"robinhood","permalink":"/cn/blog/tags/robinhood"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Balaji Varadarajan"}],"prevItem":{"title":"Understanding its core concepts from hudi persistence files","permalink":"/cn/blog/2022/02/20/Understanding-its-core-concepts-from-hudi-persistence-files"},"nextItem":{"title":"Open Source Data Lake Table Formats: Evaluating Current Interest and Rate of Adoption","permalink":"/cn/blog/2022/02/12/Open-Source-Data-Lake-Table-Formats-Evaluating-Current-Interest-and-Rate-of-Adoption"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://robinhood.engineering/author-balaji-varadarajan-e3f496815ebf\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/02/12/Open-Source-Data-Lake-Table-Formats-Evaluating-Current-Interest-and-Rate-of-Adoption","metadata":{"permalink":"/cn/blog/2022/02/12/Open-Source-Data-Lake-Table-Formats-Evaluating-Current-Interest-and-Rate-of-Adoption","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-02-12-Open-Source-Data-Lake-Table-Formats-Evaluating-Current-Interest-and-Rate-of-Adoption.mdx","source":"@site/blog/2022-02-12-Open-Source-Data-Lake-Table-Formats-Evaluating-Current-Interest-and-Rate-of-Adoption.mdx","title":"Open Source Data Lake Table Formats: Evaluating Current Interest and Rate of Adoption","description":"Redirecting... please wait!!","date":"2022-02-12T00:00:00.000Z","formattedDate":"February 12, 2022","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"datalake","permalink":"/cn/blog/tags/datalake"},{"label":"comparison","permalink":"/cn/blog/tags/comparison"},{"label":"community","permalink":"/cn/blog/tags/community"},{"label":"medium","permalink":"/cn/blog/tags/medium"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Gary Stafford"}],"prevItem":{"title":"Fresher Data Lake on AWS S3","permalink":"/cn/blog/2022/02/17/Fresher-Data-Lake-on-AWS-S3"},"nextItem":{"title":"ACID transformations on Distributed file system","permalink":"/cn/blog/2022/02/09/ACID-transformations-on-Distributed-file-system"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://garystafford.medium.com/data-lake-table-formats-interest-and-adoption-rate-40817b87be9e\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/02/09/ACID-transformations-on-Distributed-file-system","metadata":{"permalink":"/cn/blog/2022/02/09/ACID-transformations-on-Distributed-file-system","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-02-09-ACID-transformations-on-Distributed-file-system.mdx","source":"@site/blog/2022-02-09-ACID-transformations-on-Distributed-file-system.mdx","title":"ACID transformations on Distributed file system","description":"Redirecting... please wait!!","date":"2022-02-09T00:00:00.000Z","formattedDate":"February 9, 2022","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"walmartglobaltech","permalink":"/cn/blog/tags/walmartglobaltech"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Rajasekhar"}],"prevItem":{"title":"Open Source Data Lake Table Formats: Evaluating Current Interest and Rate of Adoption","permalink":"/cn/blog/2022/02/12/Open-Source-Data-Lake-Table-Formats-Evaluating-Current-Interest-and-Rate-of-Adoption"},"nextItem":{"title":"Onehouse brings a fully-managed lakehouse to Apache Hudi","permalink":"/cn/blog/2022/02/03/Onehouse-brings-a-fully-managed-lakehouse-to-Apache-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://medium.com/walmartglobaltech/acid-transformations-on-distributed-file-system-fdec5301c1b1\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/02/03/Onehouse-brings-a-fully-managed-lakehouse-to-Apache-Hudi","metadata":{"permalink":"/cn/blog/2022/02/03/Onehouse-brings-a-fully-managed-lakehouse-to-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-02-03-Onehouse-brings-a-fully-managed-lakehouse-to-Apache-Hudi.mdx","source":"@site/blog/2022-02-03-Onehouse-brings-a-fully-managed-lakehouse-to-Apache-Hudi.mdx","title":"Onehouse brings a fully-managed lakehouse to Apache Hudi","description":"Redirecting... please wait!!","date":"2022-02-03T00:00:00.000Z","formattedDate":"February 3, 2022","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"lakehouse","permalink":"/cn/blog/tags/lakehouse"},{"label":"venturebeat","permalink":"/cn/blog/tags/venturebeat"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Paul Sawers"}],"prevItem":{"title":"ACID transformations on Distributed file system","permalink":"/cn/blog/2022/02/09/ACID-transformations-on-Distributed-file-system"},"nextItem":{"title":"Onehouse Commitment to Openness","permalink":"/cn/blog/2022/02/02/Onehouse-Commitment-to-Openness"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://venturebeat.com/2022/02/03/onehouse-brings-a-fully-managed-lakehouse-to-apache-hudi/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/02/02/Onehouse-Commitment-to-Openness","metadata":{"permalink":"/cn/blog/2022/02/02/Onehouse-Commitment-to-Openness","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-02-02-Onehouse-Commitment-to-Openness.mdx","source":"@site/blog/2022-02-02-Onehouse-Commitment-to-Openness.mdx","title":"Onehouse Commitment to Openness","description":"Redirecting... please wait!!","date":"2022-02-02T00:00:00.000Z","formattedDate":"February 2, 2022","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"community","permalink":"/cn/blog/tags/community"},{"label":"onehouse","permalink":"/cn/blog/tags/onehouse"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Vinoth Chandar"}],"prevItem":{"title":"Onehouse brings a fully-managed lakehouse to Apache Hudi","permalink":"/cn/blog/2022/02/03/Onehouse-brings-a-fully-managed-lakehouse-to-Apache-Hudi"},"nextItem":{"title":"Cost Efficiency @ Scale in Big Data File Format","permalink":"/cn/blog/2022/01/25/Cost-Efficiency-Scale-in-Big-Data-File-Format"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.onehouse.ai/blog/onehouse-commitment-to-openness\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/01/25/Cost-Efficiency-Scale-in-Big-Data-File-Format","metadata":{"permalink":"/cn/blog/2022/01/25/Cost-Efficiency-Scale-in-Big-Data-File-Format","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-01-25-Cost-Efficiency-Scale-in-Big-Data-File-Format.mdx","source":"@site/blog/2022-01-25-Cost-Efficiency-Scale-in-Big-Data-File-Format.mdx","title":"Cost Efficiency @ Scale in Big Data File Format","description":"Redirecting... please wait!!","date":"2022-01-25T00:00:00.000Z","formattedDate":"January 25, 2022","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"cost-efficiency","permalink":"/cn/blog/tags/cost-efficiency"},{"label":"compression","permalink":"/cn/blog/tags/compression"},{"label":"analytics at-scale","permalink":"/cn/blog/tags/analytics-at-scale"},{"label":"uber","permalink":"/cn/blog/tags/uber"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Xinli Shang"},{"name":"Kai Jiang"},{"name":"Zheng Shao"},{"name":"Mohammad Islam"}],"prevItem":{"title":"Onehouse Commitment to Openness","permalink":"/cn/blog/2022/02/02/Onehouse-Commitment-to-Openness"},"nextItem":{"title":"Hudi powering data lake efforts at Walmart and Disney+ Hotstar","permalink":"/cn/blog/2022/01/20/Hudi-powering-data-lake-efforts-at-Walmart-and-Disney-Hotstar"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://eng.uber.com/cost-efficiency-big-data/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/01/20/Hudi-powering-data-lake-efforts-at-Walmart-and-Disney-Hotstar","metadata":{"permalink":"/cn/blog/2022/01/20/Hudi-powering-data-lake-efforts-at-Walmart-and-Disney-Hotstar","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-01-20-Hudi-powering-data-lake-efforts-at-Walmart-and-Disney-Hotstar.mdx","source":"@site/blog/2022-01-20-Hudi-powering-data-lake-efforts-at-Walmart-and-Disney-Hotstar.mdx","title":"Hudi powering data lake efforts at Walmart and Disney+ Hotstar","description":"Redirecting... please wait!!","date":"2022-01-20T00:00:00.000Z","formattedDate":"January 20, 2022","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"techtarget","permalink":"/cn/blog/tags/techtarget"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Sean Michael Kerner"}],"prevItem":{"title":"Cost Efficiency @ Scale in Big Data File Format","permalink":"/cn/blog/2022/01/25/Cost-Efficiency-Scale-in-Big-Data-File-Format"},"nextItem":{"title":"Why and How I Integrated Airbyte and Apache Hudi","permalink":"/cn/blog/2022/01/18/Why-and-How-I-Integrated-Airbyte-and-Apache-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.techtarget.com/searchdatamanagement/feature/Hudi-powering-data-lake-efforts-at-Walmart-and-Disney-Hotstar\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/01/18/Why-and-How-I-Integrated-Airbyte-and-Apache-Hudi","metadata":{"permalink":"/cn/blog/2022/01/18/Why-and-How-I-Integrated-Airbyte-and-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-01-18-Why-and-How-I-Integrated-Airbyte-and-Apache-Hudi.mdx","source":"@site/blog/2022-01-18-Why-and-How-I-Integrated-Airbyte-and-Apache-Hudi.mdx","title":"Why and How I Integrated Airbyte and Apache Hudi","description":"Redirecting... please wait!!","date":"2022-01-18T00:00:00.000Z","formattedDate":"January 18, 2022","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"deltastreamer","permalink":"/cn/blog/tags/deltastreamer"},{"label":"selectfrom","permalink":"/cn/blog/tags/selectfrom"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Harsha Teja Kanna"}],"prevItem":{"title":"Hudi powering data lake efforts at Walmart and Disney+ Hotstar","permalink":"/cn/blog/2022/01/20/Hudi-powering-data-lake-efforts-at-Walmart-and-Disney-Hotstar"},"nextItem":{"title":"Change Data Capture with Debezium and Apache Hudi","permalink":"/cn/blog/2022/01/14/change-data-capture-with-debezium-and-apache-hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://selectfrom.dev/why-and-how-i-integrated-airbyte-and-apache-hudi-c18aff3af21a\\">Redirecting... please wait!! </Redirect>"},{"id":"/2022/01/14/change-data-capture-with-debezium-and-apache-hudi","metadata":{"permalink":"/cn/blog/2022/01/14/change-data-capture-with-debezium-and-apache-hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-01-14-change-data-capture-with-debezium-and-apache-hudi.md","source":"@site/blog/2022-01-14-change-data-capture-with-debezium-and-apache-hudi.md","title":"Change Data Capture with Debezium and Apache Hudi","description":"As of Hudi v0.10.0, we are excited to announce the availability of Debezium sources for Deltastreamer that provide the ingestion of change capture data (CDC) from Postgres and Mysql databases to your data lake. For more details, please refer to the original RFC.","date":"2022-01-14T00:00:00.000Z","formattedDate":"January 14, 2022","tags":[{"label":"design","permalink":"/cn/blog/tags/design"},{"label":"deltastreamer","permalink":"/cn/blog/tags/deltastreamer"},{"label":"cdc","permalink":"/cn/blog/tags/cdc"},{"label":"change-data-capture","permalink":"/cn/blog/tags/change-data-capture"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":7.28,"truncated":true,"authors":[{"name":"Rajesh Mahindra"}],"prevItem":{"title":"Why and How I Integrated Airbyte and Apache Hudi","permalink":"/cn/blog/2022/01/18/Why-and-How-I-Integrated-Airbyte-and-Apache-Hudi"},"nextItem":{"title":"Apache Hudi - 2021 a Year in Review","permalink":"/cn/blog/2022/01/06/apache-hudi-2021-a-year-in-review"}},"content":"As of Hudi v0.10.0, we are excited to announce the availability of [Debezium](https://debezium.io/) sources for [Deltastreamer](https://hudi.apache.org/docs/hoodie_deltastreamer) that provide the ingestion of change capture data (CDC) from Postgres and Mysql databases to your data lake. For more details, please refer to the original [RFC](https://github.com/apache/hudi/blob/master/rfc/rfc-39/rfc-39.md).\\n\\n\x3c!--truncate--\x3e\\n\\n## Background\\n<img src=\\"/assets/images/blog/data-network.png\\" alt=\\"drawing\\" width=\\"600\\"/>\\n\\nWhen you want to perform analytics on data from transactional databases like Postgres or Mysql you typically need to bring this data into an OLAP system such as a data warehouse or a data lake through a process called [Change Data Capture](https://debezium.io/documentation/faq/#what_is_change_data_capture) (CDC). Debezium is a popular tool that makes CDC easy. It provides a way to capture row-level changes in your databases by [reading changelogs](https://debezium.io/blog/2018/07/19/advantages-of-log-based-change-data-capture/). By doing so, Debezium avoids increased CPU load on your database and ensures you capture all changes including deletes.\\n\\nNow that [Apache Hudi](https://hudi.apache.org/docs/overview/) offers a Debezium source connector, CDC ingestion into a data lake is easier than ever with some [unique differentiated capabilities](https://hudi.apache.org/docs/use_cases). Hudi enables efficient update, merge, and delete transactions on a data lake. Hudi uniquely provides [Merge-On-Read](https://hudi.apache.org/docs/table_types#merge-on-read-table) writers which unlock [significantly lower latency](https://aws.amazon.com/blogs/big-data/how-amazon-transportation-service-enabled-near-real-time-event-analytics-at-petabyte-scale-using-aws-glue-with-apache-hudi/) ingestion than typical data lake writers with Spark or Flink. Last but not least, Apache Hudi offers [incremental queries](https://hudi.apache.org/docs/querying_data#spark-incr-query) so after capturing changes from your database, you can incrementally process these changes downstream throughout all of your subsequent ETL pipelines.\\n\\n## Design Overview\\n<img src=\\"/assets/images/blog/debezium.png\\" alt=\\"drawing\\" width=\\"600\\"/>\\n\\nThe architecture for an end-to-end CDC ingestion flow with Apache Hudi is shown above. The first component is the Debezium deployment, which consists of a Kafka cluster, schema registry (Confluent or Apicurio), and the Debezium connector. The Debezium connector continuously polls the changelogs from the database and writes an AVRO message with the changes for each database row to a dedicated Kafka topic per table.\\n\\nThe second component is [Hudi Deltastreamer](https://hudi.apache.org/docs/hoodie_deltastreamer) that reads and processes the incoming Debezium records from Kafka for each table and writes (updates) the corresponding rows in a Hudi table on your cloud storage.\\n\\nTo ingest the data from the database table into a Hudi table in near real-time, we implement two classes that can be plugged into the Deltastreamer. Firstly, we implemented a [Debezium source](https://github.com/apache/hudi/blob/83f8ed2ae3ba7fb20813cbb8768deae6244b020c/hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/debezium/DebeziumSource.java). With Deltastreamer running in continuous mode, the source continuously reads and processes the Debezium change records in Avro format from the Kafka topic for a given table, and writes the updated record to the destination Hudi table. In addition to the columns from the database table, we also ingest some meta fields that are added by Debezium in the target Hudi table. The meta fields help us correctly merge updates and delete records. The records are read using the latest schema from the [Schema Registry](https://hudi.apache.org/docs/hoodie_deltastreamer#schema-providers).\\n\\nSecondly, we implement a custom [Debezium Payload](https://github.com/apache/hudi/blob/83f8ed2ae3ba7fb20813cbb8768deae6244b020c/hudi-common/src/main/java/org/apache/hudi/common/model/debezium/AbstractDebeziumAvroPayload.java) that essentially governs how Hudi records are merged when the same row is updated or deleted. When a new Hudi record is received for an existing row, the payload picks the latest record using the higher value of the appropriate column (FILEID and POS fields in MySql and LSN fields in Postgres). In the case that the latter event is a delete record, the payload implementation ensures that the record is hard deleted from the storage. Delete records are identified using the op field, which has a value of **d** for deletes.\\n\\n## Apache Hudi Configurations\\n\\nIt is important to consider the following configurations of your Hudi deployments when using the Debezium source connector for CDC ingestion.\\n\\n1.  **Record Keys -** The Hudi [record key(s)](https://hudi.apache.org/docs/next/indexing) for a table should be set as the Primary keys of the table in the upstream database. This ensures that updates are applied correctly as record key(s) uniquely identify a row in the Hudi table.\\n2.  **Source Ordering Fields** -\xa0 For de-duplication of changelog records the source ordering field should be set to the actual position of the change event as it happened on the database. For instance, we use the FILEID and POS fields in MySql and LSN fields in Postgres databases respectively to ensure records are processed in the correct order of occurrence in the original database.\\n3.  **Partition Fields** - Don\u2019t feel restricted to matching the partitioning of your Hudi tables with the same partition fields as the upstream database. You can set partition fields independently for the Hudi table as needed.\\n\\n### Bootstrapping Existing tables\\n\\nOne important use case might be when CDC ingestion has to be done for existing database tables. There are two ways we can ingest existing database data prior to streaming the changes:\\n\\n1.  By default on initialization, Debezium performs an initial consistent snapshot of the database (controlled by config snapshot.mode). After the initial snapshot, it continues streaming updates from the correct position to avoid loss of data.\\n2.  While the first approach is simple, for large tables it may take a long time for Debezium to bootstrap the initial snapshot. Alternatively, we could run a Deltastreamer job to bootstrap the table directly from the database using the [JDBC source](https://github.com/apache/hudi/blob/master/hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/JdbcSource.java). This provides more flexibility to the users in defining and executing more optimized SQL queries required to bootstrap the database table. Once the bootstrap job finishes successfully, another Deltastreamer job is executed that processes the database changelogs from Debezium. Users will have to use [checkpointing](https://hudi.apache.org/docs/hoodie_deltastreamer/#checkpointing) in Deltastreamer to ensure the second job starts processing the changelogs from the correct position to avoid data loss.\\n\\n### Example Implementation\\n\\nThe following describes steps to implement an end-to-end CDC pipeline using an AWS RDS instance of Postgres, Kubernetes-based Debezium deployment, and Hudi Deltastreamer running on a spark cluster.\\n\\n### Database\\n\\nA few configuration changes are required for the RDS instance to enable logical replication.\\n\\n```roomsql\\nSET rds.logical_replication to 1 (instead of 0)\\n\\npsql --host=<aws_rds_instance> --port=5432 --username=postgres --password -d <database_name>;\\n\\nCREATE PUBLICATION <publication_name> FOR TABLE schema1.table1, schema1.table2;\\n\\nALTER TABLE schema1.table1 REPLICA IDENTITY FULL;\\n```\\n\\n\\n### Debezium Connector\\n\\n[Strimzi](https://strimzi.io/blog/2020/01/27/deploying-debezium-with-kafkaconnector-resource/) is the recommended option to deploy and manage Kafka connectors on Kubernetes clusters. Alternatively, you have the option to use the Confluent managed [Debezium connector](https://docs.confluent.io/debezium-connect-postgres-source/current/overview.html).\\n\\n```\\nkubectl create namespace kafka\\nkubectl create -f https://strimzi.io/install/latest?namespace=kafka -n kafka\\nkubectl -n kafka apply -f kafka-connector.yaml\\n```\\n\\nAn example for kafka-connector.yaml is shown below:\\n```yaml\\napiVersion: kafka.strimzi.io/v1beta2\\nkind: KafkaConnect\\nmetadata:\\nname: debezium-kafka-connect\\nannotations:\\nstrimzi.io/use-connector-resources: \\"false\\"\\nspec:\\nimage: debezium-kafka-connect:latest\\nreplicas: 1\\nbootstrapServers: localhost:9092\\nconfig:\\nconfig.storage.replication.factor: 1\\noffset.storage.replication.factor: 1\\nstatus.storage.replication.factor: 1\\n```\\n\\nThe docker image debezium-kafka-connect can be built using the following Dockerfile that includes the Postgres Debezium Connector.\\n\\n```yaml\\nFROM confluentinc/cp-kafka-connect:6.2.0 as cp\\nRUN confluent-hub install --no-prompt confluentinc/kafka-connect-avro-converter:6.2.0\\nFROM strimzi/kafka:0.18.0-kafka-2.5.0\\nUSER root:root\\nRUN yum -y update\\nRUN yum -y install git\\nRUN yum -y install wget\\n\\nRUN wget https://repo1.maven.org/maven2/io/debezium/debezium-connector-postgres/1.6.1.Final/debezium-connector-postgres-1.6.1.Final-plugin.tar.gz\\nRUN tar xzf debezium-connector-postgres-1.6.1.Final-plugin.tar.gz\\n\\nRUN mkdir -p /opt/kafka/plugins/debezium && mkdir -p /opt/kafka/plugins/avro/\\nRUN mv debezium-connector-postgres /opt/kafka/plugins/debezium/\\nCOPY --from=cp /usr/share/confluent-hub-components/confluentinc-kafka-connect-avro-converter/lib /opt/kafka/plugins/avro/\\nUSER 1001\\n```\\n\\nOnce the Strimzi operator and the Kafka connect are deployed, we can start the Debezium connector.\\n\\n```\\ncurl -X POST -H \\"Content-Type:application/json\\" -d @connect-source.json http://localhost:8083/connectors/\\n```\\n\\nThe following is an example of a configuration to setup Debezium connector for generating the changelogs for two tables, table1, and table2.\\n\\nContents of connect-source.json:\\n```json\\n{\\n  \\"name\\": \\"postgres-debezium-connector\\",\\n  \\"config\\": {\\n    \\"connector.class\\": \\"io.debezium.connector.postgresql.PostgresConnector\\",\\n    \\"database.hostname\\": \\"localhost\\",\\n    \\"database.port\\": \\"5432\\",\\n    \\"database.user\\": \\"postgres\\",\\n    \\"database.password\\": \\"postgres\\",\\n    \\"database.dbname\\": \\"database\\",\\n    \\"plugin.name\\": \\"pgoutput\\",\\n    \\"database.server.name\\": \\"postgres\\",\\n    \\"table.include.list\\": \\"schema1.table1,schema1.table2\\",\\n    \\"publication.autocreate.mode\\": \\"filtered\\",\\n    \\"tombstones.on.delete\\":\\"false\\",\\n    \\"key.converter\\": \\"io.confluent.connect.avro.AvroConverter\\",\\n    \\"key.converter.schema.registry.url\\": \\"<schema_registry_host>\\",\\n    \\"value.converter\\": \\"io.confluent.connect.avro.AvroConverter\\",\\n    \\"value.converter.schema.registry.url\\": \\"<schema_registry_host>\\",\\n    \\"slot.name\\": \\"pgslot\\"\\n  }\\n}\\n```\\n\\n### Hudi Deltastreamer\\n\\nNext, we run the Hudi Deltastreamer using spark that will ingest the Debezium changelogs from kafka and write them as a Hudi table. One such instance of the command is shown below that works for Postgres database.\xa0 A few key configurations are as follows:\\n\\n1.  Set the source class to PostgresDebeziumSource.\\n2.  Set the payload class to PostgresDebeziumAvroPayload.\\n3.  Configure the schema registry URLs for Debezium Source and Kafka Source.\\n4.  Set the record key(s) as the primary key(s) of the database table.\\n5.  Set the source ordering field (dedup) to _event_lsn\\n\\n```scala\\nspark-submit \\\\\\\\\\n  --jars \\"/home/hadoop/hudi-utilities-bundle_2.12-0.10.0.jar,/usr/lib/spark/external/lib/spark-avro.jar\\" \\\\\\\\\\n  --master yarn --deploy-mode client \\\\\\\\\\n  --class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer /home/hadoop/hudi-packages/hudi-utilities-bundle_2.12-0.10.0-SNAPSHOT.jar \\\\\\\\\\n  --table-type COPY_ON_WRITE --op UPSERT \\\\\\\\\\n  --target-base-path s3://bucket_name/path/for/hudi_table1 \\\\\\\\\\n  --target-table hudi_table1\xa0 --continuous \\\\\\\\\\n  --min-sync-interval-seconds 60 \\\\\\\\\\n  --source-class org.apache.hudi.utilities.sources.debezium.PostgresDebeziumSource \\\\\\\\\\n  --source-ordering-field _event_lsn \\\\\\\\\\n  --payload-class org.apache.hudi.common.model.debezium.PostgresDebeziumAvroPayload \\\\\\\\\\n  --hoodie-conf schema.registry.url=https://localhost:8081 \\\\\\\\\\n  --hoodie-conf hoodie.deltastreamer.schemaprovider.registry.url=https://localhost:8081/subjects/postgres.schema1.table1-value/versions/latest \\\\\\\\\\n  --hoodie-conf hoodie.deltastreamer.source.kafka.value.deserializer.class=io.confluent.kafka.serializers.KafkaAvroDeserializer \\\\\\\\\\n  --hoodie-conf hoodie.deltastreamer.source.kafka.topic=postgres.schema1.table1 \\\\\\\\\\n  --hoodie-conf auto.offset.reset=earliest \\\\\\\\\\n  --hoodie-conf hoodie.datasource.write.recordkey.field=\u201ddatabase_primary_key\u201d \\\\\\\\\\n  --hoodie-conf hoodie.datasource.write.partitionpath.field=partition_key \\\\\\\\\\n  --enable-hive-sync \\\\\\\\\\n  --hoodie-conf hoodie.datasource.hive_sync.partition_extractor_class=org.apache.hudi.hive.MultiPartKeysValueExtractor \\\\\\\\\\n  --hoodie-conf hoodie.datasource.write.hive_style_partitioning=true \\\\\\\\\\n  --hoodie-conf hoodie.datasource.hive_sync.database=default \\\\\\\\\\n  --hoodie-conf hoodie.datasource.hive_sync.table=hudi_table1 \\\\\\\\\\n  --hoodie-conf hoodie.datasource.hive_sync.partition_fields=partition_key\\n```\\n\\n## Conclusion\\n\\nThis post introduced the Debezium Source for Hudi Deltastreamer to ingest Debezium changelogs into Hudi tables. Database data can now be ingested into data lakes to provide a cost-effective way to store and analyze database data.\\n\\nPlease follow this [JIRA](https://issues.apache.org/jira/browse/HUDI-1290) to learn more about active development on this new feature. I look forward to more contributions and feedback from the community. Come join our [Hudi Slack](https://join.slack.com/t/apache-hudi/shared_invite/zt-1e94d3xro-JvlNO1kSeIHJBTVfLPlI5w) channel or attend one of our [community events](https://hudi.apache.org/community/syncs) to learn more."},{"id":"/2022/01/06/apache-hudi-2021-a-year-in-review","metadata":{"permalink":"/cn/blog/2022/01/06/apache-hudi-2021-a-year-in-review","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2022-01-06-apache-hudi-2021-a-year-in-review.md","source":"@site/blog/2022-01-06-apache-hudi-2021-a-year-in-review.md","title":"Apache Hudi - 2021 a Year in Review","description":"As the year came to end, I took some time to reflect on where we are and what we accomplished in 2021. I am humbled by how strong our community is and how regardless of it being another tough pandemic year, that people from around the globe leaned in together and made this the best year yet for Apache Hudi. In this blog I want to recap some of the 2021 highlights.","date":"2022-01-06T00:00:00.000Z","formattedDate":"January 6, 2022","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"community","permalink":"/cn/blog/tags/community"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":3.09,"truncated":true,"authors":[{"name":"vinoth"}],"prevItem":{"title":"Change Data Capture with Debezium and Apache Hudi","permalink":"/cn/blog/2022/01/14/change-data-capture-with-debezium-and-apache-hudi"},"nextItem":{"title":"The Art of Building Open Data Lakes with Apache Hudi, Kafka, Hive, and Debezium","permalink":"/cn/blog/2021/12/31/The-Art-of-Building-Open-Data-Lakes-with-Apache-Hudi-Kafka-Hive-and-Debezium"}},"content":"As the year came to end, I took some time to reflect on where we are and what we accomplished in 2021. I am humbled by how strong our community is and how regardless of it being another tough pandemic year, that people from around the globe leaned in together and made this the best year yet for Apache Hudi. In this blog I want to recap some of the 2021 highlights.\\n\\n\x3c!--truncate--\x3e\\n<img src=\\"/assets/images/Hudi_community.png\\" alt=\\"drawing\\" width=\\"600\\"/>\\n\\n**_Community_**\\n\\nI want to call out how amazing it is to see such a diverse group of people step up and contribute to this project. There were over 30,000 interactions with the [project on github](https://github.com/apache/hudi/), up 2x from last year. Over the last year 300 people have contributed to the project, with over 3,000 PRs over 5 releases. We moved Apache Hudi from release 0.5.X all the way to our feature packed 0.10.0 release. Come and join us on our [active slack channel](https://join.slack.com/t/apache-hudi/shared_invite/zt-1e94d3xro-JvlNO1kSeIHJBTVfLPlI5w)! Over 850 community members engaged on our slack, up about 100% from the year before. I want to add a special shout out to our top slack participants who have helped answer so many questions and drive rich discussions on our channel. Sivabalan Narayanan, Nishith Agarwal, Bhavani Sudha Saktheeswaran, Vinay Patil, Rubens Soto, Dave Hagman, Raghav Tandon, Sagar Sumit, Joyan Sil, Jake D, Felix Jose, Nick Vintila, KimL, Andrew Sukhan, Danny Chan, Biswajit Mohapatra, and Pratyaksh Sharma! I know I am missing plenty of other important callouts, every PR that landed this year has helped shape Hudi into what it is today. Thank you!\\n\\n<img src=\\"/assets/images/powers/logo-wall.png\\" alt=\\"drawing\\" width=\\"600\\"/>\\n\\n**_Impact_**\\n\\nIn 2021, I personally developed a deeper gratitude and understanding of the magnitude of the impact we are making in the industry. Throughout the year I met more and more people that told me about how Hudi transformed their business and I was impressed by the large variety of use cases and applications that Hudi was able to serve. Some from the community who publicly shared their story include: [Amazon](https://aws.amazon.com/blogs/big-data/how-amazon-transportation-service-enabled-near-real-time-event-analytics-at-petabyte-scale-using-aws-glue-with-apache-hudi/), [GE](https://aws.amazon.com/blogs/big-data/how-ge-aviation-built-cloud-native-data-pipelines-at-enterprise-scale-using-the-aws-platform/), [Robinhood](https://s.apache.org/hudi-robinhood-talk), [ByteDance](http://hudi.apache.org/blog/2021/09/01/building-eb-level-data-lake-using-hudi-at-bytedance), [Halodoc](https://blogs.halodoc.io/data-platform-2-0-part-1/), [Baixin Bank](https://developpaper.com/baixin-banks-real-time-data-lake-evolution-scheme-based-on-apache-hudi/), [BiliBili](https://developpaper.com/practice-of-apache-hudi-in-building-real-time-data-lake-at-station-b/), and so many more that haven\u2019t even shared yet. One particular highlight from 2021 was attending [AWS Re:Invent](https://youtu.be/lGm8qe4tBrg?t=2115) and meeting an overwhelmingly large number of users who expressed joy with using Apache Hudi. This raises my sense of responsibility even more to be aware of just how many people depend on Apache Hudi.\\n\\n**_New Features_**\\n\\nApache Hudi has come a long way in 2021 from v0.5.X to 0.10.0. Throughout this year we have developed innovative and leading edge features that make it easier and easier to build streaming data lakes. Some of these features include [Spark SQL DML Support](https://hudi.apache.org/docs/table_management), [Clustering](https://hudi.apache.org/docs/clustering), [Z-Order/Hilbert curves](https://hudi.apache.org/blog/2021/12/29/hudi-zorder-and-hilbert-space-filling-curves), [Metadata Table file listing elimination](https://hudi.apache.org/docs/metadata), [Timeline Server Markers](https://hudi.apache.org/docs/markers), [Precommit Validators](https://hudi.apache.org/docs/precommit_validator), [Flink MOR write/read](https://hudi.apache.org/docs/writing_data#flink-sql-writer), [Parallel Write support with OCC](https://hudi.apache.org/docs/concurrency_control), [Clustering](https://hudi.apache.org/docs/clustering), [Incremental Queries for MOR](https://hudi.apache.org/docs/querying_data#spark-incr-query), [Kafka Connect Sink](https://github.com/apache/hudi/tree/master/hudi-kafka-connect), Delta Streamer sources for [S3](https://hudi.apache.org/docs/hoodie_deltastreamer/#s3-events) and [Debezium](https://hudi.apache.org/releases/release-0.10.0/#debezium-deltastreamer-sources), [DBT Support](https://hudi.apache.org/releases/release-0.10.0/#dbt-support) all of which are were added in 2021. To top it all, we put together [a manifesto](https://hudi.apache.org/blog/2021/07/21/streaming-data-lake-platform) to realize our vision for streaming data lakes.\\n\\n**_The Road Ahead_**\\n\\n2021 may have been our best year so far, but it still feels like we are just getting started when we look at our new year\'s resolutions for 2022. In the year ahead we have bold plans to realize the first cut of our entire vision and take Hudi 1.0, that includes full-featured multi-modal indexing for faster writes/queries, pathbreaking lock free concurrency, new server components for caching/metadata and finally Flink based incremental materialized views! \xa0_You can find our_ [_detailed roadmap here_](https://hudi.apache.org/roadmap)_._\\n\\nI look forward to continued collaboration with the growing Hudi community! Come join our [_community events_](https://hudi.apache.org/community/syncs) _and discussions in our_ [_slack channel_](https://join.slack.com/t/apache-hudi/shared_invite/zt-1e94d3xro-JvlNO1kSeIHJBTVfLPlI5w)_! Happy new year 2022!_"},{"id":"/2021/12/31/The-Art-of-Building-Open-Data-Lakes-with-Apache-Hudi-Kafka-Hive-and-Debezium","metadata":{"permalink":"/cn/blog/2021/12/31/The-Art-of-Building-Open-Data-Lakes-with-Apache-Hudi-Kafka-Hive-and-Debezium","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-12-31-The-Art-of-Building-Open-Data-Lakes-with-Apache-Hudi-Kafka-Hive-and-Debezium.mdx","source":"@site/blog/2021-12-31-The-Art-of-Building-Open-Data-Lakes-with-Apache-Hudi-Kafka-Hive-and-Debezium.mdx","title":"The Art of Building Open Data Lakes with Apache Hudi, Kafka, Hive, and Debezium","description":"Redirecting... please wait!!","date":"2021-12-31T00:00:00.000Z","formattedDate":"December 31, 2021","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"datalake","permalink":"/cn/blog/tags/datalake"},{"label":"medium","permalink":"/cn/blog/tags/medium"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Gary Stafford"}],"prevItem":{"title":"Apache Hudi - 2021 a Year in Review","permalink":"/cn/blog/2022/01/06/apache-hudi-2021-a-year-in-review"},"nextItem":{"title":"Hudi Z-Order and Hilbert Space Filling Curves","permalink":"/cn/blog/2021/12/29/hudi-zorder-and-hilbert-space-filling-curves"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://garystafford.medium.com/the-art-of-building-open-data-lakes-with-apache-hudi-kafka-hive-and-debezium-3d2f71c5981f\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/12/29/hudi-zorder-and-hilbert-space-filling-curves","metadata":{"permalink":"/cn/blog/2021/12/29/hudi-zorder-and-hilbert-space-filling-curves","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-12-29-hudi-zorder-and-hilbert-space-filling-curves.md","source":"@site/blog/2021-12-29-hudi-zorder-and-hilbert-space-filling-curves.md","title":"Hudi Z-Order and Hilbert Space Filling Curves","description":"As of Hudi v0.10.0, we are excited to introduce support for an advanced Data Layout Optimization technique known in the database realm as Z-order and Hilbert space filling curves.","date":"2021-12-29T00:00:00.000Z","formattedDate":"December 29, 2021","tags":[{"label":"design","permalink":"/cn/blog/tags/design"},{"label":"clustering","permalink":"/cn/blog/tags/clustering"},{"label":"data skipping","permalink":"/cn/blog/tags/data-skipping"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":8.5,"truncated":true,"authors":[{"name":"Alexey Kudinkin and Tao Meng"}],"prevItem":{"title":"The Art of Building Open Data Lakes with Apache Hudi, Kafka, Hive, and Debezium","permalink":"/cn/blog/2021/12/31/The-Art-of-Building-Open-Data-Lakes-with-Apache-Hudi-Kafka-Hive-and-Debezium"},"nextItem":{"title":"New features from Apache Hudi 0.7.0 and 0.8.0 available on Amazon EMR","permalink":"/cn/blog/2021/12/20/New-features-from-Apache-Hudi-0.7.0-and-0.8.0-available-on-Amazon-EMR"}},"content":"As of Hudi v0.10.0, we are excited to introduce support for an advanced Data Layout Optimization technique known in the database realm as [Z-order](https://en.wikipedia.org/wiki/Z-order_curve) and [Hilbert](https://en.wikipedia.org/wiki/Hilbert_curve) space filling curves.\\n\\n\x3c!--truncate--\x3e\\n\\n### Background\\n\\nAmazon EMR team recently published a [great article](https://aws.amazon.com/blogs/big-data/new-features-from-apache-hudi-0-7-0-and-0-8-0-available-on-amazon-emr/) show-casing how [clustering](https://hudi.apache.org/docs/clustering) your data can improve your _query performance_.\\n\\nTo better understand what\'s going on and how it\'s related to space-filling curves, let\'s zoom in to the setup in that article:\\n\\nIn the article, 2 [Apache Hudi](https://hudi.apache.org/docs/overview) tables are compared (both ingested from the well-known [Amazon Reviews](https://s3.amazonaws.com/amazon-reviews-pds/tsv/index.txt) dataset):\\n\\n*   `amazon_reviews` table which is not clustered (ie the data has not been re-ordered by any particular key)\\n*   `amazon_reviews_clustered` table which is clustered. When data is clustered by Apache Hudi the data is [**lexicographically ordered**](https://en.wikipedia.org/wiki/Lexicographic_order) (hereon we will be referring to this kind of ordering as **_linear ordering_**) by 2 columns: `star_rating`, `total_votes` (see screenshot below)\\n\\n<img src=\\"/assets/images/hudiconfigz.png\\" alt=\\"drawing\\" width=\\"800\\"/>\\n\\n_Screenshot of the Hudi configuration (from Amazon EMR team article)_\\n\\nTo showcase the improvement in querying performance, the following queries are executed against both of these tables:\\n\\n<img src=\\"/assets/images/table1.png\\" alt=\\"drawing\\" width=\\"800\\"/>\\n<img src=\\"/assets/images/table2.png\\" alt=\\"drawing\\" width=\\"800\\"/>\\n\\n_Screenshots of the queries run against the previously setup tables (from Amazon EMR team article)_\\n\\nThe important consideration to point out here is that the queries were specifying **both of the columns** latter table is ordered by (both `star_rating` and `total_votes`).\\n\\nAnd this is unfortunately a crucial limitation of the linear/lexicographic ordering, the value of the ordering diminishes very quickly as you add more columns. It\'s not hard to see why:\\n\\n<img src=\\"/assets/images/lexicographicorder.png\\" alt=\\"drawing\\" width=\\"250\\"/>\\n\\n_Courtesy of Wikipedia,_ [_Lexicographic Order article_](https://en.wikipedia.org/wiki/Lexicographic_order)\\n\\nFrom this image you can see that with lexicographically ordered 3-tuples of integers, only the first column is able to feature crucial property of **locality** for all of the records having the same value: for ex, all of the records wit values starting with \\"1\\", \\"2\\", \\"3\\" (in the first columns) are nicely clumped together. However if you try to find all the values that have \\"5\\" as the value in their third column you\'d see that those are now dispersed all over the place, not being localized at all.\\n\\nThe crucial property that improves query performance is locality: it enables queries to substantially reduce the search space and the number of files that need to be scanned, parsed, etc.\\n\\nBut... does this mean that our queries are doomed to do a full-scan if we\'re filtering by anything other than the first (or more accurate would be to say prefix) of the list of columns the table is ordered by?\\n\\nNot exactly: luckily, locality is also a property that space-filling curves enable while enumerating multi-dimensional spaces (records in our table could be represented as points in N-dimensional space, where N is the number of columns in our table)\\n\\nHow does it work?\\n\\nLet\'s take Z-curve as an example: Z-order curves fitting a 2-dimensional plane would look like the following:\\n\\n<img src=\\"/assets/images/zordercurve.png\\" alt=\\"drawing\\" width=\\"400\\"/>\\n\\n_Courtesy of Wikipedia,_ [_Z-order curve article_](https://en.wikipedia.org/wiki/Z-order_curve)\\n\\nAs you can see following its path, instead of simply ordering by one coordinate (\\"x\\") first, following with the other, it\'s actually ordering them as if the bits of those coordinates have been _interwoven_ into a single value:\\n\\n| Coordinate | X (binary) | Y (binary) | Z-values (ordered) |\\n| ---| ---| ---| --- |\\n| (0, 0) | 000 | 000 | 000000 |\\n| (1, 0) | 001 | 000 | 000001 |\\n| (0, 1) | 000 | 001 | 000010 |\\n| (1, 1) | 001 | 001 | 000011 |\\n\\nThis allows for that crucial property of locality (even though a slightly \\"stretched\\" one) to be carried over to all columns as compared to just the first one in case of linear ordering.\\n\\nIn a similar fashion, Hilbert curves also allow you to map points in a N-dimensional space (rows in our table) onto 1-dimensional curve, essentially _ordering_ them, while still preserving the crucial property of locality. Read more details about Hilbert Curves [here](https://drum.lib.umd.edu/handle/1903/804). Our personal experiments so far show that ordering data along a Hilbert curve leads to better clustering and performance outcomes.\\n\\nNow, let\'s check it out in action!\\n\\n### Setup\\nWe will use the [Amazon Reviews](https://s3.amazonaws.com/amazon-reviews-pds/readme.html) dataset again, but this time we will use Hudi to Z-Order by `product_id`, `customer_id` columns tuple instead of Clustering or _linear ordering_.\\n\\nNo special preparations are required for the dataset, you can simply download it from [S3](https://s3.amazonaws.com/amazon-reviews-pds/readme.html) in Parquet format and use it directly as an input for Spark ingesting it into Hudi table.\\n\\nLaunch Spark Shell\\n\\n```\\n./bin/spark-shell --master \'local[4]\' --driver-memory 8G --executor-memory 8G \\\\\\n  --jars ../../packaging/hudi-spark-bundle/target/hudi-spark3-bundle_2.12-0.10.0.jar \\\\\\n  --packages org.apache.spark:spark-avro_2.12:2.4.4 \\\\\\n  --conf \'spark.serializer=org.apache.spark.serializer.KryoSerializer\'\\n```\\n\\nPaste\\n```scala\\nimport org.apache.hadoop.fs.{FileStatus, Path}\\nimport scala.collection.JavaConversions._\\nimport org.apache.spark.sql.SaveMode._\\nimport org.apache.hudi.{DataSourceReadOptions, DataSourceWriteOptions}\\nimport org.apache.hudi.DataSourceWriteOptions._\\nimport org.apache.hudi.common.fs.FSUtils\\nimport org.apache.hudi.common.table.HoodieTableMetaClient\\nimport org.apache.hudi.common.util.ClusteringUtils\\nimport org.apache.hudi.config.HoodieClusteringConfig\\nimport org.apache.hudi.config.HoodieWriteConfig._\\nimport org.apache.spark.sql.DataFrame\\n\\nimport java.util.stream.Collectors\\n\\nval layoutOptStrategy = \\"z-order\\"; // OR \\"hilbert\\"\\n\\nval inputPath = s\\"file:///${System.getProperty(\\"user.home\\")}/datasets/amazon_reviews_parquet\\"\\nval tableName = s\\"amazon_reviews_${layoutOptStrategy}\\"\\nval outputPath = s\\"file:///tmp/hudi/$tableName\\"\\n\\n\\ndef safeTableName(s: String) = s.replace(\'-\', \'_\')\\n\\nval commonOpts =\\n  Map(\\n    \\"hoodie.compact.inline\\" -> \\"false\\",\\n    \\"hoodie.bulk_insert.shuffle.parallelism\\" -> \\"10\\"\\n  )\\n\\n\\n////////////////////////////////////////////////////////////////\\n// Writing to Hudi\\n////////////////////////////////////////////////////////////////\\n\\nval df = spark.read.parquet(inputPath)\\n\\ndf.write.format(\\"hudi\\")\\n  .option(DataSourceWriteOptions.TABLE_TYPE.key(), COW_TABLE_TYPE_OPT_VAL)\\n  .option(\\"hoodie.table.name\\", tableName)\\n  .option(PRECOMBINE_FIELD.key(), \\"review_id\\")\\n  .option(RECORDKEY_FIELD.key(), \\"review_id\\")\\n  .option(DataSourceWriteOptions.PARTITIONPATH_FIELD.key(), \\"product_category\\")\\n  .option(\\"hoodie.clustering.inline\\", \\"true\\")\\n  .option(\\"hoodie.clustering.inline.max.commits\\", \\"1\\")\\n  // NOTE: Small file limit is intentionally kept _ABOVE_ target file-size max threshold for Clustering,\\n  // to force re-clustering\\n  .option(\\"hoodie.clustering.plan.strategy.small.file.limit\\", String.valueOf(1024 * 1024 * 1024)) // 1Gb\\n  .option(\\"hoodie.clustering.plan.strategy.target.file.max.bytes\\", String.valueOf(128 * 1024 * 1024)) // 128Mb\\n  // NOTE: We\'re increasing cap on number of file-groups produced as part of the Clustering run to be able to accommodate for the \\n  // whole dataset (~33Gb)\\n  .option(\\"hoodie.clustering.plan.strategy.max.num.groups\\", String.valueOf(4096))\\n  .option(HoodieClusteringConfig.LAYOUT_OPTIMIZE_ENABLE.key, \\"true\\")\\n  .option(HoodieClusteringConfig.LAYOUT_OPTIMIZE_STRATEGY.key, layoutOptStrategy)\\n  .option(HoodieClusteringConfig.PLAN_STRATEGY_SORT_COLUMNS.key, \\"product_id,customer_id\\")\\n  .option(DataSourceWriteOptions.OPERATION.key(), DataSourceWriteOptions.BULK_INSERT_OPERATION_OPT_VAL)\\n  .option(BULK_INSERT_SORT_MODE.key(), \\"NONE\\")\\n  .options(commonOpts)\\n  .mode(ErrorIfExists)\\n  \\n```\\n\\n\\n\\n### Testing\\nPlease keep in mind, that each individual test is run in a separate spark-shell to avoid caching getting in the way of our measurements.\\n\\n```scala\\n////////////////////////////////////////////////////////////////\\n// Reading\\n///////////////////////////////////////////////////////////////\\n\\n// Temp Table w/ Data Skipping DISABLED\\nval readDf: DataFrame =\\n  spark.read.option(DataSourceReadOptions.ENABLE_DATA_SKIPPING.key(), \\"false\\").format(\\"hudi\\").load(outputPath)\\n\\nval rawSnapshotTableName = safeTableName(s\\"${tableName}_sql_snapshot\\")\\n\\nreadDf.createOrReplaceTempView(rawSnapshotTableName)\\n\\n\\n// Temp Table w/ Data Skipping ENABLED\\nval readDfSkip: DataFrame =\\n  spark.read.option(DataSourceReadOptions.ENABLE_DATA_SKIPPING.key(), \\"true\\").format(\\"hudi\\").load(outputPath)\\n\\nval dataSkippingSnapshotTableName = safeTableName(s\\"${tableName}_sql_snapshot_skipping\\")\\n\\nreadDfSkip.createOrReplaceTempView(dataSkippingSnapshotTableName)\\n\\n// Query 1: Total votes by product_category, for 6 months\\ndef runQuery1(tableName: String) = {\\n  // Query 1: Total votes by product_category, for 6 months\\n  spark.sql(s\\"SELECT sum(total_votes), product_category FROM $tableName WHERE review_date > \'2013-12-15\' AND review_date < \'2014-06-01\' GROUP BY product_category\\").show()\\n}\\n\\n// Query 2: Average star rating by product_id, for some product\\ndef runQuery2(tableName: String) = {\\n  spark.sql(s\\"SELECT avg(star_rating), product_id FROM $tableName WHERE product_id in (\'B0184XC75U\') GROUP BY product_id\\").show()\\n}\\n\\n// Query 3: Count number of reviews by customer_id for some 5 customers\\ndef runQuery3(tableName: String) = {\\n  spark.sql(s\\"SELECT count(*) as num_reviews, customer_id FROM $tableName WHERE customer_id in (\'53096570\',\'10046284\',\'53096576\',\'10000196\',\'21700145\') GROUP BY customer_id\\").show()\\n}\\n\\n//\\n// Query 1: Is a \\"wide\\" query and hence it\'s expected to touch a lot of files\\n//\\nscala> runQuery1(rawSnapshotTableName)\\n+----------------+--------------------+\\n|sum(total_votes)|    product_category|\\n+----------------+--------------------+\\n|         1050944|                  PC|\\n|          867794|             Kitchen|\\n|         1167489|                Home|\\n|          927531|            Wireless|\\n|            6861|               Video|\\n|           39602| Digital_Video_Games|\\n|          954924|Digital_Video_Dow...|\\n|           81876|             Luggage|\\n|          320536|         Video_Games|\\n|          817679|              Sports|\\n|           11451|  Mobile_Electronics|\\n|          228739|  Home_Entertainment|\\n|         3769269|Digital_Ebook_Pur...|\\n|          252273|                Baby|\\n|          735042|             Apparel|\\n|           49101|    Major_Appliances|\\n|          484732|             Grocery|\\n|          285682|               Tools|\\n|          459980|         Electronics|\\n|          454258|            Outdoors|\\n+----------------+--------------------+\\nonly showing top 20 rows\\n\\nscala> runQuery1(dataSkippingSnapshotTableName)\\n+----------------+--------------------+\\n|sum(total_votes)|    product_category|\\n+----------------+--------------------+\\n|         1050944|                  PC|\\n|          867794|             Kitchen|\\n|         1167489|                Home|\\n|          927531|            Wireless|\\n|            6861|               Video|\\n|           39602| Digital_Video_Games|\\n|          954924|Digital_Video_Dow...|\\n|           81876|             Luggage|\\n|          320536|         Video_Games|\\n|          817679|              Sports|\\n|           11451|  Mobile_Electronics|\\n|          228739|  Home_Entertainment|\\n|         3769269|Digital_Ebook_Pur...|\\n|          252273|                Baby|\\n|          735042|             Apparel|\\n|           49101|    Major_Appliances|\\n|          484732|             Grocery|\\n|          285682|               Tools|\\n|          459980|         Electronics|\\n|          454258|            Outdoors|\\n+----------------+--------------------+\\nonly showing top 20 rows\\n\\n//\\n// Query 2: Is a \\"pointwise\\" query and hence it\'s expected that data-skipping should substantially reduce number \\n// of files scanned (as compared to Baseline)\\n//\\n// NOTE: That Linear Ordering (as compared to Space-curve based on) will have similar effect on performance reducing\\n// total # of Parquet files scanned, since we\'re querying on the prefix of the ordering key\\n//\\nscala> runQuery2(rawSnapshotTableName)\\n+----------------+----------+\\n|avg(star_rating)|product_id|\\n+----------------+----------+\\n|             1.0|B0184XC75U|\\n+----------------+----------+\\n\\n\\nscala> runQuery2(dataSkippingSnapshotTableName)\\n+----------------+----------+\\n|avg(star_rating)|product_id|\\n+----------------+----------+\\n|             1.0|B0184XC75U|\\n+----------------+----------+\\n\\n//\\n// Query 3: Similar to Q2, is a \\"pointwise\\" query, but querying other part of the ordering-key (product_id, customer_id)\\n// and hence it\'s expected that data-skipping should substantially reduce number of files scanned (as compared to Baseline, Linear Ordering).\\n//\\n// NOTE: That Linear Ordering (as compared to Space-curve based on) will _NOT_ have similar effect on performance reducing\\n// total # of Parquet files scanned, since we\'re NOT querying on the prefix of the ordering key\\n//\\nscala> runQuery3(rawSnapshotTableName)\\n+-----------+-----------+\\n|num_reviews|customer_id|\\n+-----------+-----------+\\n|         50|   53096570|\\n|          3|   53096576|\\n|         25|   10046284|\\n|          1|   10000196|\\n|         14|   21700145|\\n+-----------+-----------+\\n\\nscala> runQuery3(dataSkippingSnapshotTableName)\\n+-----------+-----------+\\n|num_reviews|customer_id|\\n+-----------+-----------+\\n|         50|   53096570|\\n|          3|   53096576|\\n|         25|   10046284|\\n|          1|   10000196|\\n|         14|   21700145|\\n+-----------+-----------+\\n```\\n\\n### Results\\nWe\'ve summarized the measured performance metrics below:\\n\\n| **Query** | **Baseline (B)** duration (files scanned / size) | **Linear Sorting (S)** | **Z-order (Z)** duration (scanned) | **Hilbert (H)** duration (scanned) |\\n| ---| ---| ---| ---| --- |\\n| Q1 | 14s (543 / 31.4Gb) | 15s (533 / 28.8Gb) | 15s (543 / 31.4Gb) | 14s (541 / 31.3Gb) |\\n| Q2 | 21s (543 / 31.4Gb) | 10s (533 / 28.8Gb) | **8s** **(243 / 14.4Gb)** | **7s** **(237 / 13.9Gb)** |\\n| Q3 | 17s (543 / 31.4Gb) | 15s (533 / 28.8Gb) | **6s** **(224 / 12.4Gb)** | **6s** **(219 / 11.9Gb)** |\\n\\nAs you can see multi-column linear ordering is not very effective for the queries that do filtering by columns other than the first one (Q2, Q3).\\n\\nWhich is a very clear contrast with space-filling curves (both Z-order and Hilbert) that allow to speed up query time by up to **3x!**\\n\\nIt\'s worth noting that the performance gains are heavily dependent on your underlying data and queries. In benchmarks on our internal data we were able to achieve queries performance improvements of more than **11x!**\\n\\n### Epilogue\\n\\nApache Hudi v0.10 brings new layout optimization capabilities Z-order and Hilbert to open source. Using these industry leading layout optimization techniques can bring substantial performance improvement and cost savings to your queries!"},{"id":"/2021/12/20/New-features-from-Apache-Hudi-0.7.0-and-0.8.0-available-on-Amazon-EMR","metadata":{"permalink":"/cn/blog/2021/12/20/New-features-from-Apache-Hudi-0.7.0-and-0.8.0-available-on-Amazon-EMR","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-12-20-New-features-from-Apache-Hudi-0.7.0-and-0.8.0-available-on-Amazon-EMR.mdx","source":"@site/blog/2021-12-20-New-features-from-Apache-Hudi-0.7.0-and-0.8.0-available-on-Amazon-EMR.mdx","title":"New features from Apache Hudi 0.7.0 and 0.8.0 available on Amazon EMR","description":"Redirecting... please wait!!","date":"2021-12-20T00:00:00.000Z","formattedDate":"December 20, 2021","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Udit Mehrotra"},{"name":"Gagan Brahmi"}],"prevItem":{"title":"Hudi Z-Order and Hilbert Space Filling Curves","permalink":"/cn/blog/2021/12/29/hudi-zorder-and-hilbert-space-filling-curves"},"nextItem":{"title":"Lakehouse Concurrency Control: Are we too optimistic?","permalink":"/cn/blog/2021/12/16/lakehouse-concurrency-control-are-we-too-optimistic"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/new-features-from-apache-hudi-0-7-0-and-0-8-0-available-on-amazon-emr/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/12/16/lakehouse-concurrency-control-are-we-too-optimistic","metadata":{"permalink":"/cn/blog/2021/12/16/lakehouse-concurrency-control-are-we-too-optimistic","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-12-16-lakehouse-concurrency-control-are-we-too-optimistic.md","source":"@site/blog/2021-12-16-lakehouse-concurrency-control-are-we-too-optimistic.md","title":"Lakehouse Concurrency Control: Are we too optimistic?","description":"Transactions on data lakes are now considered a key characteristic of a Lakehouse these days. But what has actually been accomplished so far? What are the current approaches? How do they fare in real-world scenarios? These questions are the focus of this blog.","date":"2021-12-16T00:00:00.000Z","formattedDate":"December 16, 2021","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"concurrency-control","permalink":"/cn/blog/tags/concurrency-control"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":7.535,"truncated":true,"authors":[{"name":"vinoth"}],"prevItem":{"title":"New features from Apache Hudi 0.7.0 and 0.8.0 available on Amazon EMR","permalink":"/cn/blog/2021/12/20/New-features-from-Apache-Hudi-0.7.0-and-0.8.0-available-on-Amazon-EMR"},"nextItem":{"title":"Apache Hudi Architecture Tools and Best Practices","permalink":"/cn/blog/2021/11/22/Apache-Hudi-Architecture-Tools-and-Best-Practices"}},"content":"Transactions on data lakes are now considered a key characteristic of a Lakehouse these days. But what has actually been accomplished so far? What are the current approaches? How do they fare in real-world scenarios? These questions are the focus of this blog. \\n\\n\x3c!--truncate--\x3e\\n\\nHaving had the good fortune of working on diverse database projects - an RDBMS ([Oracle](https://www.oracle.com/database/)), a NoSQL key-value store ([Voldemort](https://www.slideshare.net/vinothchandar/voldemort-prototype-to-production-nectar-edits)), a streaming database ([ksqlDB](https://www.confluent.io/blog/ksqldb-pull-queries-high-availability/)), a closed-source real-time datastore and of course, Apache Hudi, I can safely say that the nature of workloads deeply influence the concurrency control mechanisms adopted in different databases. This blog will also describe how we rethought concurrency control for the data lake in Apache Hudi.\\n\\nFirst, let\'s set the record straight. RDBMS databases offer the richest set of transactional capabilities and the widest array of concurrency control [mechanisms](https://dev.mysql.com/doc/refman/5.7/en/innodb-locking-transaction-model.html). Different isolation levels, fine grained locking, deadlock detection/avoidance, and more are possible because they have to support row-level mutations and reads across many tables while enforcing [key constraints](https://dev.mysql.com/doc/refman/8.0/en/create-table-foreign-keys.html) and maintaining [indexes](https://dev.mysql.com/doc/refman/8.0/en/create-table-secondary-indexes.html). NoSQL stores offer dramatically weaker guarantees like eventual-consistency and simple row level atomicity in exchange for greater scalability for simpler workloads. Drawing a similar parallel, traditional data warehouses offer more or less the full set of capabilities that you would find in an RDBMS, over columnar data, with locking and key constraints [enforced](https://docs.teradata.com/r/a8IdS6iVHR77Z9RrIkmMGg/wFPZS4jwZgSG21GnOIpEsw) whereas cloud data warehouses seem to have focused a lot more on separating the data and compute in architecture, while offering fewer isolation levels. As a surprising example, [no enforcement](https://docs.snowflake.com/en/sql-reference/constraints-overview.html#supported-constraint-types) of key constraints!\\n\\n### Pitfalls in Lake Concurrency Control\\n\\nHistorically, data lakes have been viewed as batch jobs reading/writing files on cloud storage and it\'s interesting to see how most new work extends this view and implements glorified file version control using some form of \\"[**Optimistic concurrency control**](https://en.wikipedia.org/wiki/Optimistic_concurrency_control)\\" (OCC). With OCC jobs take a table level lock to check if they have impacted overlapping files and if a conflict exists, they abort their operations completely. Without naming names, the lock is sometimes even just a JVM level lock held on a single Apache Spark driver node. Once again, this may be okay for lightweight coordination of old school batch jobs that mostly append files to tables, but cannot be applied broadly to modern data lake workloads. Such approaches are built with immutable/append-only data models in mind, which are inadequate for incremental data processing or keyed updates/deletes. OCC is very optimistic that real contention never happens. Developer evangelism comparing OCC to the full fledged transactional capabilities of an RDBMS or a traditional data warehouse is rather misinformed. Quoting Wikipedia directly - \\"_if contention for data resources is frequent, the cost of repeatedly restarting transactions hurts performance significantly, in which case other_ [_concurrency control_](https://en.wikipedia.org/wiki/Concurrency_control) _methods may be better suited._ \\" When conflicts do occur, they can cause massive resource wastage since you have a batch job that fails after it ran for a few hours, during every attempt!\\n\\nImagine a real-life scenario of two writer processes : an ingest writer job producing new data every 30 minutes and a deletion writer job that is enforcing GDPR, taking 2 hours to issue deletes. It\'s very likely for these to overlap files with random deletes, and the deletion job is almost guaranteed to starve and fail to commit each time. In database speak, mixing long running transactions with optimism leads to disappointment, since the longer the transactions the higher the probability they will overlap.\\n\\n![concurrency](/assets/images/blog/concurrency/ConcurrencyControlConflicts.png)\\n\\nSo, what\'s the alternative? Locking? Wikipedia also says - \\"_However, locking-based (\\"pessimistic\\") methods also can deliver poor performance because locking can drastically limit effective concurrency even when deadlocks are avoided.\\"._ Here is where Hudi takes a different approach, that we believe is more apt for modern lake transactions which are typically long-running and even continuous. Data lake workloads share more characteristics with high throughput stream processing jobs, than they do to standard reads/writes from a database and this is where we borrow from. In stream processing events are serialized into a single ordered log, avoiding any locks/concurrency bottlenecks and you can continuously process millions of events/sec. Hudi implements a file level, log based concurrency control protocol on the Hudi [timeline](https://hudi.apache.org/docs/timeline), which in-turn relies on bare minimum atomic puts to cloud storage. By building on an event log as the central piece for inter process coordination, Hudi is able to offer a few flexible deployment models that offer greater concurrency over pure OCC approaches that just track table snapshots.\\n\\n### Model 1 : Single Writer, Inline Table Services\\n\\nThe simplest form of concurrency control is just no concurrency at all. A data lake table often has common services operating on it to ensure efficiency. Reclaiming storage space from older versions and logs, coalescing files (clustering in Hudi), merging deltas (compactions in Hudi), and more. Hudi can simply eliminate the need for concurrency control and maximizes throughput by supporting these table services out-of-box and running inline after every write to the table.\\n\\nExecution plans are idempotent, persisted to the timeline and auto-recover from failures. For most simple use-cases, this means just writing is sufficient to get a well-managed table that needs no concurrency control.\\n\\n![concurrency-single-writer](/assets/images/blog/concurrency/SingleWriterInline.gif)\\n\\n### Model 2 : Single Writer, Async Table Services\\n\\nOur delete/ingest example above is n\'t really that simple. While ingest/writer may just be updating the last N partitions on the table, delete may span across the entire table even. Mixing them in the same job, could slow down ingest latency by a lot. But, Hudi provides the option of running the table services in an async fashion, where most of the heavy lifting (e.g actually rewriting the columnar data by compaction service) is done asynchronously, eliminating any repeated wasteful retries whatsoever, while also optimizing the table using clustering techniques. Thus a single writer could consumes both regular updates and GDPR deletes and serialize them into a log. Given Hudi has record level indexing and avro log writes are much cheaper (as opposed to writing parquet, which can be 10x or more expensive), ingest latency can be sustained while enjoying great replayability. In fact, we were able to scale this model at [Uber](https://eng.uber.com/uber-big-data-platform/), across 100s of petabytes, by sequencing all deletes & updates into the same source Apache Kafka topic. There\'s more to concurrency control than locking and Hudi accomplishes all this without needing any external locking.\\n\\n![concurrency-async](/assets/images/blog/concurrency/SingleWriterAsync.gif)\\n\\n### Model 3 : Multiple Writers\\n\\nBut it\'s not always possible to serialize the deletes into the same write stream or sql based deletes are required. With multiple distributed processes, some form of locking is inevitable, but like real databases Hudi\'s concurrency model is intelligent enough to differentiate actual writing to the table, from table services that manage or optimize the table. Hudi offers similar optimistic concurrency control across multiple writers, but table services can still execute completely lock-free and async. This means the delete job can merely encode deletes and the ingest job can log updates, while the compaction service again applies the updates/deletes to base files. Even though the delete job and ingest job can contend and starve each other like like we mentioned above, their run-times are much lower and the wastage is drastically lower, since the compaction does the heavy-lifting of parquet/columnar data writing.\\n\\n![concurrency-multi](/assets/images/blog/concurrency/MultiWriter.gif)\\n\\nAll this said, there are still many ways we can improve upon this foundation.\\n\\n*   For starters, Hudi has already implemented a [marker mechanism](https://hudi.apache.org/blog/2021/08/18/improving-marker-mechanism/) that tracks all the files that are part of an active write transaction and a heartbeat mechanism that can track active writers to a table. This can be directly used by other active transactions/writers to detect what other writers are doing and [abort early](https://issues.apache.org/jira/browse/HUDI-1575) if conflicts are detected, yielding the cluster resources back to other jobs sooner.\\n*   While optimistic concurrency control is attractive when serializable snapshot isolation is desired, it\'s neither optimal nor the only method for dealing with concurrency between writers. We plan to implement a fully lock-free concurrency control using CRDTs and widely adopted stream processing concepts, over our log [merge API](https://github.com/apache/hudi/blob/bc8bf043d5512f7afbb9d94882c4e43ee61d6f06/hudi-common/src/main/java/org/apache/hudi/common/model/HoodieRecordPayload.java#L38), that has already been [proven](https://hudi.apache.org/blog/2021/09/01/building-eb-level-data-lake-using-hudi-at-bytedance/#functionality-support) to sustain enormous continuous write volumes for the data lake.\\n*   Touching upon key constraints, Hudi is the only lake transactional layer that ensures unique [key](https://hudi.apache.org/docs/key_generation) constraints today, but limited to the record key of the table. We will be looking to expand this capability in a more general form to non-primary key fields, with the said newer concurrency models.\\n\\nFinally, for data lakes to transform successfully into lakehouses, we must learn from the failing of the \\"hadoop warehouse\\" vision, which shared similar goals with the new \\"lakehouse\\" vision. Designers did not pay closer attention to the missing technology gaps against warehouses and created unrealistic expectations from the actual software. As transactions and database functionality finally goes mainstream on data lakes, we must apply these lessons and remain candid about the current shortcomings. If you are building a lakehouse, I hope this post encourages you to closely consider various operational and efficiency aspects around concurrency control. Join our fast growing community by trying out [Apache Hudi](https://hudi.apache.org/docs/overview) or join us in conversations on [Slack](https://join.slack.com/t/apache-hudi/shared_invite/zt-1e94d3xro-JvlNO1kSeIHJBTVfLPlI5w)."},{"id":"/2021/11/22/Apache-Hudi-Architecture-Tools-and-Best-Practices","metadata":{"permalink":"/cn/blog/2021/11/22/Apache-Hudi-Architecture-Tools-and-Best-Practices","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-11-22-Apache-Hudi-Architecture-Tools-and-Best-Practices.mdx","source":"@site/blog/2021-11-22-Apache-Hudi-Architecture-Tools-and-Best-Practices.mdx","title":"Apache Hudi Architecture Tools and Best Practices","description":"Redirecting... please wait!!","date":"2021-11-22T00:00:00.000Z","formattedDate":"November 22, 2021","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"xenonstack","permalink":"/cn/blog/tags/xenonstack"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Chandan Gaur"}],"prevItem":{"title":"Lakehouse Concurrency Control: Are we too optimistic?","permalink":"/cn/blog/2021/12/16/lakehouse-concurrency-control-are-we-too-optimistic"},"nextItem":{"title":"How GE Aviation built cloud-native data pipelines at enterprise scale using the AWS platform","permalink":"/cn/blog/2021/11/16/How-GE-Aviation-built-cloud-native-data-pipelines-at-enterprise-scale-using-the-AWS-platform"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.xenonstack.com/insights/what-is-hudi\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/11/16/How-GE-Aviation-built-cloud-native-data-pipelines-at-enterprise-scale-using-the-AWS-platform","metadata":{"permalink":"/cn/blog/2021/11/16/How-GE-Aviation-built-cloud-native-data-pipelines-at-enterprise-scale-using-the-AWS-platform","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-11-16-How-GE-Aviation-built-cloud-native-data-pipelines-at-enterprise-scale-using-the-AWS-platform.mdx","source":"@site/blog/2021-11-16-How-GE-Aviation-built-cloud-native-data-pipelines-at-enterprise-scale-using-the-AWS-platform.mdx","title":"How GE Aviation built cloud-native data pipelines at enterprise scale using the AWS platform","description":"Redirecting... please wait!!","date":"2021-11-16T00:00:00.000Z","formattedDate":"November 16, 2021","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"analytics at-scale","permalink":"/cn/blog/tags/analytics-at-scale"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Alcuin Weidus"},{"name":"Suresh Patnam"}],"prevItem":{"title":"Apache Hudi Architecture Tools and Best Practices","permalink":"/cn/blog/2021/11/22/Apache-Hudi-Architecture-Tools-and-Best-Practices"},"nextItem":{"title":"Practice of Apache Hudi in building real-time data lake at station B","permalink":"/cn/blog/2021/10/21/Practice-of-Apache-Hudi-in-building-real-time-data-lake-at-station-B"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/how-ge-aviation-built-cloud-native-data-pipelines-at-enterprise-scale-using-the-aws-platform/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/10/21/Practice-of-Apache-Hudi-in-building-real-time-data-lake-at-station-B","metadata":{"permalink":"/cn/blog/2021/10/21/Practice-of-Apache-Hudi-in-building-real-time-data-lake-at-station-B","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-10-21-Practice-of-Apache-Hudi-in-building-real-time-data-lake-at-station-B.mdx","source":"@site/blog/2021-10-21-Practice-of-Apache-Hudi-in-building-real-time-data-lake-at-station-B.mdx","title":"Practice of Apache Hudi in building real-time data lake at station B","description":"Redirecting... please wait!!","date":"2021-10-21T00:00:00.000Z","formattedDate":"October 21, 2021","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"real-time-datalake","permalink":"/cn/blog/tags/real-time-datalake"},{"label":"developpaper","permalink":"/cn/blog/tags/developpaper"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Yu Zhaojing"}],"prevItem":{"title":"How GE Aviation built cloud-native data pipelines at enterprise scale using the AWS platform","permalink":"/cn/blog/2021/11/16/How-GE-Aviation-built-cloud-native-data-pipelines-at-enterprise-scale-using-the-AWS-platform"},"nextItem":{"title":"How Amazon Transportation Service enabled near-real-time event analytics at petabyte scale using AWS Glue with Apache Hudi","permalink":"/cn/blog/2021/10/14/How-Amazon-Transportation-Service-enabled-near-real-time-event-analytics-at-petabyte-scale-using-AWS-Glue-with-Apache-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://developpaper.com/practice-of-apache-hudi-in-building-real-time-data-lake-at-station-b/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/10/14/How-Amazon-Transportation-Service-enabled-near-real-time-event-analytics-at-petabyte-scale-using-AWS-Glue-with-Apache-Hudi","metadata":{"permalink":"/cn/blog/2021/10/14/How-Amazon-Transportation-Service-enabled-near-real-time-event-analytics-at-petabyte-scale-using-AWS-Glue-with-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-10-14-How-Amazon-Transportation-Service-enabled-near-real-time-event-analytics-at-petabyte-scale-using-AWS-Glue-with-Apache-Hudi.mdx","source":"@site/blog/2021-10-14-How-Amazon-Transportation-Service-enabled-near-real-time-event-analytics-at-petabyte-scale-using-AWS-Glue-with-Apache-Hudi.mdx","title":"How Amazon Transportation Service enabled near-real-time event analytics at petabyte scale using AWS Glue with Apache Hudi","description":"Redirecting... please wait!!","date":"2021-10-14T00:00:00.000Z","formattedDate":"October 14, 2021","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"near real-time analytics","permalink":"/cn/blog/tags/near-real-time-analytics"},{"label":"analytics at-scale","permalink":"/cn/blog/tags/analytics-at-scale"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Madhavan Sriram"},{"name":"Diego Menin"},{"name":"Gabriele Cacciola"},{"name":"Kunal Gautam"}],"prevItem":{"title":"Practice of Apache Hudi in building real-time data lake at station B","permalink":"/cn/blog/2021/10/21/Practice-of-Apache-Hudi-in-building-real-time-data-lake-at-station-B"},"nextItem":{"title":"Data Platform 2.0 - Part I","permalink":"/cn/blog/2021/10/05/Data-Platform-2.0-Part-I"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/how-amazon-transportation-service-enabled-near-real-time-event-analytics-at-petabyte-scale-using-aws-glue-with-apache-hudi/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/10/05/Data-Platform-2.0-Part-I","metadata":{"permalink":"/cn/blog/2021/10/05/Data-Platform-2.0-Part-I","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-10-05-Data-Platform-2.0-Part-I.mdx","source":"@site/blog/2021-10-05-Data-Platform-2.0-Part-I.mdx","title":"Data Platform 2.0 - Part I","description":"Redirecting... please wait!!","date":"2021-10-05T00:00:00.000Z","formattedDate":"October 5, 2021","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"halodoc","permalink":"/cn/blog/tags/halodoc"},{"label":"datalake","permalink":"/cn/blog/tags/datalake"},{"label":"datalake-platform","permalink":"/cn/blog/tags/datalake-platform"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Jitendra Shah"}],"prevItem":{"title":"How Amazon Transportation Service enabled near-real-time event analytics at petabyte scale using AWS Glue with Apache Hudi","permalink":"/cn/blog/2021/10/14/How-Amazon-Transportation-Service-enabled-near-real-time-event-analytics-at-petabyte-scale-using-AWS-Glue-with-Apache-Hudi"},"nextItem":{"title":"Building an ExaByte-level Data Lake Using Apache Hudi at ByteDance","permalink":"/cn/blog/2021/09/01/building-eb-level-data-lake-using-hudi-at-bytedance"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://blogs.halodoc.io/data-platform-2-0-part-1/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/09/01/building-eb-level-data-lake-using-hudi-at-bytedance","metadata":{"permalink":"/cn/blog/2021/09/01/building-eb-level-data-lake-using-hudi-at-bytedance","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-09-01-building-eb-level-data-lake-using-hudi-at-bytedance.md","source":"@site/blog/2021-09-01-building-eb-level-data-lake-using-hudi-at-bytedance.md","title":"Building an ExaByte-level Data Lake Using Apache Hudi at ByteDance","description":"Ziyue Guan from Bytedance shares the experience of building an ExaByte(EB)-level data lake using Apache Hudi at Bytedance.","date":"2021-09-01T00:00:00.000Z","formattedDate":"September 1, 2021","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":8.61,"truncated":true,"authors":[{"name":"Ziyue Guan, translated to English by yihua"}],"prevItem":{"title":"Data Platform 2.0 - Part I","permalink":"/cn/blog/2021/10/05/Data-Platform-2.0-Part-I"},"nextItem":{"title":"Asynchronous Clustering using Hudi","permalink":"/cn/blog/2021/08/23/async-clustering"}},"content":"Ziyue Guan from Bytedance shares the experience of building an ExaByte(EB)-level data lake using Apache Hudi at Bytedance.\\n\\n\x3c!--truncate--\x3e\\n\\nThis blog is a translated version of [the same blog originally in Chinese/\u4e2d\u6587](https://mp.weixin.qq.com/s/oZz_2HzPCWgzxwZO0nuDUQ).  Here are the [original slides in Chinese/\u4e2d\u6587](/assets/images/blog/datalake-bytedance-hudi/bytedance-hudi-slides-chinese.pdf) and [the translated slides in English](/assets/images/blog/datalake-bytedance-hudi/bytedance-hudi-slides-english.pdf).\\n\\n![slide1 title](/assets/images/blog/datalake-bytedance-hudi/slide1.png)\\n\\n![slide2 agenda](/assets/images/blog/datalake-bytedance-hudi/slide2.png)\\n\\nNext, I will explain how we use Hudi in Bytedance\u2019s recommendation system in five parts: scenario requirements, design decisions, functionality support, performance tuning, and future work.\\n\\n## Scenario Requirements\\n\\n![slide3 scenario requirements](/assets/images/blog/datalake-bytedance-hudi/slide3.png)\\n![slide4 scenario diagram](/assets/images/blog/datalake-bytedance-hudi/slide4.png)\\n![slide5 scenario details](/assets/images/blog/datalake-bytedance-hudi/slide5.png)\\n\\nIn the recommendation system, we use the data lake in the following two scenarios:\\n\\n1. We use BigTable as the data storage for the near real-time processing in the entire system. There is an internally developed component TBase, which provides the semantics of BigTable and the abstraction of some requirements in the search advertisement recommendation scenarios, and shields the differences in underlying storage. For a better understanding, it can be directly regarded as an HBase. In this process, in order to serve offline data analysis and mining needs, the data needs to be exported to offline storage. In the past, users either use MR/Spark to directly access the storage, or obtain data by scanning the database, which do not meet the data access characteristics in the OLAP scenario. Therefore, we build BigTable\'s CDC based on the data lake to improve data timeliness, reduce the access pressure of the near real-time system, and provide efficient OLAP access and user-friendly SQL consumption methods.\\n\\n2. In addition, we also use data lakes in the scenarios of feature engineering and model training. We obtain two types of real-time data streams from internal and external sources. One is the instances returned from the system, which includes the features obtained when the recommendation system is serving. The other is the feedback from event tracking at vantage points and a variety of complex external data sources. This type of data is used as labels and forms a complete machine learning data sample with the previously mentioned features. For this scenario, we need to implement a merging operation based on the primary key to merge the instance and label together.  The time window range may be as long as tens of days, with the volume at the order of hundreds of billions of rows. The system needs to support efficient column selection and predicate pushdown. At the same time, it also needs to support concurrent updates and other related capabilities.\\n\\nThese two scenarios pose the following challenges:\\n\\n1. **The data is very irregular.** Compared with Binlog, WAL cannot obtain all the information of a row, and the data size changes significantly.\\n\\n2. **The throughput is relatively large.**  The throughput of a single table exceeds **100 GB/s**, and the single table needs **PB-level** storage.\\n\\n3. **The data schema is complex.** The data is highly dimensional and sparse.  The number of table columns ranges from 1000 to 10000+. And there are a lot of complex data types.\\n\\n\\n## Design Decisions\\n\\n![slide6 design decisions](/assets/images/blog/datalake-bytedance-hudi/slide6.png)\\n![slide7 design details](/assets/images/blog/datalake-bytedance-hudi/slide7.png)\\n\\nWhen making the decision on the engine, we examine three of the most popular data lake engines, **Hudi**, **Iceberg**, and **DeltaLake**. These three have their own advantages and disadvantages in our scenarios. Finally, **Hudi** is selected as the storage engine based on Hudi\'s openness to the upstream and downstream ecosystems, support for the global index, and customized development interfaces for certain storage logic.\\n\\n- For real-time writing, MOR with better timeliness is selected.\\n\\n- We examine the index type.  First of all, because WAL can\'t get the partition of the data each time, it must use a global index. Among several global index implementations, in order to achieve high-performance writing, HBase is the only choice. The other two implementations have major performance gaps from HBase.\\n\\n- Regarding the computing engine and API, Hudi\'s support for Flink was not perfect at the time, so we choose Spark which has more mature support. In order to flexibly implement some customized functionality and logic, and because the DataFrame API has more semantic restrictions, we choose the lower-level RDD API.\\n\\n\\n## Functionality Support\\n\\n![slide8 functionality support](/assets/images/blog/datalake-bytedance-hudi/slide8.png)\\n\\nFunctionality support includes MVCC and Schema registration systems that store semantics.\\n\\n![slide9 mvcc](/assets/images/blog/datalake-bytedance-hudi/slide9.png)\\n\\nFirst of all, in order to support WAL write, we implement the payload for MVCC, and based on Avro, we customized a set of data structure implementation with timestamp. This logic is hidden from users through view access. In addition, we also implement the HBase append semantics, which realizes the appending to the List type instead of overwriting.\\n\\n![slide10 schema](/assets/images/blog/datalake-bytedance-hudi/slide10.png)\\n\\nBecause Hudi obtains the schema from write data, it is not convenient for working with other systems.  We also need some extensions based on the schema, so we build a metadata center to provide metadata-related operations.\\n\\n- First of all, we realized atomic changes and multi-site high availability based on the semantics provided by internal storage. Users can atomically trigger schema changes through the interface and get the results immediately.\\n\\n- Achieves versioning of the Schema by adding the version number. After having the version number, we can easily use the schema instead of passing JSON object back and forth. With multiple versions, schema evolution can also be flexibly achieved.\\n\\n- We also support additional information encoding at the column level to help the business achieve special extended functionality in some scenarios. We replace column names with IDs to save the cost in the storage process.\\n\\n- When the Spark job with Hudi is running, it builds a local cache at the JVM level and syncs the data with the metadata center through the pull method, to achieve rapid access to the schema and singleton instance of the in-process schema.\\n\\n\\n## Performance Tuning\\n\\n![slide11 performance tuning](/assets/images/blog/datalake-bytedance-hudi/slide11.png)\\n\\nIn our scenario, the performance challenges are huge. **The maximum data volume of a single table reaches 400PB+, the daily volume increase is PB level, and the total data volume reaches EB level.** Therefore, we have done some work to improve performance based on the performance and data characteristics.\\n\\n![slide12 serialization](/assets/images/blog/datalake-bytedance-hudi/slide12.png)\\n\\nSerialization includes the following optimizations:\\n\\n1. Schema: the cost of data serialization using Avro is very expensive which consumes a lot of compute resources. To address this problem, we first use the singleton schema instance in JVM to avoid CPU-consuming comparison operations during the serialization process.\\n\\n2. By optimizing the payload logic, the number of times of running serialization is reduced.\\n\\n3. With the help of a third-party Avro serialization implementation, the serialization process is compiled into bytecode to improve the speed of SerDe and reduce memory usage. The serialization process has been modified to ensure that our complex schema can also be compiled properly.\\n\\n![slide13 compaction](/assets/images/blog/datalake-bytedance-hudi/slide13.png)\\n\\nThe optimization of the compaction process is as follows.\\n\\n- In addition to the default Inline/Async compaction options, Hudi also supports flexible deployment of compaction. The characteristics of the compaction job are quite different from the ingestion job. In the same Spark application, it not only is impossible to set targeted settings but also has the problem of insufficient resource flexibility. We first build an independently deployed script so that the compaction job can be triggered and run independently. A low-cost mixed queue is used for resource scheduling for the compaction plan. In addition, we have also developed a compaction strategy based on rules and heuristics. The user\'s requirement is usually to guarantee a day-level or hour-level SLA, and targeted compression of data in certain partitions, so targeted compression capabilities are provided.\\n\\n- In order to shorten the time of critical compaction, we usually do compaction in advance to avoid all work being completed in a single compaction job. However, if a FileGroup compacted has a new update, it has to be compacted again. In order to optimize the overall efficiency, we made a heuristic scheduling of when a FileGroup should be compacted based on business logic to reduce additional compaction costs.  The actual benefits of this feature are still being evaluated.\\n\\n- Finally, we made some process optimizations for the compaction, such as not using WriteStatus\'s Cache and so on.\\n\\n![slide14 hdfs sla](/assets/images/blog/datalake-bytedance-hudi/slide14.png)\\n\\nAs storage designed for throughput, HDFS has serious real-time write glitches when the cluster usage level is relatively high. Through communication and cooperation with the HDFS team, some improvements have been done.\\n\\n- First, we replace the original data HSync operation with HFlush to avoid disk I/O write amplification caused by distributed updates.\\n\\n- We make aggressive pipeline switching settings based on the scenario tuning, and the HDFS team has developed a flexible API that can control the pipeline to achieve flexible configurations in this scenario.\\n\\n- Finally, the timeliness of real-time writing is ensured through independent I/O isolation of log files.\\n\\n![slide15 process optimization](/assets/images/blog/datalake-bytedance-hudi/slide15.png)\\n\\nThere are also some small performance improvements, process modifications, and bug fixes. If you are interested, feel free to discuss that with me.\\n\\n## Future Work\\n\\n![slide16 future work](/assets/images/blog/datalake-bytedance-hudi/slide16.png)\\n![slide17 future work details](/assets/images/blog/datalake-bytedance-hudi/slide17.png)\\n\\nIn the future, we will continue to iterate in the following aspects.\\n\\n- **Productization issues**: The current way of using APIs and tuning parameters are highly demanding for the users, especially for the tuning, operation, and maintenance, which requires a deep understanding of Hudi principles to complete.  This hinders the promotion of that to users.\\n\\n- **Support issues for ecosystems**: In our scenario, the technology stack is mainly on Flink, and the use of Flink will be explored in the future. In addition, the applications and environments used in upstream and downstream are complex, which requires cross-language and universal interface implementation. The current binding with Spark is cumbersome.\\n\\n- **Cost and performance issues**: a common topic, since our scenario is relatively broad, the benefits from optimization are highly considerable.\\n\\n- **Storage semantics**: We use Hudi as storage rather than a table format. Therefore, in the future, we plan to expand scenarios using Hudi, and need richer storage semantics.  We\'ll do more work in this area.\\n\\n![slide19 hiring](/assets/images/blog/datalake-bytedance-hudi/slide19.png)\\n\\nFinally, an advertisement, our recommendation architecture team is responsible for the recommendation architecture design and development for products such as Douyin, Toutiao, and Xigua Video. The challenges are big and the growth is fast. Now we are hiring people and the working locations include: Beijing/Shanghai/Hangzhou/Singapore/Mountain View.  If you are  interested, you are welcomed to add WeChat `qinglingcannotfly` or send your resume to the email: `guanziyue.gzy@bytedance.com`."},{"id":"/2021/08/23/async-clustering","metadata":{"permalink":"/cn/blog/2021/08/23/async-clustering","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-08-23-async-clustering.md","source":"@site/blog/2021-08-23-async-clustering.md","title":"Asynchronous Clustering using Hudi","description":"In one of the previous blog posts, we introduced a new","date":"2021-08-23T00:00:00.000Z","formattedDate":"August 23, 2021","tags":[{"label":"design","permalink":"/cn/blog/tags/design"},{"label":"clustering","permalink":"/cn/blog/tags/clustering"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":6.055,"truncated":true,"authors":[{"name":"codope"}],"prevItem":{"title":"Building an ExaByte-level Data Lake Using Apache Hudi at ByteDance","permalink":"/cn/blog/2021/09/01/building-eb-level-data-lake-using-hudi-at-bytedance"},"nextItem":{"title":"Reliable ingestion from AWS S3 using Hudi","permalink":"/cn/blog/2021/08/23/s3-events-source"}},"content":"In one of the [previous blog](/blog/2021/01/27/hudi-clustering-intro) posts, we introduced a new\\nkind of table service called clustering to reorganize data for improved query performance without compromising on\\ningestion speed. We learnt how to setup inline clustering. In this post, we will discuss what has changed since then and\\nsee how asynchronous clustering can be setup using HoodieClusteringJob as well as DeltaStreamer utility.\\n\\n\x3c!--truncate--\x3e\\n\\n## Introduction\\n\\nOn a high level, clustering creates a plan based on a configurable strategy, groups eligible files based on specific\\ncriteria and then executes the plan. Hudi supports [multi-writers](https://hudi.apache.org/docs/concurrency_control#enabling-multi-writing) which provides\\nsnapshot isolation between multiple table services, thus allowing writers to continue with ingestion while clustering\\nruns in the background. For a more detailed overview of the clustering architecture please check out the previous blog\\npost.\\n\\n## Clustering Strategies\\n\\nAs mentioned before, clustering plan as well as execution depends on configurable strategy. These strategies can be\\nbroadly classified into three types: clustering plan strategy, execution strategy and update strategy.\\n\\n### Plan Strategy\\n\\nThis strategy comes into play while creating clustering plan. It helps to decide what file groups should be clustered.\\nLet\'s look at different plan strategies that are available with Hudi. Note that these strategies are easily pluggable\\nusing this [config](/docs/next/configurations#hoodieclusteringplanstrategyclass).\\n\\n1. `SparkSizeBasedClusteringPlanStrategy`: It selects file slices based on\\n   the [small file limit](/docs/next/configurations/#hoodieclusteringplanstrategysmallfilelimit)\\n   of base files and creates clustering groups upto max file size allowed per group. The max size can be specified using\\n   this [config](/docs/next/configurations/#hoodieclusteringplanstrategymaxbytespergroup). This\\n   strategy is useful for stitching together medium-sized files into larger ones to reduce lot of files spread across\\n   cold partitions.\\n2. `SparkRecentDaysClusteringPlanStrategy`: It looks back previous \'N\' days partitions and creates a plan that will\\n   cluster the \'small\' file slices within those partitions. This is the default strategy. It could be useful when the\\n   workload is predictable and data is partitioned by time.\\n3. `SparkSelectedPartitionsClusteringPlanStrategy`: In case you want to cluster only specific partitions within a range,\\n   no matter how old or new are those partitions, then this strategy could be useful. To use this strategy, one needs\\n   to set below two configs additionally (both begin and end partitions are inclusive):\\n\\n```\\nhoodie.clustering.plan.strategy.cluster.begin.partition\\nhoodie.clustering.plan.strategy.cluster.end.partition\\n```\\n\\n:::note\\nAll the strategies are partition-aware and the latter two are still bound by the size limits of the first strategy.\\n:::\\n\\n### Execution Strategy\\n\\nAfter building the clustering groups in the planning phase, Hudi applies execution strategy, for each group, primarily\\nbased on sort columns and size. The strategy can be specified using this [config](/docs/next/configurations/#hoodieclusteringexecutionstrategyclass).\\n\\n`SparkSortAndSizeExecutionStrategy` is the default strategy. Users can specify the columns to sort the data by, when\\nclustering using\\nthis [config](/docs/next/configurations/#hoodieclusteringplanstrategysortcolumns). Apart from\\nthat, we can also set [max file size](/docs/next/configurations/#hoodieparquetmaxfilesize)\\nfor the parquet files produced due to clustering. The strategy uses bulk insert to write data into new files, in which\\ncase, Hudi implicitly uses a partitioner that does sorting based on specified columns. In this way, the strategy changes\\nthe data layout in a way that not only improves query performance but also balance rewrite overhead automatically.\\n\\nNow this strategy can be executed either as a single spark job or multiple jobs depending on number of clustering groups\\ncreated in the planning phase. By default, Hudi will submit multiple spark jobs and union the results. In case you want\\nto force Hudi to use single spark job, set the execution strategy\\nclass [config](/docs/next/configurations/#hoodieclusteringexecutionstrategyclass)\\nto `SingleSparkJobExecutionStrategy`.\\n\\n### Update Strategy\\n\\nCurrently, clustering can only be scheduled for tables/partitions not receiving any concurrent updates. By default,\\nthe [config for update strategy](/docs/next/configurations/#hoodieclusteringupdatesstrategy) is\\nset to ***SparkRejectUpdateStrategy***. If some file group has updates during clustering then it will reject updates and\\nthrow an exception. However, in some use-cases updates are very sparse and do not touch most file groups. The default\\nstrategy to simply reject updates does not seem fair. In such use-cases, users can set the config to ***SparkAllowUpdateStrategy***.\\n\\nWe discussed the critical strategy configurations. All other configurations related to clustering are\\nlisted [here](/docs/next/configurations/#Clustering-Configs). Out of this list, a few\\nconfigurations that will be very useful are:\\n\\n|  Config key  | Remarks | Default |\\n|  -----------  | -------  | ------- |\\n| `hoodie.clustering.async.enabled` | Enable running of clustering service, asynchronously as writes happen on the table. | False |\\n| `hoodie.clustering.async.max.commits` | Control frequency of async clustering by specifying after how many commits clustering should be triggered. | 4 |\\n| `hoodie.clustering.preserve.commit.metadata` | When rewriting data, preserves existing _hoodie_commit_time. This means users can run incremental queries on clustered data without any side-effects. | False |\\n\\n## Asynchronous Clustering\\n\\nPreviously, we have seen how users\\ncan [setup inline clustering](/blog/2021/01/27/hudi-clustering-intro#setting-up-clustering).\\nAdditionally, users can\\nleverage [HoodieClusteringJob](https://cwiki.apache.org/confluence/display/HUDI/RFC+-+19+Clustering+data+for+freshness+and+query+performance#RFC19Clusteringdataforfreshnessandqueryperformance-SetupforAsyncclusteringJob)\\nto setup 2-step asynchronous clustering.\\n\\n### HoodieClusteringJob\\n\\nWith the release of Hudi version 0.9.0, we can schedule as well as execute clustering in the same step. We just need to\\nspecify the `\u2014mode` or `-m` option. There are three modes:\\n\\n1. `schedule`: Make a clustering plan. This gives an instant which can be passed in execute mode.\\n2. `execute`: Execute a clustering plan at given instant which means --instant-time is required here.\\n3. `scheduleAndExecute`: Make a clustering plan first and execute that plan immediately.\\n\\nNote that to run this job while the original writer is still running, please enable multi-writing:\\n```\\nhoodie.write.concurrency.mode=optimistic_concurrency_control\\nhoodie.write.lock.provider=org.apache.hudi.client.transaction.lock.ZookeeperBasedLockProvider\\n```\\n\\nA sample spark-submit command to setup HoodieClusteringJob is as below:\\n\\n```bash\\nspark-submit \\\\\\n--class org.apache.hudi.utilities.HoodieClusteringJob \\\\\\n/path/to/hudi-utilities-bundle/target/hudi-utilities-bundle_2.12-0.9.0-SNAPSHOT.jar \\\\\\n--props /path/to/config/clusteringjob.properties \\\\\\n--mode scheduleAndExecute \\\\\\n--base-path /path/to/hudi_table/basePath \\\\\\n--table-name hudi_table_schedule_clustering \\\\\\n--spark-memory 1g\\n```\\nA sample `clusteringjob.properties` file:\\n```\\nhoodie.clustering.async.enabled=true\\nhoodie.clustering.async.max.commits=4\\nhoodie.clustering.plan.strategy.target.file.max.bytes=1073741824\\nhoodie.clustering.plan.strategy.small.file.limit=629145600\\nhoodie.clustering.execution.strategy.class=org.apache.hudi.client.clustering.run.strategy.SparkSortAndSizeExecutionStrategy\\nhoodie.clustering.plan.strategy.sort.columns=column1,column2\\n```\\n\\n### HoodieDeltaStreamer\\n\\nThis brings us to our users\' favorite utility in Hudi. Now, we can trigger asynchronous clustering with DeltaStreamer.\\nJust set the `hoodie.clustering.async.enabled` config to true and specify other clustering config in properties file\\nwhose location can be pased as `\u2014props` when starting the deltastreamer (just like in the case of HoodieClusteringJob).\\n\\nA sample spark-submit command to setup HoodieDeltaStreamer is as below:\\n\\n```bash\\nspark-submit \\\\\\n--class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer \\\\\\n/path/to/hudi-utilities-bundle/target/hudi-utilities-bundle_2.12-0.9.0-SNAPSHOT.jar \\\\\\n--props /path/to/config/clustering_kafka.properties \\\\\\n--schemaprovider-class org.apache.hudi.utilities.schema.SchemaRegistryProvider \\\\\\n--source-class org.apache.hudi.utilities.sources.AvroKafkaSource \\\\\\n--source-ordering-field impresssiontime \\\\\\n--table-type COPY_ON_WRITE \\\\\\n--target-base-path /path/to/hudi_table/basePath \\\\\\n--target-table impressions_cow_cluster \\\\\\n--op INSERT \\\\\\n--hoodie-conf hoodie.clustering.async.enabled=true \\\\\\n--continuous\\n```\\n\\n### Spark Structured Streaming\\n\\nWe can also enable asynchronous clustering with Spark structured streaming sink as shown below. \\n```scala\\nval commonOpts = Map(\\n   \\"hoodie.insert.shuffle.parallelism\\" -> \\"4\\",\\n   \\"hoodie.upsert.shuffle.parallelism\\" -> \\"4\\",\\n   DataSourceWriteOptions.RECORDKEY_FIELD.key -> \\"_row_key\\",\\n   DataSourceWriteOptions.PARTITIONPATH_FIELD.key -> \\"partition\\",\\n   DataSourceWriteOptions.PRECOMBINE_FIELD.key -> \\"timestamp\\",\\n   HoodieWriteConfig.TBL_NAME.key -> \\"hoodie_test\\"\\n)\\n\\ndef getAsyncClusteringOpts(isAsyncClustering: String, \\n                           clusteringNumCommit: String, \\n                           executionStrategy: String):Map[String, String] = {\\n   commonOpts + (DataSourceWriteOptions.ASYNC_CLUSTERING_ENABLE.key -> isAsyncClustering,\\n           HoodieClusteringConfig.ASYNC_CLUSTERING_MAX_COMMITS.key -> clusteringNumCommit,\\n           HoodieClusteringConfig.EXECUTION_STRATEGY_CLASS_NAME.key -> executionStrategy\\n   )\\n}\\n\\ndef initStreamingWriteFuture(hudiOptions: Map[String, String]): Future[Unit] = {\\n   val streamingInput = // define the source of streaming\\n   Future {\\n      println(\\"streaming starting\\")\\n      streamingInput\\n              .writeStream\\n              .format(\\"org.apache.hudi\\")\\n              .options(hudiOptions)\\n              .option(\\"checkpointLocation\\", basePath + \\"/checkpoint\\")\\n              .mode(Append)\\n              .start()\\n              .awaitTermination(10000)\\n      println(\\"streaming ends\\")\\n   }\\n}\\n\\ndef structuredStreamingWithClustering(): Unit = {\\n   val df = //generate data frame\\n   val hudiOptions = getClusteringOpts(\\"true\\", \\"1\\", \\"org.apache.hudi.client.clustering.run.strategy.SparkSortAndSizeExecutionStrategy\\")\\n   val f1 = initStreamingWriteFuture(hudiOptions)\\n   Await.result(f1, Duration.Inf)\\n}\\n```\\n\\n## Conclusion and Future Work\\n\\nIn this post, we discussed different clustering strategies and how to setup asynchronous clustering. The story is not\\nover yet and future work entails:\\n\\n- Support clustering with updates.\\n- CLI tools to support clustering.\\n\\nPlease follow this [JIRA](https://issues.apache.org/jira/browse/HUDI-1042) to learn more about active development on\\nthis issue. We look forward to contributions from the community. Hope you enjoyed this post. Put your Hudi on and keep\\nstreaming!"},{"id":"/2021/08/23/s3-events-source","metadata":{"permalink":"/cn/blog/2021/08/23/s3-events-source","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-08-23-s3-events-source.md","source":"@site/blog/2021-08-23-s3-events-source.md","title":"Reliable ingestion from AWS S3 using Hudi","description":"In this post we will talk about a new deltastreamer source which reliably and efficiently processes new data files as they arrive in AWS S3.","date":"2021-08-23T00:00:00.000Z","formattedDate":"August 23, 2021","tags":[{"label":"design","permalink":"/cn/blog/tags/design"},{"label":"deltastreamer","permalink":"/cn/blog/tags/deltastreamer"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":5.53,"truncated":true,"authors":[{"name":"codope"}],"prevItem":{"title":"Asynchronous Clustering using Hudi","permalink":"/cn/blog/2021/08/23/async-clustering"},"nextItem":{"title":"Improving Marker Mechanism in Apache Hudi","permalink":"/cn/blog/2021/08/18/improving-marker-mechanism"}},"content":"In this post we will talk about a new deltastreamer source which reliably and efficiently processes new data files as they arrive in AWS S3.\\nAs of today, to ingest data from S3 into Hudi, users leverage DFS source whose [path selector](https://github.com/apache/hudi/blob/178767948e906f673d6d4a357c65c11bc574f619/hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/helpers/DFSPathSelector.java) would identify the source files modified since the last checkpoint based on max modification time. \\nThe problem with this approach is that modification time precision is upto seconds in S3. It maybe possible that there were many files (beyond what the configurable source limit allows) modifed in that second and some files might be skipped. \\nFor more details, please refer to [HUDI-1723](https://issues.apache.org/jira/browse/HUDI-1723). \\nWhile the workaround is to ignore the source limit and keep reading, the problem motivated us to redesign so that users can reliably ingest from S3.\\n\\n\x3c!--truncate--\x3e\\n\\n## Design\\n\\nFor use-cases where seconds granularity does not suffice, we have a new source in deltastreamer using log-based approach. \\nThe new [S3 events source](https://github.com/apache/hudi/blob/178767948e906f673d6d4a357c65c11bc574f619/hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/S3EventsSource.java) relies on change notification and incremental processing to ingest from S3. \\nThe architecture is as shown in the figure below.\\n\\n![Different components in the design](/assets/images/blog/s3_events_source_design.png)\\n\\nIn this approach, users need to [enable S3 event notifications](https://docs.aws.amazon.com/AmazonS3/latest/userguide/NotificationHowTo.html). \\nThere will be two types of deltastreamers as detailed below. \\n\\n1. [S3EventsSource](https://github.com/apache/hudi/blob/178767948e906f673d6d4a357c65c11bc574f619/hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/S3EventsSource.java): Create Hudi S3 metadata table.\\nThis source leverages AWS [SNS](https://aws.amazon.com/sns) and [SQS](https://aws.amazon.com/sqs/) services that subscribe to file events from the source bucket.\\n    - Events from SQS will be written to this table, which serves as a changelog for the subsequent incremental puller.\\n    - When the events are committed to the S3 metadata table they will be deleted from SQS.\\n3. [S3EventsHoodieIncrSource](https://github.com/apache/hudi/blob/178767948e906f673d6d4a357c65c11bc574f619/hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/S3EventsHoodieIncrSource.java) and uses the metadata table written by S3EventsSource.\\n    - Read the S3 metadata table and get the objects that were added or modified. These objects contain the S3 path for the source files that were added or modified.\\n    - Write to Hudi table with source data corresponding to the source files in the S3 bucket.\\n\\n## Advantages\\n\\n- **Decoupling**: Every step in the pipeline is decoupled. The two sources can be started independent of each other. We imagine most users run a single deltastreamer to get all changes for a given bucket and can fan-out multiple tables off that.\\n- **Performance and Scale**: The previous approach used to list all files, sort by modification time and then filter based on checkpoint. While it did prune partition paths, the directory listing could still become a bottleneck. By relying on change notification and native cloud APIs, the new approach avoids directory listing and scales with the number of files being ingested.\\n- **Reliability**: Since there is no longer any dependency on the max modification time and the fact that S3 events are being recorded in the metadata table, users can rest assured that all the events will be processed eventually.\\n- **Fault Tolerance**: There are two levels of fault toerance in this design. Firstly, if some of the messages are not committed to the S3 metadata table, then those messages will remain in the queue so that they can be reprocessed in the next round. Secondly, if the incremental puller fails, then users can query the S3 metadata table for the last commit point and resume the incremental puller from that point onwards (kinda like how Kafka consumers can reset offset).\\n- **Asynchronous backfills**: With the log-based approach, it becomes much easier to trigger backfills. See the \\"Conclusion and Future Work\\" section for more details.\\n\\n## Configuration and Setup\\n\\nUsers only need to specify the SQS queue url and region name to start the S3EventsSource (metadata source).\\n\\n```\\nhoodie.deltastreamer.s3.source.queue.url=https://sqs.us-west-2.amazonaws.com/queue/url\\nhoodie.deltastreamer.s3.source.queue.region=us-west-2\\n```\\n\\nThere are a few other configurations for the metadata source which can be tuned to suit specific requirements:\\n\\n- *`hoodie.deltastreamer.s3.source.queue.long.poll.wait`*: Value can range in [0, 20] seconds. If set to 0 then metadata source will consume messages from SQS using short polling. It is recommended to use long polling because it will reduce false empty responses and reduce the cost of using SQS. By default, this value is set to 20 seconds.\\n- *`hoodie.deltastreamer.s3.source.queue.visibility.timeout`*: Value can range in [0, 43200] seconds (i.e. max 12 hours). SQS does not automatically delete the messages once consumed. It is the responsibility of metadata source to delete the message after committing. SQS will move the consumed message to in-flight state during which it becomes invisible for the configured timeout period. By default, this value is set to 30 seconds.\\n- *`hoodie.deltastreamer.s3.source.queue.max.messages.per.batch`*: Maximum number of messages in a batch of one round of metadata source run. By default, this value is set to 5.\\n\\nTo setup the pipeline, first [enable S3 event notifications](https://docs.aws.amazon.com/AmazonS3/latest/userguide/NotificationHowTo.html). \\nDownload the [aws-java-sdk-sqs](https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-sqs) jar. \\nThen start the S3EventsSource and  S3EventsHoodieIncrSource using the HoodieDeltaStreamer utility as shown in sample commands below.\\n\\n```bash\\n# To start S3EventsSource\\nspark-submit \\\\\\n--jars \\"/home/hadoop/hudi-utilities-bundle_2.11-0.9.0.jar,/usr/lib/spark/external/lib/spark-avro.jar,/home/hadoop/aws-java-sdk-sqs-1.12.22.jar\\" \\\\\\n--master yarn --deploy-mode client \\\\\\n--class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer /home/hadoop/hudi-packages/hudi-utilities-bundle_2.11-0.9.0-SNAPSHOT.jar \\\\\\n--table-type COPY_ON_WRITE --source-ordering-field eventTime \\\\\\n--target-base-path s3://bucket_name/path/for/s3_meta_table \\\\\\n--target-table s3_meta_table  --continuous \\\\\\n--min-sync-interval-seconds 10 \\\\\\n--hoodie-conf hoodie.datasource.write.recordkey.field=\\"s3.object.key,eventName\\" \\\\\\n--hoodie-conf hoodie.datasource.write.keygenerator.class=org.apache.hudi.keygen.ComplexKeyGenerator \\\\\\n--hoodie-conf hoodie.datasource.write.partitionpath.field=s3.bucket.name --enable-hive-sync \\\\\\n--hoodie-conf hoodie.datasource.hive_sync.partition_extractor_class=org.apache.hudi.hive.MultiPartKeysValueExtractor \\\\\\n--hoodie-conf hoodie.datasource.write.hive_style_partitioning=true \\\\\\n--hoodie-conf hoodie.datasource.hive_sync.database=default \\\\\\n--hoodie-conf hoodie.datasource.hive_sync.table=s3_meta_table \\\\\\n--hoodie-conf hoodie.datasource.hive_sync.partition_fields=bucket \\\\\\n--source-class org.apache.hudi.utilities.sources.S3EventsSource \\\\\\n--hoodie-conf hoodie.deltastreamer.s3.source.queue.url=https://sqs.us-west-2.amazonaws.com/queue/url\\n--hoodie-conf hoodie.deltastreamer.s3.source.queue.region=us-west-2\\n\\n# To start S3EventsHoodieIncrSource use following command along with ordering field, record key(s) and \\n# partition field(s) from the source s3 data.\\nspark-submit \\\\\\n--jars \\"/home/hadoop/hudi-utilities-bundle_2.11-0.9.0.jar,/usr/lib/spark/external/lib/spark-avro.jar,/home/hadoop/aws-java-sdk-sqs-1.12.22.jar\\" \\\\\\n--master yarn --deploy-mode client \\\\\\n--class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer /home/hadoop/hudi-packages/hudi-utilities-bundle_2.11-0.9.0-SNAPSHOT.jar \\\\\\n--table-type COPY_ON_WRITE \\\\\\n--source-ordering-field <ordering key from source data> --target-base-path s3://bucket_name/path/for/s3_hudi_table \\\\\\n--target-table s3_hudi_table  --continuous --min-sync-interval-seconds 10 \\\\\\n--hoodie-conf hoodie.datasource.write.recordkey.field=\\"<record key from source data>\\" \\\\\\n--hoodie-conf hoodie.datasource.write.keygenerator.class=org.apache.hudi.keygen.SimpleKeyGenerator \\\\\\n--hoodie-conf hoodie.datasource.write.partitionpath.field=<partition key from source data> --enable-hive-sync \\\\\\n--hoodie-conf hoodie.datasource.hive_sync.partition_extractor_class=org.apache.hudi.hive.MultiPartKeysValueExtractor \\\\\\n--hoodie-conf hoodie.datasource.write.hive_style_partitioning=true \\\\\\n--hoodie-conf hoodie.datasource.hive_sync.database=default \\\\\\n--hoodie-conf hoodie.datasource.hive_sync.table=s3_hudi_v6 \\\\\\n--hoodie-conf hoodie.datasource.hive_sync.partition_fields=bucket \\\\\\n--source-class org.apache.hudi.utilities.sources.S3EventsHoodieIncrSource \\\\\\n--hoodie-conf hoodie.deltastreamer.source.hoodieincr.path=s3://bucket_name/path/for/s3_meta_table \\\\\\n--hoodie-conf hoodie.deltastreamer.source.hoodieincr.read_latest_on_missing_ckpt=true\\n```\\n\\n## Conclusion and Future Work\\n\\nThis post introduced a log-based approach to ingest data from S3 into Hudi tables reliably and efficiently. We are actively improving this along the following directions.\\n\\n- One stream of work is to add support for other cloud-based object storage like Google Cloud Storage, Azure Blob Storage, etc. with this revamped design.\\n- Another stream of work is to add resource manager that allows users to setup notifications and delete resources when no longer needed.\\n- Another interesting piece of work is to support **asynchronous backfills**. Notification systems are evntually consistent and typically do not guarantee perfect delivery of all files right away. The log-based approach provides enough flexibility to trigger automatic backfills at a configurable interval e.g. once a day or once a week.\\n\\nPlease follow this [JIRA](https://issues.apache.org/jira/browse/HUDI-1896) to learn more about active development on this issue. \\nWe look forward to contributions from the community. Hope you enjoyed this post. \\n\\nPut your Hudi on and keep streaming!"},{"id":"/2021/08/18/improving-marker-mechanism","metadata":{"permalink":"/cn/blog/2021/08/18/improving-marker-mechanism","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-08-18-improving-marker-mechanism.md","source":"@site/blog/2021-08-18-improving-marker-mechanism.md","title":"Improving Marker Mechanism in Apache Hudi","description":"Hudi supports fully automatic cleanup of uncommitted data on storage during its write operations. Write operations in an Apache Hudi table use markers to efficiently track the data files written to storage. In this blog, we dive into the design of the existing direct marker file mechanism and explain its performance problems on cloud storage like AWS S3 for","date":"2021-08-18T00:00:00.000Z","formattedDate":"August 18, 2021","tags":[{"label":"design","permalink":"/cn/blog/tags/design"},{"label":"timeline-server","permalink":"/cn/blog/tags/timeline-server"},{"label":"markers","permalink":"/cn/blog/tags/markers"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":8.605,"truncated":true,"authors":[{"name":"yihua"}],"prevItem":{"title":"Reliable ingestion from AWS S3 using Hudi","permalink":"/cn/blog/2021/08/23/s3-events-source"},"nextItem":{"title":"Adding support for Virtual Keys in Hudi","permalink":"/cn/blog/2021/08/18/virtual-keys"}},"content":"Hudi supports fully automatic cleanup of uncommitted data on storage during its write operations. Write operations in an Apache Hudi table use markers to efficiently track the data files written to storage. In this blog, we dive into the design of the existing direct marker file mechanism and explain its performance problems on cloud storage like AWS S3 for \\nvery large writes. We demonstrate how we improve write performance with introduction of timeline-server-based markers.\\n\\n\x3c!--truncate--\x3e\\n\\n## Need for Markers during Write Operations\\n \\nA **marker** in Hudi, such as a marker file with a unique filename, is a label to indicate that a corresponding data file exists in storage, which then Hudi\\nuses to automatically clean up uncommitted data during failure and rollback scenarios. Each marker entry is composed of three parts, the data file name, \\nthe marker extension (`.marker`), and the I/O operation created the file (`CREATE` - inserts, `MERGE` - updates/deletes, or `APPEND` - either). For example, the marker `91245ce3-bb82-4f9f-969e-343364159174-0_140-579-0_20210820173605.parquet.marker.CREATE` indicates \\nthat the corresponding data file is `91245ce3-bb82-4f9f-969e-343364159174-0_140-579-0_20210820173605.parquet` and the I/O type is `CREATE`. Hudi creates a marker before creating the corresponding data file in the file system and deletes all markers pertaining to a commit when it succeeds.\\n\\nThe markers are useful for efficiently carrying out different operations by the write client.  Markers serve as a way to track data files of interest rather than scanning the whole Hudi table by listing all files in the table.  Two important operations use markers which come in handy to find uncommitted data files of interest efficiently:\\n  - **Removing duplicate/partial data files**: in Spark, the Hudi write client delegates the data file writing to multiple executors.  One executor can fail the task, leaving partial data files written, and Spark retries the task in this case until it succeeds. When speculative execution is enabled, there can also be multiple successful attempts at writing out the same data into different files, only one of which is finally handed to the Spark driver process for committing. The markers help efficiently identify the partial data files written, which contain duplicate data compared to the data files written by the successful trial later, and these duplicate data files are cleaned up when the commit is finalized.  If there are no such marker to track the per-commit data files, we have to list all files in the file system, correlate that with the files seen in timeline and then delete the ones that belong to partial write failures.  As you could imagine, this would be very costly in a very large installation of a datalake.\\n  \\n  - **Rolling back failed commits**: the write operation can fail in the middle, leaving some data files written in storage.  In this case, the marker entries stay in storage as the commit is failed.  In the next write operation, the write client rolls back the failed commit before proceeding with the new write. The rollback is done with the help of markers to identify the data files written as part of the failed commit.\\n\\nNext, we dive into the existing marker mechanism, explain its performance problem, and demonstrate the new timeline-server-based marker mechanism to address the problem.\\n\\n## Existing Direct Marker Mechanism and its limitations\\n\\nThe **existing marker mechanism** simply creates a new marker file corresponding to each data file, with the marker filename as described above.  The marker file does not have any content, i.e., empty.  Each marker file is written to storage in the same directory hierarchy, i.e., commit instant and partition path, under a temporary folder `.hoodie/.temp` under the base path of the Hudi table.  For example, the figure below shows one example of the marker files created and the corresponding data files when writing data to the Hudi table.  When getting or deleting all the marker file paths, the mechanism first lists all the paths under the temporary folder, `.hoodie/.temp/<commit_instant>`, and then does the operation.\\n\\n![An example of marker and data files in direct marker file mechanism](/assets/images/blog/marker-mechanism/direct-marker-file-mechanism.png)\\n\\nWhile it\'s much efficient over scanning the entire table for uncommitted data files, as the number of data files to write increases, so does the number of marker files to create.  For large writes which need to write significant number of data files, e.g., 10K or more, this can create performance bottlenecks for cloud storage such as AWS S3.  In AWS S3, each file create and delete call triggers an HTTP request and there is [rate-limiting](https://docs.aws.amazon.com/AmazonS3/latest/userguide/optimizing-performance.html) on how many requests can be processed per second per prefix in a bucket.  When the number of data files to write concurrently and the number of marker files is huge, the marker file operations could take up non-trivial time during the write operation, sometimes on the order of a few minutes or more.  Users may barely notice this on a storage like HDFS, where the file system metadata is efficiently cached in memory.\\n\\n## Timeline-server-based marker mechanism improving write performance\\n\\nTo address the performance bottleneck due to rate-limiting of AWS S3 explained above, we introduce a **new marker mechanism leveraging the timeline server**, which optimizes the marker-related latency for storage with non-trivial file I/O latency.  The **timeline server** in Hudi serves as a centralized place for providing the file system and timeline views. As shown below, the new timeline-server-based marker mechanism delegates the marker creation and other marker-related operations from individual executors to the timeline server for centralized processing.  The timeline server batches the marker creation requests and writes the markers to a bounded set of files in the file system at regular intervals.  In such a way, the number of actual file operations and latency related to markers can be significantly reduced even with a huge number of data files, thus improving the performance of the writes.\\n\\n![Timeline-server-based marker mechanism](/assets/images/blog/marker-mechanism/timeline-server-based-marker-mechanism.png)\\n\\nTo improve the efficiency of processing marker creation requests, we design the batched handling of marker requests at the timeline server. Each marker creation request is handled asynchronously in the Javalin timeline server and queued before processing. For every batch interval, e.g., 20ms, the timeline server pulls the pending marker creation requests from the queue and writes all markers to the next file in a round robin fashion.  Inside the timeline server, such batch processing is multi-threaded, designed and implemented to guarantee consistency and correctness.  Both the batch interval and the batch concurrency can be configured through the write options.\\n\\n![Batched processing of marker creation requests](/assets/images/blog/marker-mechanism/batched-marker-creation.png)\\n\\n\\nNote that the worker thread always checks whether the marker has already been created by comparing the marker name from the request with the memory copy of all markers maintained at the timeline server. The underlying files storing the markers are only read upon the first marker request (lazy loading).  The responses of requests are only sent back once the new markers are flushed to the files, so that in the case of the timeline server failure, the timeline server can recover the already created markers. These ensure consistency between storage and the in-memory copy, and improve the performance of processing marker requests.\\n\\n## Marker-related write options\\n\\nWe introduce the following new marker-related write options in `0.9.0` release, to configure the marker mechanism.  Note that the timeline-server-based marker mechanism is not yet supported for HDFS in `0.9.0` release, and we plan to support the timeline-server-based marker mechanism for HDFS in the future.\\n\\n| Property Name |   Default   |     Meaning    |        \\n| ------------- | ----------- | :-------------:| \\n| `hoodie.write.markers.type`     | direct | Marker type to use.  Two modes are supported: (1) `direct`: individual marker file corresponding to each data file is directly created by the executor; (2) `timeline_server_based`: marker operations are all handled at the timeline service which serves as a proxy.  New marker entries are batch processed and stored in a limited number of underlying files for efficiency. |\\n| `hoodie.markers.timeline_server_based.batch.num_threads`     | 20 | Number of threads to use for batch processing marker creation requests at the timeline server. | \\n| `hoodie.markers.timeline_server_based.batch.interval_ms` | 50 | The batch interval in milliseconds for marker creation batch processing. |\\n\\n## Performance\\n\\nWe evaluate the write performance over both direct and timeline-server-based marker mechanisms by bulk-inserting a large dataset using Amazon EMR with Spark and S3. The input data is around 100GB.  We configure the write operation to generate a large number of data files concurrently by setting the max parquet file size to be 1MB and parallelism to be 240.  Note that it is unlikely to set max parquet file size to 1MB in production and such a setup is only to evaluate the performance regarding the marker mechanisms. As we noted before, while the latency of direct marker mechanism is acceptable for incremental writes with smaller number of data files written, it increases dramatically for large bulk inserts/writes which produce much more data files.\\n\\nAs shown below, direct marker mechanism works really well, when a part of the table is written, e.g., 1K out of 165K data files.  However, the time of direct marker operations is non-trivial when we need to write significant number of data files. Compared to the direct marker mechanism, the timeline-server-based marker mechanism generates much fewer files storing markers because of the batch processing, leading to much less time on marker-related I/O operations, thus achieving 31% lower write completion time compared to the direct marker file mechanism.\\n\\n| Marker Type | Total Files |  Num data files written | Files created for markers | Marker deletion time | Bulk Insert Time (including marker deletion) |\\n| ----------- |-----------| :---------: | :---------: | :---------: | :---------: | \\n| Direct | 165k | 1k | 1k | 5.4secs | - |\\n| Direct | 165k | 165k | 165k | 15min | 55min |\\n| Timeline-server-based | 165k | 165k | 20 | ~3s | 38min |\\n\\n## Conclusion\\n\\nWe identify that for large writes which need to write significant number of data files, the existing direct marker file mechanism can incur performance bottlenecks due to the rate-limiting of file create and delete calls on cloud storage like AWS S3.  To address this issue, we introduce a new marker mechanism leveraging the timeline server, which delegates the marker creation and other marker-related operations from individual executors to the timeline server and uses batch processing to improve performance.  Performance evaluations on Amazon EMR with Spark and S3 show that the marker-related I/O latency and overall write time are reduced."},{"id":"/2021/08/18/virtual-keys","metadata":{"permalink":"/cn/blog/2021/08/18/virtual-keys","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-08-18-virtual-keys.md","source":"@site/blog/2021-08-18-virtual-keys.md","title":"Adding support for Virtual Keys in Hudi","description":"Apache Hudi helps you build and manage data lakes with different table types, config knobs to cater to everyone\'s need.","date":"2021-08-18T00:00:00.000Z","formattedDate":"August 18, 2021","tags":[{"label":"design","permalink":"/cn/blog/tags/design"},{"label":"metadata","permalink":"/cn/blog/tags/metadata"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":4.95,"truncated":true,"authors":[{"name":"shivnarayan"}],"prevItem":{"title":"Improving Marker Mechanism in Apache Hudi","permalink":"/cn/blog/2021/08/18/improving-marker-mechanism"},"nextItem":{"title":"Schema evolution with DeltaStreamer using KafkaSource","permalink":"/cn/blog/2021/08/16/kafka-custom-deserializer"}},"content":"Apache Hudi helps you build and manage data lakes with different table types, config knobs to cater to everyone\'s need.\\nHudi adds per record metadata fields like `_hoodie_record_key`, `_hoodie_partition path`, `_hoodie_commit_time` which serves multiple purposes. \\nThey assist in avoiding re-computing the record key, partition path during merges, compaction and other table operations \\nand also assists in supporting [record-level](/blog/2021/07/21/streaming-data-lake-platform#readers) incremental queries (in comparison to other table formats, that merely track files).\\nIn addition, it ensures data quality by ensuring unique key constraints are enforced even if the key field changes for a given table, during its lifetime.\\nBut one of the repeated asks from the community is to leverage existing fields and not to add additional meta fields, for simple use-cases where such benefits are not desired or key changes are very rare.  \\n\x3c!--truncate--\x3e\\n\\n## Virtual Key support\\nHudi now supports virtual keys, where Hudi meta fields can be computed on demand from the data fields. Currently, the meta fields are \\ncomputed once and stored as per record metadata and re-used across various operations. If one does not need incremental query support, \\nthey can start leveraging Hudi\'s Virtual key support and still go about using Hudi to build and manage their data lake to reduce the storage \\noverhead due to per record metadata. \\n\\n### Configurations\\nVirtual keys can be enabled for a given table using the below config. When set to `hoodie.populate.meta.fields=false`, \\nHudi will use virtual keys for the corresponding table. Default value for this config is `true`, which means, all  meta fields will be added by default.\\n\\nOnce virtual keys are enabled, it can\'t be disabled for a given hudi table, because already stored records may not have \\nthe meta fields populated. But if you have an existing table from an older version of hudi, virtual keys can be enabled. \\nAnother constraint w.r.t virtual key support is that, Key generator properties for a given table cannot be changed through\\nthe course of the lifecycle of a given hudi table. In this model, the user also shares responsibility of ensuring uniqueness \\nof key within a table. For instance, if you configure record key to point to `field_5` for few batches of write and later switch to `field_10`, \\nHudi cannot guarantee uniqueness of key, since older writes could have had duplicates for `field_10`. \\n\\nWith virtual keys, keys will have to be re-computed everytime when in need (merges, compaction, MOR snapshot read). Hence we \\nsupport virtual keys for all built-in key generators on Copy-On-Write tables. Supporting all key generators on Merge-On-Read table \\nwould entail reading all fields out of base and delta logs, sacrificing core columnar query performance, which will be prohibitively expensive \\nfor users. Thus, we support only simple key generators (the default key generator, where both record key and partition path refer\\nto an existing field ) for now.\\n\\n#### Supported Key Generators with CopyOnWrite(COW) table:\\nSimpleKeyGenerator, ComplexKeyGenerator, CustomKeyGenerator, TimestampBasedKeyGenerator and NonpartitionedKeyGenerator. \\n\\n#### Supported Key Generators with MergeOnRead(MOR) table:\\nSimpleKeyGenerator\\n\\n#### Supported Index types: \\nOnly \\"SIMPLE\\" and \\"GLOBAL_SIMPLE\\" index types are supported in the first cut. We plan to add support for other index \\n(BLOOM, etc) in future releases. \\n\\n### Supported Operations\\nAll existing features are supported for a hudi table with virtual keys, except the incremental \\nqueries. Which means, cleaning, archiving, metadata table, clustering, etc can be enabled for a hudi table with \\nvirtual keys enabled. So, you are able to merely use Hudi as a transactional table format with all the awesome \\ntable service runtimes and platform services, if you wish to do so, without incurring any overheads associated with \\nsupport for incremental data processing.\\n\\n### Sample Output\\nAs called out earlier, one has to set `hoodie.populate.meta.fields=false` to enable virtual keys. Let\'s see the \\ndifference between records of a hudi table with and without virtual keys.\\n\\nHere are some sample records for a regular hudi table (virtual keys disabled)\\n\\n```\\n+--------------------+--------------------------------------+--------------------------------------+---------+---------+-------------------+\\n|_hoodie_commit_time |           _hoodie_record_key         |        _hoodie_partition_path        |  rider  | driver  |        fare       |\\n+--------------------+--------------------------------------+--------------------------------------+---------+---------+-------------------+\\n|   20210825154123   | eb7819f1-6f04-429d-8371-df77620b9527 | americas/united_states/san_francisco |rider-284|driver-284|98.3428192817987  |\\n|   20210825154123   | 37ea44f1-fda7-4ec4-84de-f43f5b5a4d84 | americas/united_states/san_francisco |rider-213|driver-213|19.179139106643607|\\n|   20210825154123   | aa601d6b-7cc5-4b82-9687-675d0081616e | americas/united_states/san_francisco |rider-213|driver-213|93.56018115236618 |\\n|   20210825154123   | 494bc080-881c-48be-8f8a-8f1739781816 | americas/united_states/san_francisco |rider-284|driver-284|90.9053809533154  |\\n|   20210825154123   | 09573277-e1c1-4cdd-9b45-57176f184d4d | americas/united_states/san_francisco |rider-284|driver-284|49.527694252432056|\\n|   20210825154123   | c9b055ed-cd28-4397-9704-93da8b2e601f | americas/brazil/sao_paulo            |rider-213|driver-213|43.4923811219014  |\\n|   20210825154123   | e707355a-b8c0-432d-a80f-723b93dc13a8 | americas/brazil/sao_paulo            |rider-284|driver-284|63.72504913279929 |\\n|   20210825154123   | d3c39c9e-d128-497a-bf3e-368882f45c28 | americas/brazil/sao_paulo            |rider-284|driver-284|91.99515909032544 |\\n|   20210825154123   | 159441b0-545b-460a-b671-7cc2d509f47b | asia/india/chennai                   |rider-284|driver-284|9.384124531808036 |\\n|   20210825154123   | 16031faf-ad8d-4968-90ff-16cead211d3c | asia/india/chennai                   |rider-284|driver-284|90.25710109008239 |\\n+--------------------+--------------------------------------+--------------------------------------+---------+----------+------------------+\\n```\\n\\nAnd here are some sample records for a hudi table with virtual keys enabled.\\n\\n```\\n+--------------------+------------------------+-------------------------+---------+---------+-------------------+\\n|_hoodie_commit_time |    _hoodie_record_key  |  _hoodie_partition_path |  rider  | driver  |        fare       |\\n+--------------------+------------------------+-------------------------+---------+---------+-------------------+\\n|        null        |            null        |          null           |rider-284|driver-284|98.3428192817987  |\\n|        null        |            null        |          null           |rider-213|driver-213|19.179139106643607|\\n|        null        |            null        |          null           |rider-213|driver-213|93.56018115236618 |\\n|        null        |            null        |          null           |rider-284|driver-284|90.9053809533154  |\\n|        null        |            null        |          null           |rider-284|driver-284|49.527694252432056|\\n|        null        |            null        |          null           |rider-213|driver-213|43.4923811219014  |\\n|        null        |            null        |          null           |rider-284|driver-284|63.72504913279929 |\\n|        null        |            null        |          null           |rider-284|driver-284|91.99515909032544 |\\n|        null        |            null        |          null           |rider-284|driver-284|9.384124531808036 |\\n|        null        |            null        |          null           |rider-284|driver-284|90.25710109008239 |\\n+--------------------+------------------------+-------------------------+---------+----------+------------------+\\n```\\n\\n:::note\\nAs you could see, all meta fields are null in storage, but all users fields remain intact similar to a regular table.\\n:::\\n\\n### Incremental Queries\\nSince hudi does not maintain any metadata (like commit time at a record level) for a table with virtual keys enabled,  \\nincremental queries are not supported. An exception will be thrown as below when an incremental query is triggered for such\\na table.\\n\\n```\\nscala> val tripsIncrementalDF = spark.read.format(\\"hudi\\").\\n     |   option(QUERY_TYPE_OPT_KEY, QUERY_TYPE_INCREMENTAL_OPT_VAL).\\n     |   option(BEGIN_INSTANTTIME_OPT_KEY, \\"20210827180901\\").load(basePath)\\norg.apache.hudi.exception.HoodieException: Incremental queries are not supported when meta fields are disabled\\n  at org.apache.hudi.IncrementalRelation.<init>(IncrementalRelation.scala:69)\\n  at org.apache.hudi.DefaultSource.createRelation(DefaultSource.scala:120)\\n  at org.apache.hudi.DefaultSource.createRelation(DefaultSource.scala:67)\\n  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:344)\\n  at org.apache.spark.sql.DataFrameReader.loadV1Source(DataFrameReader.scala:297)\\n  at org.apache.spark.sql.DataFrameReader.$anonfun$load$2(DataFrameReader.scala:286)\\n  at scala.Option.getOrElse(Option.scala:189)\\n  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:286)\\n  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:232)\\n  ... 61 elided\\n```\\n\\n### Conclusion \\nHope this blog was useful for you to learn yet another feature in Apache Hudi. If you are interested in \\nHudi and looking to contribute, do check out [here](https://hudi.apache.org/contribute/get-involved)."},{"id":"/2021/08/16/kafka-custom-deserializer","metadata":{"permalink":"/cn/blog/2021/08/16/kafka-custom-deserializer","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-08-16-kafka-custom-deserializer.md","source":"@site/blog/2021-08-16-kafka-custom-deserializer.md","title":"Schema evolution with DeltaStreamer using KafkaSource","description":"The schema used for data exchange between services can change rapidly with new business requirements.","date":"2021-08-16T00:00:00.000Z","formattedDate":"August 16, 2021","tags":[{"label":"design","permalink":"/cn/blog/tags/design"},{"label":"deltastreamer","permalink":"/cn/blog/tags/deltastreamer"},{"label":"schema","permalink":"/cn/blog/tags/schema"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"},{"label":"apache kafka","permalink":"/cn/blog/tags/apache-kafka"}],"readingTime":3.155,"truncated":true,"authors":[{"name":"sbernauer"}],"prevItem":{"title":"Adding support for Virtual Keys in Hudi","permalink":"/cn/blog/2021/08/18/virtual-keys"},"nextItem":{"title":"Cost-Efficient Open Source Big Data Platform at Uber","permalink":"/cn/blog/2021/08/11/Cost-Efficient-Open-Source-Big-Data-Platform-at-Uber"}},"content":"The schema used for data exchange between services can change rapidly with new business requirements.\\nApache Hudi is often used in combination with kafka as a event stream where all events are transmitted according to a record schema.\\nIn our case a Confluent schema registry is used to maintain the schema and as schema evolves, newer versions are updated in the schema registry.\\n\x3c!--truncate--\x3e\\n\\n## What do we want to achieve?\\nWe have multiple instances of DeltaStreamer running, consuming many topics with different schemas ingesting to multiple Hudi tables. Deltastreamer is a utility in Hudi to assist in ingesting data from multiple sources like DFS, kafka, etc into Hudi. If interested, you can read more about DeltaStreamer tool [here](https://hudi.apache.org/docs/writing_data#deltastreamer)\\nIdeally every topic should be able to evolve the schema to match new business requirements. Producers start producing data with a new schema version and the DeltaStreamer picks up the new schema and ingests the data with the new schema. For this to work, we run our DeltaStreamer instances with the latest schema version available from the Schema Registry to ensure that we always use the freshest schema with all attributes.\\nA prerequisites is that all the mentioned Schema evolutions must be `BACKWARD_TRANSITIVE` compatible (see [Schema Evolution and Compatibility of Avro Schema changes](https://docs.confluent.io/platform/current/schema-registry/avro.html). This ensures that every record in the kafka topic can always be read using the latest schema.\\n\\n\\n## What is the problem?\\nThe normal operation looks like this. Multiple (or a single) producers write records to the kafka topic.\\nIn regular flow of events, all records are in the same schema v1 and is in sync with schema registry.\\n![Normal operation](/assets/images/blog/kafka-custom-deserializer/normal_operation.png)<br/>\\nThings get complicated when a producer switches to a new Writer-Schema v2 (in this case `Producer A`). `Producer B` remains on Schema v1. E.g. an attribute `myattribute` was added to the schema, resulting in schema version v2.\\nDeltastreamer is capable of handling such schema evolution, if all incoming records were evolved and serialized with evolved schema. But the complication is that, some records are serialized with schema version v1 and some are serialized with schema version v2.\\n\\n![Schema evolution](/assets/images/blog/kafka-custom-deserializer/schema_evolution.png)<br/>\\nThe default deserializer used by Hudi `io.confluent.kafka.serializers.KafkaAvroDeserializer` uses the schema that the record was serialized with for deserialization. This causes Hudi to get records with multiple different schema from the kafka client. E.g. Event #13 has the new attribute `myattribute`, Event #14 does not have the new attribute `myattribute`. This makes things complicated and error-prone for Hudi.\\n\\n![Confluent Deserializer](/assets/images/blog/kafka-custom-deserializer/confluent_deserializer.png)<br/>\\n\\n## Solution\\nHudi added a new custom Deserializer `KafkaAvroSchemaDeserializer` to solve this problem of different producers producing records in different schema versions, but to use the latest schema from schema registry to deserialize all the records.<br/>\\nAs first step the Deserializer gets the latest schema from the Hudi SchemaProvider. The SchemaProvider can get the schema for example from a Confluent Schema-Registry or a file.\\nThe Deserializer then reads the records from the topic using the schema the record was written with. As next step it will convert all the records to the latest schema from the SchemaProvider, in our case the latest schema. As a result, the kafka client will return all records with a unified schema i.e. the latest schema as per schema registry. Hudi does not need to handle different schemas inside a single batch.\\n\\n![KafkaAvroSchemaDeserializer](/assets/images/blog/kafka-custom-deserializer/KafkaAvroSchemaDeserializer.png)<br/>\\n\\n## Configurations\\nAs of upcoming release 0.9.0, normal Confluent Deserializer is used by default. One has to explicitly set KafkaAvroSchemaDeserializer as below,\\nin order to ensure smooth schema evolution with different producers producing records in different versions.\\n\\n`hoodie.deltastreamer.source.kafka.value.deserializer.class=org.apache.hudi.utilities.deser.KafkaAvroSchemaDeserializer`\\n\\n## Conclusion\\nHope this blog helps in ingesting data from kafka into Hudi using Deltastreamer tool catering to different schema evolution\\nneeds. Hudi has a very active development community and we look forward for more contributions.\\nPlease check out [this](https://hudi.apache.org/contribute/get-involved) link to start contributing."},{"id":"/2021/08/11/Cost-Efficient-Open-Source-Big-Data-Platform-at-Uber","metadata":{"permalink":"/cn/blog/2021/08/11/Cost-Efficient-Open-Source-Big-Data-Platform-at-Uber","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-08-11-Cost-Efficient-Open-Source-Big-Data-Platform-at-Uber.mdx","source":"@site/blog/2021-08-11-Cost-Efficient-Open-Source-Big-Data-Platform-at-Uber.mdx","title":"Cost-Efficient Open Source Big Data Platform at Uber","description":"Redirecting... please wait!!","date":"2021-08-11T00:00:00.000Z","formattedDate":"August 11, 2021","tags":[{"label":"cost-efficiency","permalink":"/cn/blog/tags/cost-efficiency"},{"label":"optimization","permalink":"/cn/blog/tags/optimization"},{"label":"bigdata","permalink":"/cn/blog/tags/bigdata"},{"label":"data-platform","permalink":"/cn/blog/tags/data-platform"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"uber","permalink":"/cn/blog/tags/uber"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Zheng Shao"},{"name":"Mohammad Islam"}],"prevItem":{"title":"Schema evolution with DeltaStreamer using KafkaSource","permalink":"/cn/blog/2021/08/16/kafka-custom-deserializer"},"nextItem":{"title":"MLOps Wars: Versioned Feature Data with a Lakehouse","permalink":"/cn/blog/2021/08/03/MLOps-Wars-Versioned-Feature-Data-with-a-Lakehouse"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://eng.uber.com/cost-efficient-big-data-platform/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/08/03/MLOps-Wars-Versioned-Feature-Data-with-a-Lakehouse","metadata":{"permalink":"/cn/blog/2021/08/03/MLOps-Wars-Versioned-Feature-Data-with-a-Lakehouse","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-08-03-MLOps-Wars-Versioned-Feature-Data-with-a-Lakehouse.mdx","source":"@site/blog/2021-08-03-MLOps-Wars-Versioned-Feature-Data-with-a-Lakehouse.mdx","title":"MLOps Wars: Versioned Feature Data with a Lakehouse","description":"Redirecting... please wait!!","date":"2021-08-03T00:00:00.000Z","formattedDate":"August 3, 2021","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"mlops","permalink":"/cn/blog/tags/mlops"},{"label":"feature-store","permalink":"/cn/blog/tags/feature-store"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"time-travel","permalink":"/cn/blog/tags/time-travel"},{"label":"logicalclocks","permalink":"/cn/blog/tags/logicalclocks"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"David Bzhalava"},{"name":"Jim Dowling"}],"prevItem":{"title":"Cost-Efficient Open Source Big Data Platform at Uber","permalink":"/cn/blog/2021/08/11/Cost-Efficient-Open-Source-Big-Data-Platform-at-Uber"},"nextItem":{"title":"Baixin bank\u2019s real-time data lake evolution scheme based on Apache Hudi","permalink":"/cn/blog/2021/07/26/Baixin-banksreal-time-data-lake-evolution-scheme-based-on-Apache-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.logicalclocks.com/blog/mlops-wars-versioned-feature-data-with-a-lakehouse\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/07/26/Baixin-banksreal-time-data-lake-evolution-scheme-based-on-Apache-Hudi","metadata":{"permalink":"/cn/blog/2021/07/26/Baixin-banksreal-time-data-lake-evolution-scheme-based-on-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-07-26-Baixin-banksreal-time-data-lake-evolution-scheme-based-on-Apache-Hudi.mdx","source":"@site/blog/2021-07-26-Baixin-banksreal-time-data-lake-evolution-scheme-based-on-Apache-Hudi.mdx","title":"Baixin bank\u2019s real-time data lake evolution scheme based on Apache Hudi","description":"Redirecting... please wait!!","date":"2021-07-26T00:00:00.000Z","formattedDate":"July 26, 2021","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"real-time-datalake","permalink":"/cn/blog/tags/real-time-datalake"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"developpaper","permalink":"/cn/blog/tags/developpaper"}],"readingTime":0.045,"truncated":false,"authors":[],"prevItem":{"title":"MLOps Wars: Versioned Feature Data with a Lakehouse","permalink":"/cn/blog/2021/08/03/MLOps-Wars-Versioned-Feature-Data-with-a-Lakehouse"},"nextItem":{"title":"Apache Hudi - The Data Lake Platform","permalink":"/cn/blog/2021/07/21/streaming-data-lake-platform"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://developpaper.com/baixin-banks-real-time-data-lake-evolution-scheme-based-on-apache-hudi/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/07/21/streaming-data-lake-platform","metadata":{"permalink":"/cn/blog/2021/07/21/streaming-data-lake-platform","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-07-21-streaming-data-lake-platform.md","source":"@site/blog/2021-07-21-streaming-data-lake-platform.md","title":"Apache Hudi - The Data Lake Platform","description":"As early as 2016, we set out a bold, new vision reimagining batch data processing through a new \u201cincremental\u201d data processing stack - alongside the existing batch and streaming stacks.","date":"2021-07-21T00:00:00.000Z","formattedDate":"July 21, 2021","tags":[{"label":"datalake-platform","permalink":"/cn/blog/tags/datalake-platform"},{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":28.99,"truncated":true,"authors":[{"name":"vinoth"}],"prevItem":{"title":"Baixin bank\u2019s real-time data lake evolution scheme based on Apache Hudi","permalink":"/cn/blog/2021/07/26/Baixin-banksreal-time-data-lake-evolution-scheme-based-on-Apache-Hudi"},"nextItem":{"title":"Amazon Athena expands Apache Hudi support","permalink":"/cn/blog/2021/07/16/Amazon-Athena-expands-Apache-Hudi-support"}},"content":"As early as 2016, we set out a [bold, new vision](https://www.oreilly.com/content/ubers-case-for-incremental-processing-on-hadoop/) reimagining batch data processing through a new \u201c**incremental**\u201d data processing stack - alongside the existing batch and streaming stacks. \\nWhile a stream processing pipeline does row-oriented processing, delivering a few seconds of processing latency, an incremental pipeline would apply the same principles to *columnar* data in the data lake, \\ndelivering orders of magnitude improvements in processing efficiency within few minutes, on extremely scalable batch storage/compute infrastructure. This new stack would be able to effortlessly support regular batch processing for bulk reprocessing/backfilling as well.\\nHudi was built as the manifestation of this vision, rooted in real, hard problems faced at [Uber](https://eng.uber.com/uber-big-data-platform/) and later took a life of its own in the open source community. Together, we have been able to \\nusher in fully incremental data ingestion and moderately complex ETLs on data lakes already.\\n\\n\x3c!--truncate--\x3e\\n![the different components that make up the stream and batch processing stack today, showing how an incremental stack blends the best of both the worlds.](/assets/images/blog/datalake-platform/hudi-data-lake-platform_-_Page_2_4.png)\\n\\nToday, this grand vision of being able to express almost any batch pipeline incrementally is more attainable than it ever was. Stream processing is [maturing rapidly](https://flink.apache.org/blog/) and gaining [tremendous momentum](https://www.confluent.io/blog/every-company-is-becoming-software/), \\nwith [generalization](https://flink.apache.org/2021/03/11/batch-execution-mode.html) of stream processing APIs to work over a batch execution model. Hudi completes the missing pieces of the puzzle by providing streaming optimized lake storage, \\nmuch like how Kafka/Pulsar enable efficient storage for event streaming. [Many organizations](https://hudi.apache.org/powered_by) have already reaped real benefits of adopting a streaming model for their data lakes, in terms of fresh data, simplified architecture and great cost reductions.\\n\\nBut first, we needed to tackle the basics - transactions and mutability - on the data lake. In many ways, Apache Hudi pioneered the transactional data lake movement as we know it today. Specifically, during a time when more special-purpose systems were being born, Hudi introduced a server-less, transaction layer, which worked over the general-purpose Hadoop FileSystem abstraction on Cloud Stores/HDFS. This model helped Hudi to scale writers/readers to 1000s of cores on day one, compared to warehouses which offer a richer set of transactional guarantees but are often bottlenecked by the 10s of servers that need to handle them. We also experience a lot of joy to see similar systems (Delta Lake for e.g) later adopt the same server-less transaction layer model that we originally shared way back in [early \'17](https://eng.uber.com/hoodie/). We consciously introduced two table types Copy On Write (with simpler operability) and Merge On Read (for greater flexibility) and now these terms are used in [projects](https://github.com/apache/iceberg/pull/1862) outside Hudi, to refer to similar ideas being borrowed from Hudi. Through open sourcing and [graduating](https://blogs.apache.org/foundation/entry/the-apache-software-foundation-announces64) from the Apache Incubator, we have made some great progress elevating these ideas [across the industry](http://hudi.apache.org/docs/powered_by.html), as well as bringing them to life with a cohesive software stack. Given the exciting developments in the past year or so that have propelled data lakes further mainstream, we thought some perspective can help users see Hudi with the right lens, appreciate what it stands for, and be a part of where it\u2019s headed. At this time, we also wanted to shine some light on all the great work done by [180+ contributors](https://github.com/apache/hudi/graphs/contributors) on the project, working with more than 2000 unique users over slack/github/jira, contributing all the different capabilities Hudi has gained over the past years, from its humble beginnings.\\n\\nThis is going to be a rather long post, but we will do our best to make it worth your time. Let\u2019s roll.\\n\\n## Data Lake Platform\\n\\nWe have noticed that, Hudi is sometimes positioned as a \u201c[table format](https://cloud.google.com/blog/products/data-analytics/getting-started-with-new-table-formats-on-dataproc)\u201d or \u201ctransactional layer\u201d. While this is not incorrect, this does not do full justice to all that Hudi has to offer. \\n\\n### Is Hudi a \u201cformat\u201d?\\n\\nHudi was not designed as a general purpose table format, tracking files/folders for batch processing. Rather, the functionality provided by a table format is merely one layer in the Hudi software stack. Hudi was designed to play well with the Hive format (if you will), given how popular and widespread it is. Over time, to solve scaling challenges or bring in additional functionality, we have invested in our own native table format with an eye for incremental processing vision. for e.g, we need to support shorter transactions that commit every few seconds. We believe these requirements would fully subsume challenges solved by general purpose table formats over time. But, we are also open to plugging in or syncing to other open table formats, so their users can also benefit from the rest of the Hudi stack. Unlike the file formats, a table format is merely a representation of table metadata and it\u2019s actually quite possible to translate from Hudi to other formats/vice versa if users are willing to accept the trade-offs.\\n\\n### Is Hudi a transactional layer?\\n\\nOf course, Hudi had to provide transactions for implementing deletes/updates, but Hudi\u2019s transactional layer is designed around an [event log](https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying) that is also well-integrated with an entire set of built-in table/data services. For e.g compaction is aware of clustering actions already scheduled and optimizes by skipping over the files being clustered - while the user is blissfully unaware of all this. Hudi also provides out-of-box tools for ingesting, ETLing data, and much more. We have always been thinking of Hudi as solving a database problem around stream processing - areas that are actually [very related to each other](https://www.infoq.com/presentations/streaming-databases/). In fact, Stream processing is enabled by logs (capture/emit event streams, rewind/reprocess) and databases (state stores, updatable sinks). With Hudi, the idea was that if we build a database supporting efficient updates and extracting data streams while remaining optimized for large batch queries, incremental pipelines can be built using Hudi tables as state store & update-able sinks. \\n\\nThus, the best way to describe Apache Hudi is as a **Streaming Data Lake Platform** built around a *database kernel*. The words carry significant meaning.\\n\\n![/assets/images/blog/datalake-platform/Screen_Shot_2021-07-20_at_5.35.47_PM.png](/assets/images/blog/datalake-platform/Screen_Shot_2021-07-20_at_5.35.47_PM.png)\\n\\n**Streaming**: At its core, by optimizing for fast upserts & change streams, Hudi provides the primitives to data lake workloads that are comparable to what [Apache Kafka](https://kafka.apache.org/) does for event-streaming (namely, incremental produce/consume of events and a state-store for interactive querying).\\n\\n**Data Lake**: Nonetheless, Hudi provides an optimized, self-managing data plane for large scale data processing on the lake (adhoc queries, ML pipelines, batch pipelines), powering arguably the [largest transactional lake](https://eng.uber.com/apache-hudi-graduation/) in the world. While Hudi can be used to build a [lakehouse](https://databricks.com/blog/2020/01/30/what-is-a-data-lakehouse.html), given its transactional capabilities, Hudi goes beyond and unlocks an end-to-end streaming architecture. In contrast, the word \u201cstreaming\u201d appears just 3 times in the lakehouse [paper](http://cidrdb.org/cidr2021/papers/cidr2021_paper17.pdf), and one of them is talking about Hudi.\\n\\n**Platform**: Oftentimes in open source, there is great tech, but there is just too many of them - all differing ever so slightly in their opinionated ways, ultimately making the integration task onerous on the end user. Lake users deserve the same great usability that cloud warehouses provide, with the additional freedom and transparency of a true open source community. Hudi\u2019s data and table services, tightly integrated with the Hudi \u201ckernel\u201d, gives us the ability to deliver cross layer optimizations with reliability and ease of use.\\n\\n## Hudi Stack\\n\\nThe following stack captures layers of software components that make up Hudi, with each layer depending on and drawing strength from the layer below. Typically, data lake users write data out once using an open file format like Apache [Parquet](http://parquet.apache.org/)/[ORC](https://orc.apache.org/) stored on top of extremely scalable cloud storage or distributed file systems. Hudi provides a self-managing data plane to ingest, transform and manage this data, in a way that unlocks incremental data processing on them.\\n\\n![Figure showing the Hudi stack](/assets/images/blog/datalake-platform/hudi-data-lake-platform_-_Copy_of_Page_1_3.png)\\n\\nFurthermore, Hudi either already provides or plans to add components that make this data universally accessible to all the different query engines out there. The features annotated with `*` represent work in progress and dotted boxes represent planned future work, to complete our vision for the project. \\nWhile we have strawman designs outlined for the newer components in the blog, we welcome with open arms fresh perspectives from the community.\\nRest of the blog will delve into each layer in our stack - explaining what it does, how it\'s designed for incremental processing and how it will evolve in the future.\\n\\n## Lake Storage\\n\\nHudi interacts with lake storage using the [Hadoop FileSystem API](https://hadoop.apache.org/docs/stable/api/org/apache/hadoop/fs/FileSystem.html), which makes it compatible with all of its implementations ranging from HDFS to Cloud Stores to even in-memory filesystems like [Alluxio](https://www.alluxio.io/blog/building-high-performance-data-lake-using-apache-hudi-and-alluxio-at-t3go/)/Ignite. Hudi internally implements its own [wrapper filesystem](https://github.com/apache/hudi/blob/9d2a65a6a6ff9add81411147f1cddd03f7c08e6c/hudi-common/src/main/java/org/apache/hudi/common/fs/HoodieWrapperFileSystem.java) on top to provide additional storage optimizations (e.g: file sizing), performance optimizations (e.g: buffering), and metrics. Uniquely, Hudi takes full advantage of append support, for storage schemes that support it, like HDFS. This helps Hudi deliver streaming writes without causing an explosion in file counts/table metadata. Unfortunately, most cloud/object storages do not offer append capability today (except maybe [Azure](https://azure.microsoft.com/en-us/updates/append-blob-support-in-azure-data-lake-storage-is-now-generally-available/)). In the future, we plan to leverage the lower-level APIs of major cloud object stores, to provide similar controls over file counts at streaming ingest latencies.\\n\\n## File Format\\n\\nHudi is designed around the notion of base file and delta log files that store updates/deltas to a given base file (called a file slice). Their formats are pluggable, with Parquet (columnar access) and HFile (indexed access) being the supported base file formats today. The delta logs encode data in [Avro](http://avro.apache.org/) (row oriented) format for speedier logging (just like Kafka topics for e.g). Going forward, we plan to [inline any base file format](https://github.com/apache/hudi/pull/3228) into log blocks in the coming releases, providing columnar access to delta logs depending on block sizes. Future plans also include Orc base/log file formats, unstructured data formats (free form json, images), and even tiered storage layers in event-streaming systems/OLAP engines/warehouses, work with their native file formats.\\n\\nZooming one level up, Hudi\'s unique file layout scheme encodes all changes to a given base file, as a sequence of blocks (data blocks, delete blocks, rollback blocks) that are merged in order to derive newer base files. In essence, this makes up a self contained redo log that the lets us implement interesting features on top. For e.g, most of today\'s data privacy enforcement happens by masking data read off the lake storage on-the-fly, invoking hashing/encryption algorithms over and over on the same set of records and incurring significant compute overhead/cost. Users would be able to keep multiple pre-masked/encrypted copies of the same key in the logs and hand out the correct one based on a policy, avoiding all the overhead.\\n\\n![Hudi base and delta logs](/assets/images/blog/datalake-platform/hudi-design-diagrams_-_Page_2_1.png)\\n\\n## Table Format\\n\\nThe term \u201ctable format\u201d is new and still means many things to many people. Drawing an analogy to file formats, a table format simply consists of : the file layout of the table, table\u2019s schema and metadata tracking changes to the table. Hudi is not a table format, it implements one internally. Hudi uses Avro schemas to store, manage and evolve a table\u2019s schema. Currently, Hudi enforces schema-on-write, which although stricter than schema-on-read, is adopted [widely](https://docs.confluent.io/platform/current/schema-registry/avro.html) in the stream processing world to ensure pipelines don\'t break from non backwards compatible changes.\\n\\nHudi consciously lays out files within a table/partition into groups and maintains a mapping between an incoming record\u2019s key to an existing file group. All updates are recorded into delta log files specific to a given file group and this design ensures low merge overhead compared to approaches like Hive ACID, which have to merge all delta records against all base files to satisfy queries. For e.g, with uuid keys (used very widely) all base files are very likely to overlap with all delta logs, rendering any range based pruning useless. Much like state stores, Hudi\u2019s design anticipates fast key based upserts/deletes and only requires merging delta logs within each file group. This design choice also lets Hudi provide more capabilities for writing/querying as we will explain below. \\n\\n![Shows the Hudi table format components](/assets/images/blog/datalake-platform/hudi-design-diagrams-table-format.png)\\n\\nThe *timeline* is the source-of-truth event log for all Hudi\u2019s table metadata, stored under the `.hoodie` folder, that provides an ordered log of all actions performed on the table. Events are retained on the timeline up to a configured interval of time/activity. Each file group is also designed as it\u2019s own self-contained log, which means that even if an action that affected a file group is archived from the timeline, the right state of the records in each file group can be reconstructed by simply locally applying the delta logs to the base file. This design bounds the metadata size, proportional to how often the table is being written to/operated on, independent of how large the entire table is. This is a critical design element needs for supporting frequent writes/commits to tables.\\n\\nLastly, new events on the timeline are then consumed and reflected onto an internal metadata table, implemented as another merge-on-read table offering low write amplification. Hudi is able to absorb quick/rapid changes to table\u2019s metadata, unlike table formats designed for slow-moving data. Additionally, the metadata table uses the [HFile](https://hbase.apache.org/2.0/devapidocs/org/apache/hadoop/hbase/io/hfile/HFile.html) base file format, which provides indexed lookups of keys avoiding the need for reading the entire metadata table to satisfy metadata reads. It currently stores all the physical file paths that are part of the table, to avoid expensive cloud file listings.\\n\\nA key challenge faced by all the table formats out there today, is the need for expiring snapshots/controlling retention for time travel queries such that it does not interfere with query planning/performance. In the future, we plan to build an indexed timeline in Hudi, which can span the entire history of the table, supporting a time travel look back window of several months/years.\\n\\n## Indexes\\n\\nIndexes help databases plan better queries, that reduce the overall amount of I/O and deliver faster response times. Table metadata about file listings and column statistics are often enough for lake query engines to generate optimized, engine specific query plans quickly. This is however not sufficient for Hudi to realize fast upserts. Hudi already supports different key based indexing schemes to quickly map incoming record keys into the file group they reside in. For this purpose, Hudi exposes a pluggable indexing layer to the writer implementations, with built-in support for range pruning (when keys are ordered and largely arrive in order) using interval trees and bloom filters (e.g: for uuid based keys where ordering is of very little help). Hudi also implements a HBase backed external index which is much more performant although more expensive to operate. Hudi also consciously exploits the partitioning scheme of the table to implement global and non-global indexing schemes. Users can choose to enforce key constraints only within a partition, in return for *`O(num_affected_partitions)`* upsert performance as opposed to *`O(total_partitions)`* in the global indexing scenarios. We refer you to this [blog](http://hudi.apache.org/blog/2020/11/11/hudi-indexing-mechanisms), that goes over indexing in detail. Ultimately, Hudi\'s writer path ensures the index is always kept in sync with the timeline and data, which is cumbersome and error prone to implement on top of a table format by hand.\\n\\n![/assets/images/blog/datalake-platform/hudi-design-diagrams_-_Page_5.png](/assets/images/blog/datalake-platform/hudi-design-diagrams_-_Page_5.png)\\n\\nIn the future, we intend to add additional forms of indexing as new partitions on the metadata table. Let\u2019s discuss the role\xa0 each one has to play briefly. Query engines typically rely on partitioning to cut down the number of files read for a given query. In database terms, a Hive partition is nothing but a coarse range index, that maps a set of columns to a list of files. Table formats born in the cloud like Iceberg/Delta Lake, have built-in tracking of column ranges per file in a single flat file (json/avro), that helps avoid planning costs for large/poorly sized tables. This need has been largely reduced for Hudi tables thus far, given Hudi automatically enforces file sizes which help bound time taken to read out stats from parquet footers for e.g. However, with the advent of features like clustering, there is a need for writing smaller files first and then reclustering in a query optimized way. We plan to add indexed column ranges, that can scale to lots of small files and support faster mutations . See [RFC-27](https://cwiki.apache.org/confluence/display/HUDI/RFC-27+Data+skipping+index+to+improve+query+performance) to track the design process and get involved.\\n\\nWhile Hudi already supports external indexes for random write workloads, we would like to support [point-lookup-ish queries](https://github.com/apache/hudi/pull/2487) right on top of lake storage, which helps avoid the overhead of an additional database for many classes of data applications. We also anticipate that uuid/key based joins will be sped up a lot, by leveraging record level indexing schemes, we build out for fast upsert performance. We also plan to move our tracking of bloom filters out of the file footers and into its [own partition](https://issues.apache.org/jira/browse/HUDI-1295) on the metadata table. Ultimately, we look to exposing all of this to the queries as well in the coming releases.\\n\\n## Concurrency Control\\n\\nConcurrency control defines how different writers/readers coordinate access to the table. Hudi ensures atomic writes, by way of publishing commits atomically to the timeline, stamped with an instant time that denotes the time at which the action is deemed to have occurred. Unlike general purpose file version control, Hudi draws clear distinction between writer processes (that issue user\u2019s upserts/deletes), table services (that write data/metadata to optimize/perform bookkeeping) and readers (that execute queries and read data). Hudi provides snapshot isolation between all three types of processes, meaning they all operate on a consistent snapshot of the table. Hudi provides [optimistic concurrency control](https://cwiki.apache.org/confluence/display/HUDI/RFC+-+22+%3A+Snapshot+Isolation+using+Optimistic+Concurrency+Control+for+multi-writers) (OCC) between writers, while providing lock-free, non-blocking MVCC\xa0 based concurrency control between writers and table-services and between different table services.\\n\\nProjects that solely rely on OCC deal with competing operations, by either implementing a lock or relying on atomic renames. Such approaches are optimistic that real contention never happens and resort to failing one of the writer operations if conflicts occur, which can cause significant resource wastage or operational overhead. Imagine a scenario of two writer processes : an ingest writer job producing new data every 30 minutes and a deletion writer job that is enforcing GDPR taking 2 hours to issue deletes. If there were to overlap on the same files (very likely to happen in real situations with random deletes), the deletion job is almost guaranteed to starve and fail to commit each time, wasting tons of cluster resources. Hudi takes a very different approach that we believe is more apt for lake transactions, which are typically long-running. For e.g async compaction that can keep deleting records in the background without blocking the ingest job. This is implemented via a file level, log based concurrency control protocol which orders actions based on their start instant times on the timeline.\\n\\n![Figure showing competing transactions leading to starvation with just OCC](/assets/images/blog/datalake-platform/Hudi_design_diagram_-_Page_2_1.png)\\n\\nWe are hard at work, improving our OCC based implementation around early detection of conflicts for concurrent writers and terminate early without burning up CPU resources. We are also working on [adding fully log based](https://cwiki.apache.org/confluence/display/HUDI/RFC+-+22+%3A+Snapshot+Isolation+using+Optimistic+Concurrency+Control+for+multi-writers#RFC22:SnapshotIsolationusingOptimisticConcurrencyControlformultiwriters-FutureWork(LockFree-ishConcurrencyControl)), non-blocking concurrency control between writers, where writers proceed to write deltas and conflicts are resolved later in some deterministic timeline order - again much like how stream processing programs are written. This is possible only due to Hudi\u2019s unique design that sequences actions into an ordered event log and the transaction handling code is aware of the relationship/interdependence of actions to each other.\\n\\n## Writers\\n\\nHudi tables can be used as sinks for Spark/Flink pipelines and the Hudi writing path provides several enhanced capabilities over file writing done by vanilla parquet/avro sinks. Hudi classifies write operations carefully into incremental (`insert`, `upsert`, `delete`) and batch/bulk operations (`insert_overwrite`, `insert_overwrite_table`, `delete_partition`, `bulk_insert`) and provides relevant functionality for each operation in a performant and cohesive way. Both upsert and delete operations automatically handle merging of records with the same key in the input stream (say, a CDC stream obtained from upstream table) and then lookup the index, finally invoke a bin packing algorithm to pack data into files, while [respecting a pre-configured target file size](http://hudi.apache.org/blog/2021/03/01/hudi-file-sizing). An insert operation on the other hand, is intelligent enough to avoid the precombining and index lookup, while retaining the benefits of the rest of the pipeline. Similarly, bulk_insert operation provides several sort modes for controlling initial file sizes and file counts, when importing data from an external table to Hudi. The other batch write operations provide MVCC based implementations of typical overwrite semantics used in batch data pipelines, while retaining all the transactional and incremental processing capabilities, making it seamless to switch between incremental pipelines for regular runs and batch pipelines for backfilling/dropping older partitions. The write pipeline also contains lower layers optimizations around handling large merges by spilling to [rocksDB](https://rocksdb.org/) or an external spillable map, multi-threaded/concurrent I/O to improve write performance.\\n\\nKeys are first class citizens inside Hudi and the pre-combining/index lookups done before upsert/deletes ensure a key is unique across partitions or within partitions, as desired. In contrast with other approaches where this is left to data engineer to co-ordinate using `MERGE INTO` statements, this approach ensures quality data especially for critical use-cases. Hudi also ships with several [built-in key generators](http://hudi.apache.org/blog/2021/02/13/hudi-key-generators/) that can parse all common date/timestamps, handle malformed data with an extensible framework for defining custom key generators. Keys are also materialized with the records using the `_hoodie_record_key` meta column, which makes it possible to change the key fields and perform repairs on older data with incorrect keys for e.g. Finally, Hudi provides a `HoodieRecordPayload` interface is very similar to processor APIs in Flink or Kafka Streams, and allows for expressing arbitrary merge conditions, between the base and delta log records. This allows users to express partial merges (e.g log only updated columns to the delta log for efficiency) and avoid reading all the base records before every merge. Routinely, we find users leverage such custom merge logic during replaying/backfilling older data onto a table, while ensuring newer updates are not overwritten causing the table\'s snapshot to go back in time. This is achieved by simply using the  `HoodieDefaultPayload` where latest value for a given key is picked based a configured precombine field value in the data.\\n\\nHudi writers add metadata to each record, that codify the commit time and a sequence number for each record within that commit (comparable to a Kafka offset), which make it possible to derive record level change streams. Hudi also provides users the ability to specify event time fields in incoming data streams and track them in the timeline.Mapping these to stream processing concepts, Hudi contains both [arrival and event time](https://www.oreilly.com/radar/the-world-beyond-batch-streaming-101/) for records for each commit, that can help us build good [watermarks](https://ci.apache.org/projects/flink/flink-docs-release-1.13/docs/dev/datastream/event-time/generating_watermarks/) that inform complex incremental processing pipelines. In the near future, we are looking to add new metadata columns, that encode the source operation (insert, update, delete) for each record, before we embark on this grand goal of full end-end incremental ETL pipelines. All said, we realized many users may simply want to use Hudi as an efficient write layer that supports transactions, fast updates/deletes. We are looking into adding support for [virtual keys](https://github.com/apache/hudi/pull/3306) and making the [meta columns optional](https://github.com/apache/hudi/pull/3247), to lower storage overhead, while still making rest of Hudi\'s capabilities (metadata table, table services, ..) available.\\n\\n## Readers\\n\\nHudi provides snapshot isolation between writers and readers and allows for any table snapshot to be queries consistently from all major lake query engines (Spark, Hive, Flink, Presto, Trino, Impala) and even cloud warehouses like Redshift. In fact, we would love to bring Hudi tables as external tables with BigQuery/Snowflake as well, once they also embrace the lake table formats more natively. Our design philosophy around query performance has been to make Hudi as lightweight as possible whenever only base columnar files are read (CoW  snapshot, MOR read-optimized queries),  employing the engine specific vectorized readers in Presto, Trino, Spark for e.g to be employed. This model is far more scalable than maintaining our own readers and users to benefit from engine specific optimizations. For e.g [Presto](https://prestodb.io/blog/2021/02/04/raptorx), [Trino](https://trino.io/docs/current/connector/hive-caching.html) all have their own data/metadata caches. Whenever, Hudi has to merge base and log files for a query, Hudi takes control and employs several mechanisms (spillable maps, lazy reading) to improve merge performance, while also providing a read-optimized query on the data that trades off data freshness for query performance. In the near future, we are investing deeply into improving MoR snapshot query performance in many ways such as inlining parquet data, special handling of overwrite payloads/merges. \\n\\n![Log merging done for incremental queries](/assets/images/blog/datalake-platform/hudi-design-diagram_-incr-read.png)\\n\\nTrue to its design goals, Hudi provides some very powerful incremental querying capabilities that tied together the meta fields added during writing and the file group based storage layout. While table formats that merely track files, are only able to provide information about files that changed during each snapshot or commits, Hudi generates the exact set of records that changed given a point in the timeline, due to tracking of record level event and arrival times. Further more, this design allows large commits to be consumed in smaller chunks by an incremental query, fully decoupling the writing and incremental querying of data. Time travel is merely implemented as an incremental query that starts and stops at an older portion of the timeline. Since Hudi ensures that a key is atomically mapped to a single file group at any point in time, it makes it possible to support full CDC capabilities on Hudi tables, such as providing all possible values for a given record since time `t`, CDC streams with both before and after images. All of these functionalities can be built local to each file group, given each file group is a self-contained log. Much of our future work in this area will be around bringing such a powerful set of [debezium](https://debezium.io/) like capabilities to life in the coming months. \\n\\n## Table Services\\n\\nWhat defines and sustains a project\u2019s value over years are its fundamental design principles and the subtle trade offs. Databases often consist of several internal components, working in tandem to deliver efficiency, performance and great operability to its users. True to intent to act as state store for incremental data pipelines, we designed Hudi with built-in table services and self-managing runtime that can orchestrate/trigger these services to optimize everything internally. In fact, if we compare rocksDB (a very popular stream processing state-store) and Hudi\u2019s components, the similarities become obvious.\\n\\n![/assets/images/blog/datalake-platform/hudi-design-diagrams_-_Page_4.png](/assets/images/blog/datalake-platform/hudi-design-diagrams_-_Page_4.png)\\n\\nThere are several built-in table services, all with the goal of ensuring performant table storage layout and metadata management, which are automatically invoked either synchronously after each write operation, or asynchronously as a separate background job. Furthermore, Spark (and Flink) streaming writers can run in continuous mode, and invoke table services asynchronously sharing the underlying executors intelligently with writers. Archival service ensures that the timeline holds sufficient history for inter service co-ordination (e.g compactions wait for other compactions to complete on the same file group), incremental queries. Once events expire from the timeline, the archival service cleans up any side-effects from lake storage (e.g. rolling back of failing concurrent transactions). Hudi\'s transaction management implementation allows all of these services to be idempotent and thus resilient to failure via just simple retries.  [Cleaner](http://hudi.apache.org/blog/2021/06/10/employing-right-configurations-for-hudi-cleaner) service works off the timeline incrementally (eating our own incremental design dog food), removing file slices that are past the configured retention period for incremental queries, while also allowing sufficient time for long running batch jobs (e.g Hive ETLs) to finish running. Compaction service comes with built-in strategies (date partitioning based, I/O bounded), that merges a base file with a set of delta log files to produce new base file, all while allowing writes to happen concurrently to the file group. This is only possible due to Hudi\'s grouping of files into groups and support for flexible log merging, and unlocks non-blocking execution of deletes while concurrent updates are being issues to the same set of records. [Clustering](http://hudi.apache.org/blog/2021/01/27/hudi-clustering-intro/) service functions similar to what users find in BigQuery or Snowflake, where users can group records that are often queried together by sort keys or control file sizes by coalescing smaller base files into larger ones. Clustering is fully aware of other actions on the timeline such as cleaning, compaction, and it helps Hudi implement intelligent optimizations like avoiding compaction on file groups that are already being clustered, to save on I/O. Hudi also performs rollback of partial writes and cleans up any uncommitted data from lake storage, by use of marker files that track any files created as a part of write operations. Finally, the bootstrap service performs one time zero copy migration of plain parquet tables to Hudi, while allowing both pipelines to operate in parallel, for data validation purposes. Cleaner service is once again aware of these bootstrapped base files and can optionally clean them up, to ensure use-cases like GDPR compliance are met.\\n\\nWe are always looking for ways to improve and enhance our table services in meaningful ways. In the coming releases, we are working towards a much more [scalable model](https://github.com/apache/hudi/pull/3233) of cleaning up partial writes, by consolidating marker file creation using our timeline metaserver, which avoids expensive full table scans to seek out and remove uncommitted files. We also have [various proposals](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=181307144) to add more clustering schemes, unlock clustering with concurrent updates using fully log based concurrency control. \\n\\n## Data Services\\n\\nAs noted at the start, we wanted to make Hudi immediately usable for common end-end use-cases and thus invested deeply into a set of data services, that provide functionality that is data/workload specific, sitting on top of the table services, writers/readers directly. Foremost in that list, is the Hudi DeltaStreamer utility, which has been an extremely popular choice for painlessly building a data lake out of  Kafka streams and files landing in different formats on top of lake storage. Over time, we have also built out sources that cover all major systems like a JDBC source for RDBMS/other warehouses, Hive source and even incrementally pulling data from other Hudi tables. The utility supports automatic checkpoint management tracking source checkpoints as a part of target Hudi table metadata, with support for backfills/one-off runs. DeltaStreamer also integrates with major schema registries such as Confluent\'s and also provides checkpoint translation from other popular mechanisms like Kafka connect. It also supports de-duplication of data, multi-level configuration management system, built in transformers that take arbitrary SQL or coerce [CDC log changes](http://hudi.apache.org/blog/2020/10/19/hudi-meets-aws-emr-and-aws-dms/) into writable forms, that combined with other aforementioned features can be used for deploying production grade incremental pipelines. Finally, just like the Spark/Flink streaming writers, DeltaStreamer is able to run in a continuous mode, with automatic management of table services. Hudi also provides several other tools for snapshotting and incrementally exporting Hudi tables, also importing/[exporting](http://hudi.apache.org/blog/2020/03/22/exporting-hudi-datasets/)/bootstrapping new tables into Hudi. Hudi also provides commit notifications into Http endpoints or Kafka topics, about table commit activity, which can be used for analytics or building data sensors in workflow managers like Airflow to trigger pipelines.\\n\\n![/assets/images/blog/datalake-platform/hudi-design-diagrams_-_Page_8.png](/assets/images/blog/datalake-platform/hudi-design-diagrams_-_Page_8.png)\\n\\nGoing forward, we would love contributions to enhance our [multi delta streamer utility](http://hudi.apache.org/blog/2020/08/22/ingest-multiple-tables-using-hudi/), which can ingest entire Kafka clusters in a single large Spark application, to be on par and hardened. To further our progress towards end-end complex incremental pipelines, we plan to work towards enhancing the delta streamer utility and its SQL transformers to be triggered by multiple source streams (as opposed to just the one today) and unlock materialized views at scale. We would like to bring an array of useful transformers that perform masking or data monitoring, and extend support for egress of data off Hudi tables into other external sinks as well. Finally, we would love to merge the FlinkStreamer and the DeltaStreamer utilities into one cohesive utility, that can be used across engines. We are constantly improving existing sources (e.g support for parallelized listings of DFS sources) and adding new ones (e.g S3 event based DFS source)\\n\\n## Timeline Metaserver\\n\\nStoring and serving table metadata right on the lake storage is scalable, but can be much less performant compared to RPCs against a scalable meta server. Most cloud warehouses internally are built on a metadata layer that leverages an external database (e.g [Snowflake uses foundationDB](https://www.snowflake.com/blog/how-foundationdb-powers-snowflake-metadata-forward/)). Hudi also provides a metadata server, called the \u201cTimeline server\u201d, which offers an alternative backing store for Hudi\u2019s table metadata. Currently, the timeline server runs embedded in the Hudi writer processes, serving file listings out of a local rocksDB store/[Javalin](https://javalin.io/) REST API during the write process, without needing to repeatedly list the cloud storage. Given we have hardened this as the default option since our 0.6.0 release, we are considering standalone timeline server installations, with support for horizontal scaling, database/table mappings, security and all the features necessary to turn it into a highly performant next generation lake metastore.\\n\\n![/assets/images/blog/datalake-platform/hudi-design-diagrams_-_Page_6.png](/assets/images/blog/datalake-platform/hudi-design-diagrams_-_Page_6.png)\\n\\n## Lake Cache\\n\\nThere is a fundamental tradeoff today in data lakes between faster writing and great query performance. Faster writing typically involves writing smaller files (and later clustering them) or logging deltas (and later merging on read). While this provides good performance already, the pursuit of great query performance often warrants opening fewer number of files/objects on lake storage and may be pre-materializing the merges between base and delta logs. After all, most databases employ a [buffer pool](https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool.html) or [block cache](https://github.com/facebook/rocksdb/wiki/Block-Cache), to amortize the cost of accessing storage. Hudi already contains several design elements that are conducive for building a caching tier (write-through or even just populated by an incremental query), that will be multi-tenant and can cache pre-merged images of the latest file slices, consistent with the timeline. Hudi timeline can be used to simply communicate caching policies, just like how we perform inter table service co-ordination. Historically, caching has been done closer to the query engines or via intermediate in-memory file systems. By placing a caching tier closer and more tightly integrated with a transactional lake storage like Hudi, all query engines would be able to share and amortize the cost of the cache, while supporting updates/deletes as well. We look forward to building a buffer pool for the lake that works across all major engines, with the contributions from the rest of the community. \\n\\n![/assets/images/blog/datalake-platform/hudi-design-diagrams_-_Page_7.png](/assets/images/blog/datalake-platform/hudi-design-diagrams_-_Page_7.png)\\n\\n## Onwards\\n\\nWe hope that this blog painted a complete picture of Apache Hudi, staying true to its founding principles. Interested users and readers can expect blogs delving into each layer of the stack and an overhaul of our docs along these lines in the coming weeks/months. We view the current efforts around table formats as merely removing decade-old bottlenecks in data lake storage/query planes, problems which have been already solved very well in cloud warehouses like Big Query/Snowflake. We would like to underscore that our vision here is much greater, much more technically challenging. We as an industry are just wrapping our heads around many of these deep, open-ended problems, that need to be solved to marry stream processing and data lakes, with scale and simplicity. We hope to continue to put community first and build/solve these hard problems together. If these challenges excite you and you would like to build for that exciting future, please come join our [community](http://hudi.apache.org/contribute/get-involved)."},{"id":"/2021/07/16/Amazon-Athena-expands-Apache-Hudi-support","metadata":{"permalink":"/cn/blog/2021/07/16/Amazon-Athena-expands-Apache-Hudi-support","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-07-16-Amazon-Athena-expands-Apache-Hudi-support.mdx","source":"@site/blog/2021-07-16-Amazon-Athena-expands-Apache-Hudi-support.mdx","title":"Amazon Athena expands Apache Hudi support","description":"Redirecting... please wait!!","date":"2021-07-16T00:00:00.000Z","formattedDate":"July 16, 2021","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[],"prevItem":{"title":"Apache Hudi - The Data Lake Platform","permalink":"/cn/blog/2021/07/21/streaming-data-lake-platform"},"nextItem":{"title":"Part1: Query apache hudi dataset in an amazon S3 data lake with amazon athena : Read optimized queries","permalink":"/cn/blog/2021/07/16/Query-apache-hudi-dataset-in-an-amazon-S3-data-lake-with-amazon-athena-Read-optimized-queries"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/about-aws/whats-new/2021/07/amazon-athena-expands-apache-hudi-support/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/07/16/Query-apache-hudi-dataset-in-an-amazon-S3-data-lake-with-amazon-athena-Read-optimized-queries","metadata":{"permalink":"/cn/blog/2021/07/16/Query-apache-hudi-dataset-in-an-amazon-S3-data-lake-with-amazon-athena-Read-optimized-queries","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-07-16-Query-apache-hudi-dataset-in-an-amazon-S3-data-lake-with-amazon-athena-Read-optimized-queries.mdx","source":"@site/blog/2021-07-16-Query-apache-hudi-dataset-in-an-amazon-S3-data-lake-with-amazon-athena-Read-optimized-queries.mdx","title":"Part1: Query apache hudi dataset in an amazon S3 data lake with amazon athena : Read optimized queries","description":"Redirecting... please wait!!","date":"2021-07-16T00:00:00.000Z","formattedDate":"July 16, 2021","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"read-optimized-queries","permalink":"/cn/blog/tags/read-optimized-queries"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Dhiraj Thakur"},{"name":"Sameer Goel"},{"name":"Imtiaz Sayed"}],"prevItem":{"title":"Amazon Athena expands Apache Hudi support","permalink":"/cn/blog/2021/07/16/Amazon-Athena-expands-Apache-Hudi-support"},"nextItem":{"title":"Employing correct configurations for Hudi\'s cleaner table service","permalink":"/cn/blog/2021/06/10/employing-right-configurations-for-hudi-cleaner"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/part-1-query-an-apache-hudi-dataset-in-an-amazon-s3-data-lake-with-amazon-athena-part-1-read-optimized-queries/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/06/10/employing-right-configurations-for-hudi-cleaner","metadata":{"permalink":"/cn/blog/2021/06/10/employing-right-configurations-for-hudi-cleaner","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-06-10-employing-right-configurations-for-hudi-cleaner.md","source":"@site/blog/2021-06-10-employing-right-configurations-for-hudi-cleaner.md","title":"Employing correct configurations for Hudi\'s cleaner table service","description":"Apache Hudi provides snapshot isolation between writers and readers. This is made possible by Hudi\u2019s MVCC concurrency model. In this blog, we will explain how to employ the right configurations to manage multiple file versions. Furthermore, we will discuss mechanisms available to users on how to maintain just the required number of old file versions so that long running readers do not fail.","date":"2021-06-10T00:00:00.000Z","formattedDate":"June 10, 2021","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"cleaner-service","permalink":"/cn/blog/tags/cleaner-service"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":6.55,"truncated":true,"authors":[{"name":"pratyakshsharma"}],"prevItem":{"title":"Part1: Query apache hudi dataset in an amazon S3 data lake with amazon athena : Read optimized queries","permalink":"/cn/blog/2021/07/16/Query-apache-hudi-dataset-in-an-amazon-S3-data-lake-with-amazon-athena-Read-optimized-queries"},"nextItem":{"title":"Apache Hudi: How Uber gets data a ride to its destination","permalink":"/cn/blog/2021/06/04/Apache-Hudi-How-Uber-gets-data-a-ride-to-its-destination"}},"content":"Apache Hudi provides snapshot isolation between writers and readers. This is made possible by Hudi\u2019s MVCC concurrency model. In this blog, we will explain how to employ the right configurations to manage multiple file versions. Furthermore, we will discuss mechanisms available to users on how to maintain just the required number of old file versions so that long running readers do not fail. \\n\\n\x3c!--truncate--\x3e\\n### Reclaiming space and keeping your data lake storage costs in check\\n\\nHudi provides different table management services to be able to manage your tables on the data lake. One of these services is called the **Cleaner**. As you write more data to your table, for every batch of updates received, Hudi can either generate a new version of the data file with updates applied to records (COPY_ON_WRITE) or write these delta updates to a log file, avoiding rewriting newer version of an existing file (MERGE_ON_READ). In such situations, depending on the frequency of your updates, the number of file versions of log files can grow indefinitely. If your use-cases do not require keeping an infinite history of these versions, it is imperative to have a process that reclaims older versions of the data. This is Hudi\u2019s cleaner service.\\n\\n### Problem Statement\\n\\nIn a data lake architecture, it is a very common scenario to have readers and writers concurrently accessing the same table. As the Hudi cleaner service periodically reclaims older file versions, scenarios arise where a long running query might be accessing a file version that is deemed to be reclaimed by the cleaner. Here, we need to employ the correct configs to ensure readers (aka queries) don\u2019t fail.\\n\\n### Deeper dive into Hudi Cleaner\\n\\nTo deal with the mentioned scenario, lets understand the  different cleaning policies that Hudi offers and the corresponding properties that need to be configured. Options are available to schedule cleaning asynchronously or synchronously. Before going into more details, we would like to explain a few underlying concepts:\\n\\n - **Hudi base file**: Columnar file which consists of final data after compaction. A base file\u2019s name follows the following naming convention: `<fileId>_<writeToken>_<instantTime>.parquet`. In subsequent writes of this file, file id remains the same and commit time gets updated to show the latest version. This also implies any particular version of a record, given its partition path, can be uniquely located using the file id and instant time. \\n - **File slice**: A file slice consists of the base file and any log files consisting of the delta, in case of MERGE_ON_READ table type.\\n - **Hudi File Group**: Any file group in Hudi is uniquely identified by the partition path and the  file id that the files in this group have as part of their name. A file group consists of all the file slices in a particular partition path. Also any partition path can have multiple file groups.\\n\\n### Cleaning Policies\\n\\nHudi cleaner currently supports below cleaning policies:\\n\\n - **KEEP_LATEST_COMMITS**: This is the default policy. This is a temporal cleaning policy that ensures the effect of having lookback into all the changes that happened in the last X commits. Suppose a writer is ingesting data  into a Hudi dataset every 30 minutes and the longest running query can take 5 hours to finish, then the user should retain atleast the last 10 commits. With such a configuration, we ensure that the oldest version of a file is kept on disk for at least 5 hours, thereby preventing the longest running query from failing at any point in time. Incremental cleaning is also possible using this policy.\\n - **KEEP_LATEST_FILE_VERSIONS**: This policy has the effect of keeping N number of file versions irrespective of time. This policy is useful when it is known how many MAX versions of the file does one want to keep at any given time. To achieve the same behaviour as before of preventing long running queries from failing, one should do their calculations based on data patterns. Alternatively, this policy is also useful if a user just wants to maintain 1 latest version of the file.\\n\\n### Examples\\n\\nSuppose a user is ingesting data into a hudi dataset of type COPY_ON_WRITE every 30 minutes as shown below:\\n\\n![Initial timeline](/assets/images/blog/hoodie-cleaner/Initial_timeline.png)\\n_Figure1: Incoming records getting ingested into a hudi dataset every 30 minutes_\\n\\nThe figure shows a particular partition on DFS where commits and corresponding file versions are color coded. 4 different file groups are created in this partition as depicted by fileGroup1, fileGroup2, fileGroup3 and fileGroup4. File group corresponding to fileGroup2 has records ingested from all the 5 commits, while the group corresponding to fileGroup4 has records from the latest 2 commits only.\\n\\nSuppose the user uses the below configs for cleaning:\\n\\n```java\\nhoodie.cleaner.policy=KEEP_LATEST_COMMITS\\nhoodie.cleaner.commits.retained=2\\n```\\n\\nCleaner selects the versions of files to be cleaned by taking care of the following:\\n\\n - Latest version of a file should not be cleaned.\\n - The commit times of the last 2 (configured) + 1 commits are determined. In Figure1, `commit 10:30` and `commit 10:00` correspond to the latest 2 commits in the timeline. One extra commit is included because the time window for retaining commits is essentially equal to the longest query run time. So if the longest query takes 1 hour to finish, and ingestion happens every 30 minutes, you need to retain last 2 commits since 2*30 = 60 (1 hour). At this point of time, the longest query can still be using files written in 3rd commit in reverse order. Essentially this means if a query started executing after `commit 9:30`, it will still be running when clean action is triggered right after `commit 10:30` as in Figure2. \\n -  Now for any file group, only those file slices are scheduled for cleaning which are not savepointed (another Hudi table service) and whose commit time is less than the 3rd commit (`commit 9:30` in figure below) in reverse order.\\n\\n![Retain latest commits](/assets/images/blog/hoodie-cleaner/Retain_latest_commits.png)\\n_Figure2: Files corresponding to latest 3 commits are retained_\\n\\nNow, suppose the user uses the below configs for cleaning:\\n\\n```java\\nhoodie.cleaner.policy=KEEP_LATEST_FILE_VERSIONS\\nhoodie.cleaner.fileversions.retained=1\\n```\\n\\nCleaner does the following:\\n\\n - For any file group, latest version (including any for pending compaction) of file slices are kept and the rest are scheduled for cleaning. Clearly as shown in Figure3, if clean action is triggered right after `commit 10:30`, the cleaner will simply leave the latest version in every file group and delete the rest.\\n\\n![Retain latest versions](/assets/images/blog/hoodie-cleaner/Retain_latest_versions.png)\\n_Figure3: Latest file version in every file group is retained_\\n\\n### Configurations\\n\\nYou can find the details about all the possible configurations along with the default values [here](https://hudi.apache.org/docs/configurations#compaction-configs).\\n\\n### Run command\\n\\nHudi\'s cleaner table service can be run as a separate process or along with your data ingestion. As mentioned earlier, it basically cleans up any stale/old files lying around. In case you want to run it along with ingesting data, configs are available which enable you to run it [synchronously or asynchronously](https://hudi.apache.org/docs/configurations#withAsyncClean). You can use the below command for running the cleaner independently:\\n\\n```java\\n[hoodie]$ spark-submit --class org.apache.hudi.utilities.HoodieCleaner \\\\\\n  --props s3:///temp/hudi-ingestion-config/kafka-source.properties \\\\\\n  --target-base-path s3:///temp/hudi \\\\\\n  --spark-master yarn-cluster\\n```\\n\\nIn case you wish to run the cleaner service asynchronously with writing, please configure the below:\\n\\n```java\\nhoodie.clean.automatic=true\\nhoodie.clean.async=true\\n```\\n\\nFurther you can use [Hudi CLI](https://hudi.apache.org/docs/deployment#cli) for managing your Hudi dataset. CLI provides the below commands for cleaner service:\\n\\n - `cleans show`\\n - `clean showpartitions`\\n - `cleans run`\\n\\nYou can find more details and the relevant code for these commands in [`org.apache.hudi.cli.commands.CleansCommand` class](https://github.com/apache/hudi/blob/master/hudi-cli/src/main/java/org/apache/hudi/cli/commands/CleansCommand.java). \\n\\n### Future Scope\\n\\nWork is currently going on for introducing a new cleaning policy based on time elapsed. This will help in achieving a consistent retention throughout regardless of how frequently ingestion happens. You may track the progress [here](https://issues.apache.org/jira/browse/HUDI-349).\\n\\nWe hope this blog gives you an idea about how to configure the Hudi cleaner and the supported cleaning policies. Please visit the [blog section](https://hudi.apache.org/blog) for a deeper understanding of various Hudi concepts. Cheers!"},{"id":"/2021/06/04/Apache-Hudi-How-Uber-gets-data-a-ride-to-its-destination","metadata":{"permalink":"/cn/blog/2021/06/04/Apache-Hudi-How-Uber-gets-data-a-ride-to-its-destination","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-06-04-Apache-Hudi-How-Uber-gets-data-a-ride-to-its-destination.mdx","source":"@site/blog/2021-06-04-Apache-Hudi-How-Uber-gets-data-a-ride-to-its-destination.mdx","title":"Apache Hudi: How Uber gets data a ride to its destination","description":"Redirecting... please wait!!","date":"2021-06-04T00:00:00.000Z","formattedDate":"June 4, 2021","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"rtinsights","permalink":"/cn/blog/tags/rtinsights"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Joe McKendrick"}],"prevItem":{"title":"Employing correct configurations for Hudi\'s cleaner table service","permalink":"/cn/blog/2021/06/10/employing-right-configurations-for-hudi-cleaner"},"nextItem":{"title":"Experts primer on Apache Hudi","permalink":"/cn/blog/2021/05/12/Experts-primer-on-Apache-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.rtinsights.com/apache-hudi-how-uber-gets-data-a-ride-to-its-destination/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/05/12/Experts-primer-on-Apache-Hudi","metadata":{"permalink":"/cn/blog/2021/05/12/Experts-primer-on-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-05-12-Experts-primer-on-Apache-Hudi.mdx","source":"@site/blog/2021-05-12-Experts-primer-on-Apache-Hudi.mdx","title":"Experts primer on Apache Hudi","description":"Redirecting... please wait!!","date":"2021-05-12T00:00:00.000Z","formattedDate":"May 12, 2021","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"dbta","permalink":"/cn/blog/tags/dbta"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Stephanie Simone"}],"prevItem":{"title":"Apache Hudi: How Uber gets data a ride to its destination","permalink":"/cn/blog/2021/06/04/Apache-Hudi-How-Uber-gets-data-a-ride-to-its-destination"},"nextItem":{"title":"Build Slowly Changing Dimensions Type 2 (SCD2) with Apache Spark and Apache Hudi on Amazon EMR","permalink":"/cn/blog/2021/04/12/Build-Slowly-Changing-Dimensions-Type-2-SCD2-with-Apache-Spark-and-Apache-Hudi-on-Amazon-EMR"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.dbta.com/Editorial/News-Flashes/Experts-Present-a-Primer-on-Apache-Hudi-at-Data-Summit-Connect-2021-146834.aspx\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/04/12/Build-Slowly-Changing-Dimensions-Type-2-SCD2-with-Apache-Spark-and-Apache-Hudi-on-Amazon-EMR","metadata":{"permalink":"/cn/blog/2021/04/12/Build-Slowly-Changing-Dimensions-Type-2-SCD2-with-Apache-Spark-and-Apache-Hudi-on-Amazon-EMR","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-04-12-Build-Slowly-Changing-Dimensions-Type-2-SCD2-with-Apache-Spark-and-Apache-Hudi-on-Amazon-EMR.mdx","source":"@site/blog/2021-04-12-Build-Slowly-Changing-Dimensions-Type-2-SCD2-with-Apache-Spark-and-Apache-Hudi-on-Amazon-EMR.mdx","title":"Build Slowly Changing Dimensions Type 2 (SCD2) with Apache Spark and Apache Hudi on Amazon EMR","description":"Redirecting... please wait!!","date":"2021-04-12T00:00:00.000Z","formattedDate":"April 12, 2021","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"scd2","permalink":"/cn/blog/tags/scd-2"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"David Greenshtein"}],"prevItem":{"title":"Experts primer on Apache Hudi","permalink":"/cn/blog/2021/05/12/Experts-primer-on-Apache-Hudi"},"nextItem":{"title":"New features from Apache hudi in Amazon EMR","permalink":"/cn/blog/2021/03/11/New-features-from-Apache-hudi-in-Amazon-EMR"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/build-slowly-changing-dimensions-type-2-scd2-with-apache-spark-and-apache-hudi-on-amazon-emr/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/03/11/New-features-from-Apache-hudi-in-Amazon-EMR","metadata":{"permalink":"/cn/blog/2021/03/11/New-features-from-Apache-hudi-in-Amazon-EMR","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-03-11-New-features-from-Apache-hudi-in-Amazon-EMR.mdx","source":"@site/blog/2021-03-11-New-features-from-Apache-hudi-in-Amazon-EMR.mdx","title":"New features from Apache hudi in Amazon EMR","description":"Redirecting... please wait!!","date":"2021-03-11T00:00:00.000Z","formattedDate":"March 11, 2021","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Udit Mehrotra"}],"prevItem":{"title":"Build Slowly Changing Dimensions Type 2 (SCD2) with Apache Spark and Apache Hudi on Amazon EMR","permalink":"/cn/blog/2021/04/12/Build-Slowly-Changing-Dimensions-Type-2-SCD2-with-Apache-Spark-and-Apache-Hudi-on-Amazon-EMR"},"nextItem":{"title":"Build a data lake using amazon kinesis data stream for amazon dynamodb and apache hudi","permalink":"/cn/blog/2021/03/04/Build-a-data-lake-using-amazon-kinesis-data-stream-for-amazon-dynamodb-and-apache-hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/new-features-from-apache-hudi-available-in-amazon-emr/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/03/04/Build-a-data-lake-using-amazon-kinesis-data-stream-for-amazon-dynamodb-and-apache-hudi","metadata":{"permalink":"/cn/blog/2021/03/04/Build-a-data-lake-using-amazon-kinesis-data-stream-for-amazon-dynamodb-and-apache-hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-03-04-Build-a-data-lake-using-amazon-kinesis-data-stream-for-amazon-dynamodb-and-apache-hudi.mdx","source":"@site/blog/2021-03-04-Build-a-data-lake-using-amazon-kinesis-data-stream-for-amazon-dynamodb-and-apache-hudi.mdx","title":"Build a data lake using amazon kinesis data stream for amazon dynamodb and apache hudi","description":"Redirecting... please wait!!","date":"2021-03-04T00:00:00.000Z","formattedDate":"March 4, 2021","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"streaming ingestion","permalink":"/cn/blog/tags/streaming-ingestion"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Dhiraj Thakur"},{"name":"Dylan Qu"},{"name":"Saurabh Shrivastava"}],"prevItem":{"title":"New features from Apache hudi in Amazon EMR","permalink":"/cn/blog/2021/03/11/New-features-from-Apache-hudi-in-Amazon-EMR"},"nextItem":{"title":"Streaming Responsibly - How Apache Hudi maintains optimum sized files","permalink":"/cn/blog/2021/03/01/hudi-file-sizing"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/big-data/build-a-data-lake-using-amazon-kinesis-data-streams-for-amazon-dynamodb-and-apache-hudi/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/03/01/hudi-file-sizing","metadata":{"permalink":"/cn/blog/2021/03/01/hudi-file-sizing","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-03-01-hudi-file-sizing.md","source":"@site/blog/2021-03-01-hudi-file-sizing.md","title":"Streaming Responsibly - How Apache Hudi maintains optimum sized files","description":"Apache Hudi is a data lake platform technology that provides several functionalities needed to build and manage data lakes.","date":"2021-03-01T00:00:00.000Z","formattedDate":"March 1, 2021","tags":[{"label":"design","permalink":"/cn/blog/tags/design"},{"label":"file-sizing","permalink":"/cn/blog/tags/file-sizing"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":4.33,"truncated":true,"authors":[{"name":"shivnarayan"}],"prevItem":{"title":"Build a data lake using amazon kinesis data stream for amazon dynamodb and apache hudi","permalink":"/cn/blog/2021/03/04/Build-a-data-lake-using-amazon-kinesis-data-stream-for-amazon-dynamodb-and-apache-hudi"},"nextItem":{"title":"Data Lakehouse: Building the Next Generation of Data Lakes using Apache Hudi","permalink":"/cn/blog/2021/03/01/Data-Lakehouse-Building-the-Next-Generation-of-Data-Lakes-using-Apache-Hudi"}},"content":"Apache Hudi is a data lake platform technology that provides several functionalities needed to build and manage data lakes. \\nOne such key feature that hudi provides is self-managing file sizing so that users don\u2019t need to worry about \\nmanual table maintenance. Having a lot of small files will make it harder to achieve good query performance, due to query engines\\nhaving to open/read/close files way too many times, to plan and execute queries. But for streaming data lake use-cases, \\ninherently ingests are going to end up having smaller volume of writes, which might result in lot of small files if no special handling is done.\\n\x3c!--truncate--\x3e\\n## During Write vs After Write\\n\\nCommon approaches to writing very small files and then later stitching them together solve for system scalability issues posed \\nby small files but might violate query SLA\'s by exposing small files to them. In fact, you can easily do so on a Hudi table, \\nby running a clustering operation, as detailed in a [previous blog](/blog/2021/01/27/hudi-clustering-intro). \\n\\nIn this blog, we discuss file sizing optimizations in Hudi, during the initial write time, so we don\'t have to effectively \\nre-write all data again, just for file sizing. If you want to have both (a) self managed file sizing and \\n(b) Avoid exposing small files to queries, automatic file sizing feature saves the day.\\n\\nHudi has the ability to maintain a configured target file size, when performing inserts/upsert operations. \\n(Note: bulk_insert operation does not provide this functionality and is designed as a simpler replacement for \\nnormal `spark.write.parquet`).\\n\\n### Configs\\n\\nFor illustration purposes, we are going to consider only COPY_ON_WRITE table.\\n\\nConfigs of interest before we dive into the algorithm:\\n\\n- [Max file size](/docs/configurations#limitFileSize): Max size for a given data file. Hudi will try to maintain file sizes to this configured value <br/>\\n- [Soft file limit](/docs/configurations#compactionSmallFileSize): Max file size below which a given data file is considered to a small file <br/>\\n- [Insert split size](/docs/configurations#insertSplitSize): Number of inserts grouped for a single partition. This value should match \\nthe number of records in a single file (you can determine based on max file size and per record size)\\n\\nFor instance, if your first config value is 120MB and 2nd config value is set to 100MB, any file whose size is < 100MB \\nwould be considered a small file.\\n\\nIf you wish to turn off this feature, set the config value for soft file limit to 0.\\n\\n### Example\\n\\nLet\u2019s say this is the layout of data files for a given partition.\\n\\n![Initial layout](/assets/images/blog/hudi-file-sizing/initial_layout.png)\\n_Figure: Initial data file sizes for a given partition of interest_\\n\\nLet\u2019s assume the configured values for max file size and small file size limit are 120MB and 100MB. File_1\u2019s current \\nsize is 40MB, File_2\u2019s size is 80MB, File_3\u2019s size is 90MB, File_4\u2019s size is 130MB and File_5\u2019s size is 105MB. Let\u2019s see \\nwhat happens when a new write happens. \\n\\n**Step 1:** Assigning updates to files. In this step, We look up the index to find the tagged location and records are \\nassigned to respective files. Note that we assume updates are only going to increase the file size and that would simply result\\nin a much bigger file. When updates lower the file size (by say, nulling out lot of fields), then a subsequent write will deem \\nit a small file.\\n\\n**Step 2:**  Determine small files for each partition path. The soft file limit config value will be leveraged here \\nto determine eligible small files. In our example, given the config value is set to 100MB, the small files are File_1(40MB)\\nand File_2(80MB) and file_3\u2019s (90MB).\\n\\n**Step 3:** Once small files are determined, incoming inserts are assigned to them so that they reach their max capacity of \\n120MB. File_1 will be ingested with 80MB worth of inserts, file_2 will be ingested with 40MB worth of inserts and \\nFile_3 will be ingested with 30MB worth of inserts.\\n\\n![Bin packing small files](/assets/images/blog/hudi-file-sizing/bin_packing_existing_data_files.png)\\n_Figure: Incoming records are bin packed to existing small files_\\n\\n**Step 4:** Once all small files are bin packed to its max capacity and if there are pending inserts unassigned, new file \\ngroups/data files are created and inserts are assigned to them. Number of records per new data file is determined from insert split \\nsize config. Assuming the insert split size is configured to 120k records, if there are 300k remaining records, 3 new \\nfiles will be created in which 2 of them (File_6 and File_7) will be filled with 120k records and the last one (File_8)\\nwill be filled with 60k records (assuming each record is 1000 bytes). In future ingestions, 3rd new file will be \\nconsidered as a small file to be packed with more data.\\n\\n![Assigning to new files](/assets/images/blog/hudi-file-sizing/adding_new_files.png)\\n_Figure: Remaining records are assigned to new files_\\n\\nHudi leverages mechanisms such as custom partitioning for optimized record distribution to different files, executing\\nthe algorithm above. After this round of ingestion is complete, all files except File_8 are nicely sized to the optimum size. \\nThis process is followed during every ingestion to ensure there are no small files in your Hudi tables. \\n\\nHopefully the blog gave you an overview into how hudi manages small files and assists in boosting your query performance."},{"id":"/2021/03/01/Data-Lakehouse-Building-the-Next-Generation-of-Data-Lakes-using-Apache-Hudi","metadata":{"permalink":"/cn/blog/2021/03/01/Data-Lakehouse-Building-the-Next-Generation-of-Data-Lakes-using-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-03-01-Data-Lakehouse-Building-the-Next-Generation-of-Data-Lakes-using-Apache-Hudi.mdx","source":"@site/blog/2021-03-01-Data-Lakehouse-Building-the-Next-Generation-of-Data-Lakes-using-Apache-Hudi.mdx","title":"Data Lakehouse: Building the Next Generation of Data Lakes using Apache Hudi","description":"Redirecting... please wait!!","date":"2021-03-01T00:00:00.000Z","formattedDate":"March 1, 2021","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"data-lakehouse","permalink":"/cn/blog/tags/data-lakehouse"},{"label":"medium","permalink":"/cn/blog/tags/medium"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Ryan D\'Souza"},{"name":"Brandon Stanley"}],"prevItem":{"title":"Streaming Responsibly - How Apache Hudi maintains optimum sized files","permalink":"/cn/blog/2021/03/01/hudi-file-sizing"},"nextItem":{"title":"Time travel operations in Hopsworks Feature Store","permalink":"/cn/blog/2021/02/24/Time-travel-operations-in-Hopsworks-Feature-Store"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://medium.com/slalom-build/data-lakehouse-building-the-next-generation-of-data-lakes-using-apache-hudi-41550f62f5f\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/02/24/Time-travel-operations-in-Hopsworks-Feature-Store","metadata":{"permalink":"/cn/blog/2021/02/24/Time-travel-operations-in-Hopsworks-Feature-Store","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-02-24-Time-travel-operations-in-Hopsworks-Feature-Store.mdx","source":"@site/blog/2021-02-24-Time-travel-operations-in-Hopsworks-Feature-Store.mdx","title":"Time travel operations in Hopsworks Feature Store","description":"Redirecting... please wait!!","date":"2021-02-24T00:00:00.000Z","formattedDate":"February 24, 2021","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"feature-store","permalink":"/cn/blog/tags/feature-store"},{"label":"time-travel","permalink":"/cn/blog/tags/time-travel"},{"label":"hopsworks","permalink":"/cn/blog/tags/hopsworks"}],"readingTime":0.045,"truncated":false,"authors":[],"prevItem":{"title":"Data Lakehouse: Building the Next Generation of Data Lakes using Apache Hudi","permalink":"/cn/blog/2021/03/01/Data-Lakehouse-Building-the-Next-Generation-of-Data-Lakes-using-Apache-Hudi"},"nextItem":{"title":"Apache Hudi Key Generators","permalink":"/cn/blog/2021/02/13/hudi-key-generators"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://examples.hopsworks.ai/master/featurestore/hsfs/time_travel/time_travel_scala/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2021/02/13/hudi-key-generators","metadata":{"permalink":"/cn/blog/2021/02/13/hudi-key-generators","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-02-13-hudi-key-generators.md","source":"@site/blog/2021-02-13-hudi-key-generators.md","title":"Apache Hudi Key Generators","description":"Every record in Hudi is uniquely identified by a primary key, which is a pair of record key and partition path where","date":"2021-02-13T00:00:00.000Z","formattedDate":"February 13, 2021","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"key-generators","permalink":"/cn/blog/tags/key-generators"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":5.855,"truncated":true,"authors":[{"name":"shivnarayan"}],"prevItem":{"title":"Time travel operations in Hopsworks Feature Store","permalink":"/cn/blog/2021/02/24/Time-travel-operations-in-Hopsworks-Feature-Store"},"nextItem":{"title":"Optimize Data lake layout using Clustering in Apache Hudi","permalink":"/cn/blog/2021/01/27/hudi-clustering-intro"}},"content":"Every record in Hudi is uniquely identified by a primary key, which is a pair of record key and partition path where\\nthe record belongs to. Using primary keys, Hudi can impose a) partition level uniqueness integrity constraint\\nb) enable fast updates and deletes on records. One should choose the partitioning scheme wisely as it could be a\\ndetermining factor for your ingestion and query latency.\\n\x3c!--truncate--\x3e\\nIn general, Hudi supports both partitioned and global indexes. For a dataset with partitioned index(which is most\\ncommonly used), each record is uniquely identified by a pair of record key and partition path. But for a dataset with\\nglobal index, each record is uniquely identified by just the record key. There won\'t be any duplicate record keys across\\npartitions.\\n\\n## Key Generators\\n\\nHudi provides several key generators out of the box that users can use based on their need, while having a pluggable\\nimplementation for users to implement and use their own KeyGenerator. This blog goes over all different types of key \\ngenerators that are readily available to use.\\n\\n[Here](https://github.com/apache/hudi/blob/master/hudi-client/hudi-client-common/src/main/java/org/apache/hudi/keygen/KeyGenerator.java)\\nis the interface for KeyGenerator in Hudi for your reference.\\n\\nBefore diving into different types of key generators, let\u2019s go over some of the common configs required to be set for \\nkey generators.\\n\\n| Config        | Meaning/purpose|        \\n| ------------- |:-------------:| \\n| ```hoodie.datasource.write.recordkey.field```     | Refers to record key field. This is a mandatory field. | \\n| ```hoodie.datasource.write.partitionpath.field```     | Refers to partition path field. This is a mandatory field. | \\n| ```hoodie.datasource.write.keygenerator.class``` | Refers to Key generator class(including full path). Could refer to any of the available ones or user defined one. This is a mandatory field. | \\n| ```hoodie.datasource.write.partitionpath.urlencode```| When set to true, partition path will be url encoded. Default value is false. |\\n| ```hoodie.datasource.write.hive_style_partitioning```| When set to true, uses hive style partitioning. Partition field name will be prefixed to the value. Format: \u201c<partition_path_field_name>=<partition_path_value>\u201d. Default value is false.|\\n\\nNOTE: \\nPlease use `hoodie.datasource.write.keygenerator.class` instead of `hoodie.datasource.write.keygenerator.type`. The second config was introduced more recently.\\nand will internally instantiate the correct KeyGenerator class based on the type name. The second one is intended for ease of use and is being actively worked on.\\nWe still recommend using the first config until it is marked as deprecated.\\n\\nThere are few more configs involved if you are looking for TimestampBasedKeyGenerator. Will cover those in the respective section.\\n\\nLets go over different key generators available to be used with Hudi.\\n\\n### [SimpleKeyGenerator](https://github.com/apache/hudi/blob/master/hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/SimpleKeyGenerator.java)\\n\\nRecord key refers to one field(column in dataframe) by name and partition path refers to one field (single column in dataframe) \\nby name. This is one of the most commonly used one. Values are interpreted as is from dataframe and converted to string.\\n\\n### [ComplexKeyGenerator](https://github.com/apache/hudi/blob/master/hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/ComplexKeyGenerator.java)\\nBoth record key and partition paths comprise one or more than one field by name(combination of multiple fields). Fields \\nare expected to be comma separated in the config value. For example ```\\"Hoodie.datasource.write.recordkey.field\\" : \u201ccol1,col4\u201d```\\n\\n### [GlobalDeleteKeyGenerator](https://github.com/apache/hudi/blob/master/hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/GlobalDeleteKeyGenerator.java)\\nGlobal index deletes do not require partition value. So this key generator avoids using partition value for generating HoodieKey.\\n\\n### [TimestampBasedKeyGenerator](https://github.com/apache/hudi/blob/master/hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/TimestampBasedKeyGenerator.java)\\nThis key generator relies on timestamps for the partition field. The field values are interpreted as timestamps \\nand not just converted to string while generating partition path value for records.  Record key is same as before where it is chosen by \\nfield name.  Users are expected to set few more configs to use this KeyGenerator.\\n\\nConfigs to be set:\\n\\n| Config        | Meaning/purpose |       \\n| ------------- | -------------|\\n| ```hoodie.deltastreamer.keygen.timebased.timestamp.type```    | One of the timestamp types supported(UNIX_TIMESTAMP, DATE_STRING, MIXED, EPOCHMILLISECONDS, SCALAR) |\\n| ```hoodie.deltastreamer.keygen.timebased.output.dateformat```| Output date format | \\n| ```hoodie.deltastreamer.keygen.timebased.timezone```| Timezone of the data format| \\n| ```oodie.deltastreamer.keygen.timebased.input.dateformat```| Input date format |\\n\\nLet\'s go over some example values for TimestampBasedKeyGenerator.\\n\\n#### Timestamp is GMT\\n\\n| Config field | Value |\\n| ------------- | -------------|\\n|```hoodie.deltastreamer.keygen.timebased.timestamp.type```| \\"EPOCHMILLISECONDS\\"|\\n|```hoodie.deltastreamer.keygen.timebased.output.dateformat``` | \\"yyyy-MM-dd hh\\" |\\n|```hoodie.deltastreamer.keygen.timebased.timezone```| \\"GMT+8:00\\" |\\n\\nInput Field value: \u201c1578283932000L\u201d <br/>\\nPartition path generated from key generator: \u201c2020-01-06 12\u201d\\n\\nIf input field value is null for some rows. <br/>\\nPartition path generated from key generator: \u201c1970-01-01 08\u201d\\n\\n#### Timestamp is DATE_STRING\\n\\n| Config field | Value |\\n| ------------- | -------------|\\n|```hoodie.deltastreamer.keygen.timebased.timestamp.type```|  \\"DATE_STRING\\"  |\\n|```hoodie.deltastreamer.keygen.timebased.output.dateformat```|  \\"yyyy-MM-dd hh\\" | \\n|```hoodie.deltastreamer.keygen.timebased.timezone```|  \\"GMT+8:00\\" |\\n|```hoodie.deltastreamer.keygen.timebased.input.dateformat```|  \\"yyyy-MM-dd hh:mm:ss\\" |\\n\\nInput field value: \u201c2020-01-06 12:12:12\u201d <br/>\\nPartition path generated from key generator: \u201c2020-01-06 12\u201d\\n\\nIf input field value is null for some rows. <br/>\\nPartition path generated from key generator: \u201c1970-01-01 12:00:00\u201d\\n<br/>\\n\\n#### Scalar examples\\n\\n| Config field | Value |\\n| ------------- | -------------|\\n|```hoodie.deltastreamer.keygen.timebased.timestamp.type```| \\"SCALAR\\"|\\n|```hoodie.deltastreamer.keygen.timebased.output.dateformat```| \\"yyyy-MM-dd hh\\" |\\n|```hoodie.deltastreamer.keygen.timebased.timezone```| \\"GMT\\" |\\n|```hoodie.deltastreamer.keygen.timebased.timestamp.scalar.time.unit```| \\"days\\" |\\n\\nInput field value: \u201c20000L\u201d <br/>\\nPartition path generated from key generator: \u201c2024-10-04 12\u201d\\n\\nIf input field value is null. <br/>\\nPartition path generated from key generator: \u201c1970-01-02 12\u201d\\n\\n#### ISO8601WithMsZ with Single Input format\\n\\n| Config field | Value |\\n| ------------- | -------------|\\n|```hoodie.deltastreamer.keygen.timebased.timestamp.type```| \\"DATE_STRING\\"|\\n|```hoodie.deltastreamer.keygen.timebased.input.dateformat```| \\"yyyy-MM-dd\'T\'HH:mm:ss.SSSZ\\" |\\n|```hoodie.deltastreamer.keygen.timebased.input.dateformat.list.delimiter.regex```| \\"\\" |\\n|```hoodie.deltastreamer.keygen.timebased.input.timezone```| \\"\\" |\\n|```hoodie.deltastreamer.keygen.timebased.output.dateformat```| \\"yyyyMMddHH\\" |\\n|```hoodie.deltastreamer.keygen.timebased.output.timezone```| \\"GMT\\" |\\n\\nInput field value: \\"2020-04-01T13:01:33.428Z\\" <br/>\\nPartition path generated from key generator: \\"2020040113\\"\\n\\n#### ISO8601WithMsZ with Multiple Input formats\\n\\n| Config field | Value |\\n| ------------- | -------------|\\n|```hoodie.deltastreamer.keygen.timebased.timestamp.type```| \\"DATE_STRING\\"|\\n|```hoodie.deltastreamer.keygen.timebased.input.dateformat```| \\"yyyy-MM-dd\'T\'HH:mm:ssZ,yyyy-MM-dd\'T\'HH:mm:ss.SSSZ\\" |\\n|```hoodie.deltastreamer.keygen.timebased.input.dateformat.list.delimiter.regex```| \\"\\" |\\n|```hoodie.deltastreamer.keygen.timebased.input.timezone```| \\"\\" |\\n|```hoodie.deltastreamer.keygen.timebased.output.dateformat```| \\"yyyyMMddHH\\" |\\n|```hoodie.deltastreamer.keygen.timebased.output.timezone```| \\"UTC\\" |\\n\\nInput field value: \\"2020-04-01T13:01:33.428Z\\" <br/>\\nPartition path generated from key generator: \\"2020040113\\"\\n\\n#### ISO8601NoMs with offset using multiple input formats\\n\\n| Config field | Value |\\n| ------------- | -------------|\\n|```hoodie.deltastreamer.keygen.timebased.timestamp.type```| \\"DATE_STRING\\"|\\n|```hoodie.deltastreamer.keygen.timebased.input.dateformat```| \\"yyyy-MM-dd\'T\'HH:mm:ssZ,yyyy-MM-dd\'T\'HH:mm:ss.SSSZ\\" |\\n|```hoodie.deltastreamer.keygen.timebased.input.dateformat.list.delimiter.regex```| \\"\\" |\\n|```hoodie.deltastreamer.keygen.timebased.input.timezone```| \\"\\" |\\n|```hoodie.deltastreamer.keygen.timebased.output.dateformat```| \\"yyyyMMddHH\\" |\\n|```hoodie.deltastreamer.keygen.timebased.output.timezone```| \\"UTC\\" |\\n\\nInput field value: \\"2020-04-01T13:01:33-**05:00**\\" <br/>\\nPartition path generated from key generator: \\"2020040118\\"\\n\\n#### Input as short date string and expect date in date format\\n\\n| Config field | Value |\\n| ------------- | -------------|\\n|```hoodie.deltastreamer.keygen.timebased.timestamp.type```| \\"DATE_STRING\\"|\\n|```hoodie.deltastreamer.keygen.timebased.input.dateformat```| \\"yyyy-MM-dd\'T\'HH:mm:ssZ,yyyy-MM-dd\'T\'HH:mm:ss.SSSZ,yyyyMMdd\\" |\\n|```hoodie.deltastreamer.keygen.timebased.input.dateformat.list.delimiter.regex```| \\"\\" |\\n|```hoodie.deltastreamer.keygen.timebased.input.timezone```| \\"UTC\\" |\\n|```hoodie.deltastreamer.keygen.timebased.output.dateformat```| \\"MM/dd/yyyy\\" |\\n|```hoodie.deltastreamer.keygen.timebased.output.timezone```| \\"UTC\\" |\\n\\nInput field value: \\"220200401\\" <br/>\\nPartition path generated from key generator: \\"04/01/2020\\"\\n\\n### [CustomKeyGenerator](https://github.com/apache/hudi/blob/master/hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/CustomKeyGenerator.java)\\nThis is a generic implementation of KeyGenerator where users are able to leverage the benefits of SimpleKeyGenerator, \\nComplexKeyGenerator and TimestampBasedKeyGenerator all at the same time. One can configure record key and partition \\npaths as a single field or a combination of fields. This keyGenerator is particularly useful if you want to define \\ncomplex partition paths involving regular fields and timestamp based fields. It expects value for prop ```\\"hoodie.datasource.write.partitionpath.field\\"``` \\nin a specific format. The format should be \\"field1:PartitionKeyType1,field2:PartitionKeyType2...\\"\\n\\nThe complete partition path is created as \\n```<value for field1 basis PartitionKeyType1>/<value for field2 basis PartitionKeyType2> ```\\nand so on. Each partition key type could either be SIMPLE or TIMESTAMP.\\n\\nExample config value: ```\u201cfield_3:simple,field_5:timestamp\u201d```\\n\\nRecordKey config value is either single field incase of SimpleKeyGenerator or a comma separate field names if referring to ComplexKeyGenerator.\\nEg: \u201ccol1\u201d or \u201ccol3,col4\u201d.\\n\\n### [NonpartitionedKeyGenerator](https://github.com/apache/hudi/blob/master/hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/NonpartitionedKeyGenerator.java)\\nIf your hudi dataset is not partitioned, you could use this \u201cNonpartitionedKeyGenerator\u201d which will return an empty \\npartition for all records. In other words, all records go to the same partition (which is empty \u201c\u201d) \\n\\nHope this blog gave you a good understanding of different types of Key Generators available in Apache Hudi. Thanks for your continued support for Hudi\'s community."},{"id":"/2021/01/27/hudi-clustering-intro","metadata":{"permalink":"/cn/blog/2021/01/27/hudi-clustering-intro","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2021-01-27-hudi-clustering-intro.md","source":"@site/blog/2021-01-27-hudi-clustering-intro.md","title":"Optimize Data lake layout using Clustering in Apache Hudi","description":"Background","date":"2021-01-27T00:00:00.000Z","formattedDate":"January 27, 2021","tags":[{"label":"design","permalink":"/cn/blog/tags/design"},{"label":"clustering","permalink":"/cn/blog/tags/clustering"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":5.705,"truncated":true,"authors":[{"name":"satish.kotha"}],"prevItem":{"title":"Apache Hudi Key Generators","permalink":"/cn/blog/2021/02/13/hudi-key-generators"},"nextItem":{"title":"Building High-Performance Data Lake Using Apache Hudi and Alluxio at T3Go","permalink":"/cn/blog/2020/12/01/high-perf-data-lake-with-hudi-and-alluxio-t3go"}},"content":"## Background\\n\\nApache Hudi brings stream processing to big data, providing fresh data while being an order of magnitude efficient over traditional batch processing. In a data lake/warehouse, one of the key trade-offs is between ingestion speed and query performance. Data ingestion typically prefers small files to improve parallelism and make data available to queries as soon as possible. However, query performance degrades poorly with a lot of small files. Also, during ingestion, data is typically co-located based on arrival time. However, the query engines perform better when the data frequently queried is co-located together. In most architectures each of these systems tend to add optimizations independently to improve performance which hits limitations due to un-optimized data layouts. This blog introduces a new kind of table service called clustering [[RFC-19]](https://cwiki.apache.org/confluence/display/HUDI/RFC+-+19+Clustering+data+for+freshness+and+query+performance) to reorganize data for improved query performance without compromising on ingestion speed.\\n\x3c!--truncate--\x3e\\n\\n## Clustering Architecture\\n\\nAt a high level, Hudi provides different operations such as insert/upsert/bulk_insert through it\u2019s write client API to be able to write data to a Hudi table. To be able to choose a trade-off between file size and ingestion speed, Hudi provides a knob `hoodie.parquet.small.file.limit` to be able to configure the smallest allowable file size. Users are able to configure the small file [soft limit](https://hudi.apache.org/docs/configurations#compactionSmallFileSize) to `0` to force new data to go into a new set of filegroups or set it to a higher value to ensure new data gets \u201cpadded\u201d to existing files until it meets that limit that adds to ingestion latencies.\\n\\n  \\n\\nTo be able to support an architecture that allows for fast ingestion without compromising query performance, we have introduced a \u2018clustering\u2019 service to rewrite the data to optimize Hudi data lake file layout.\\n\\nClustering table service can run asynchronously or synchronously adding a new action type called \u201cREPLACE\u201d, that will mark the clustering action in the Hudi metadata timeline.\\n\\n  \\n\\n#### Overall, there are 2 parts to clustering\\n\\n1.  Scheduling clustering: Create a clustering plan using a pluggable clustering strategy.\\n2.  Execute clustering: Process the plan using an execution strategy to create new files and replace old files.\\n    \\n\\n#### Scheduling clustering\\n\\nFollowing steps are followed to schedule clustering.\\n\\n1.  Identify files that are eligible for clustering: Depending on the clustering strategy chosen, the scheduling logic will identify the files eligible for clustering.\\n2.  Group files that are eligible for clustering based on specific criteria. Each group is expected to have data size in multiples of \u2018targetFileSize\u2019. Grouping is done as part of \u2018strategy\u2019 defined in the plan. Additionally, there is an option to put a cap on group size to improve parallelism and avoid shuffling large amounts of data.\\n3.  Finally, the clustering plan is saved to the timeline in an avro [metadata format](https://github.com/apache/hudi/blob/master/hudi-common/src/main/avro/HoodieClusteringPlan.avsc).\\n    \\n\\n#### Running clustering\\n\\n1.  Read the clustering plan and get the \u2018clusteringGroups\u2019 that mark the file groups that need to be clustered.\\n2.  For each group, we instantiate appropriate strategy class with strategyParams (example: sortColumns) and apply that strategy to rewrite the data.\\n3.  Create a \u201cREPLACE\u201d commit and update the metadata in [HoodieReplaceCommitMetadata](https://github.com/apache/hudi/blob/master/hudi-common/src/main/java/org/apache/hudi/common/model/HoodieReplaceCommitMetadata.java).\\n    \\n\\nClustering Service builds on Hudi\u2019s MVCC based design to allow for writers to continue to insert new data while clustering action runs in the background to reformat data layout, ensuring snapshot isolation between concurrent readers and writers.\\n\\nNOTE: Clustering can only be scheduled for tables / partitions not receiving any concurrent updates. In the future, concurrent updates use-case will be supported as well.\\n\\n![Clustering example](/assets/images/blog/clustering/example_perf_improvement.png)\\n_Figure: Illustrating query performance improvements by clustering_\\n\\n#### Setting up clustering\\nInline clustering can be setup easily using spark dataframe options. See sample below\\n\\n```scala\\nimport org.apache.hudi.QuickstartUtils._\\nimport scala.collection.JavaConversions._\\nimport org.apache.spark.sql.SaveMode._\\nimport org.apache.hudi.DataSourceReadOptions._\\nimport org.apache.hudi.DataSourceWriteOptions._\\nimport org.apache.hudi.config.HoodieWriteConfig._\\n\\n\\nval df =  //generate data frame\\ndf.write.format(\\"org.apache.hudi\\").\\n        options(getQuickstartWriteConfigs).\\n        option(PRECOMBINE_FIELD_OPT_KEY, \\"ts\\").\\n        option(RECORDKEY_FIELD_OPT_KEY, \\"uuid\\").\\n        option(PARTITIONPATH_FIELD_OPT_KEY, \\"partitionpath\\").\\n        option(TABLE_NAME, \\"tableName\\").\\n        option(\\"hoodie.parquet.small.file.limit\\", \\"0\\").\\n        option(\\"hoodie.clustering.inline\\", \\"true\\").\\n        option(\\"hoodie.clustering.inline.max.commits\\", \\"4\\").\\n        option(\\"hoodie.clustering.plan.strategy.target.file.max.bytes\\", \\"1073741824\\").\\n        option(\\"hoodie.clustering.plan.strategy.small.file.limit\\", \\"629145600\\").\\n        option(\\"hoodie.clustering.plan.strategy.sort.columns\\", \\"column1,column2\\"). //optional, if sorting is needed as part of rewriting data\\n        mode(Append).\\n        save(\\"dfs://location\\");\\n```\\n\\nFor more advanced usecases, async clustering pipeline can also be setup. See an example [here](https://cwiki.apache.org/confluence/display/HUDI/RFC+-+19+Clustering+data+for+freshness+and+query+performance#RFC19Clusteringdataforfreshnessandqueryperformance-SetupforAsyncclusteringJob).\\n\\n\\n## Table Query Performance\\n\\nWe created a dataset from one partition of a known production style table with ~20M records and on-disk size of ~200GB. The dataset has rows for multiple \u201csessions\u201d. Users always query this data using a predicate on session. Data for a single session is spread across multiple data files because ingestion groups data based on arrival time. The below experiment shows that by clustering on session, we are able to improve the data locality and reduce query execution time by more than 50%.\\n\\nQuery: \\n```scala\\nspark.sql(\\"select  *  from table where session_id=123\\")\\n```\\n\\n### Before Clustering\\n\\nQuery took 2.2 minutes to complete. Note that the number of output rows in the \u201cscan parquet\u201d part of the query plan includes all 20M rows in the table.\\n\\n![Query Plan Before Clustering](/assets/images/blog/clustering/Query_Plan_Before_Clustering.png)\\n_Figure: Spark SQL query details before clustering_\\n\\n### After Clustering\\n\\nThe query plan is similar to above. But, because of improved data locality and predicate push down, spark is able to prune a lot of rows. After clustering, the same query only outputs 110K rows (out of 20M rows) while scanning parquet files. This cuts query time to less than a minute from 2.2 minutes.\\n\\n![Query Plan Before Clustering](/assets/images/blog/clustering/Query_Plan_After_Clustering.png)\\n_Figure: Spark SQL query details after clustering_\\n\\nThe table below summarizes query performance improvements from experiments run using Spark3\\n\\n\\n| Table State | Query runtime                           | Num Records Processed | Num files on disk                          |  Size of each file\\n|----------------|-------------------------------|-----------------------------|------------|---------|\\n|**Unclustered**| 130,673 ms            | ~20M | 13642            | ~150 MB |\\n|**Clustered**          |  55,963 ms | ~110K | 294 | ~600 MB\\n\\nQuery runtime is reduced by 60% after clustering. Similar results were observed on other sample datasets. See example query plans and more details at the [RFC-19 performance evaluation](https://cwiki.apache.org/confluence/display/HUDI/RFC+-+19+Clustering+data+for+freshness+and+query+performance#RFC19Clusteringdataforfreshnessandqueryperformance-PerformanceEvaluation).\\n\\nWe expect dramatic speedup for large tables, where the query runtime is almost entirely dominated by actual I/O and not query planning, unlike the example above.\\n\\n## Summary\\n\\nUsing clustering, we can improve query performance by\\n1.  Leveraging concepts such as [space filling curves](https://en.wikipedia.org/wiki/Z-order_curve) to adapt data lake layout and reduce the amount of data read during queries.\\n2.  Stitch small files into larger ones and reduce the total number of files that need to be scanned by the query engine.\\n  \\n\\nClustering also enables stream processing over big data. Ingestion can write small files to satisfy latency requirements of stream processing. Clustering can be used in the background to stitch these small files into larger files and reduce file count.\\n\\nBesides this, the clustering framework also provides the flexibility to asynchronously rewrite data based on specific requirements. We foresee many other use-cases adopting clustering framework with custom pluggable strategies to satisfy on-demand data lake management activities. Some such notable use-cases that are actively being solved using clustering:\\n1.  Rewrite data and encrypt data at rest.\\n2.  Prune unused columns from tables and reduce storage footprint."},{"id":"/2020/12/01/high-perf-data-lake-with-hudi-and-alluxio-t3go","metadata":{"permalink":"/cn/blog/2020/12/01/high-perf-data-lake-with-hudi-and-alluxio-t3go","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-12-01-high-perf-data-lake-with-hudi-and-alluxio-t3go.md","source":"@site/blog/2020-12-01-high-perf-data-lake-with-hudi-and-alluxio-t3go.md","title":"Building High-Performance Data Lake Using Apache Hudi and Alluxio at T3Go","description":"Building High-Performance Data Lake Using Apache Hudi and Alluxio at T3Go","date":"2020-12-01T00:00:00.000Z","formattedDate":"December 1, 2020","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"near real-time analytics","permalink":"/cn/blog/tags/near-real-time-analytics"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"caching","permalink":"/cn/blog/tags/caching"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":7.975,"truncated":true,"authors":[{"name":"t3go"}],"prevItem":{"title":"Optimize Data lake layout using Clustering in Apache Hudi","permalink":"/cn/blog/2021/01/27/hudi-clustering-intro"},"nextItem":{"title":"Can Big Data Solutions Be Affordable?","permalink":"/cn/blog/2020/11/29/Can-Big-Data-Solutions-Be-Affordable"}},"content":"## Building High-Performance Data Lake Using Apache Hudi and Alluxio at T3Go\\n[T3Go](https://www.t3go.cn/)  is China\u2019s first platform for smart travel based on the Internet of Vehicles. In this article, Trevor Zhang and Vino Yang from T3Go describe the evolution of their data lake architecture, built on cloud-native or open-source technologies including Alibaba OSS, Apache Hudi, and Alluxio. Today, their data lake stores petabytes of data, supporting hundreds of pipelines and tens of thousands of tasks daily. It is essential for business units at T3Go including Data Warehouse, Internet of Vehicles, Order Dispatching, Machine Learning, and self-service query analysis.\\n\\nIn this blog, you will see how we slashed data ingestion time by half using Hudi and Alluxio. Furthermore, data analysts using Presto, Hudi, and Alluxio saw the queries speed up by 10 times. We built our data lake based on data orchestration for multiple stages of our data pipeline, including ingestion and analytics.\\n\x3c!--truncate--\x3e\\n## I. T3Go data lake Overview\\n\\nPrior to the data lake, different business units within T3Go managed their own data processing solutions, utilizing different storage systems, ETL tools, and data processing frameworks. Data for each became siloed from every other unit, significantly increasing cost and complexity. Due to the rapid business expansion of T3Go, this inefficiency became our engineering bottleneck.\\n\\nWe moved to a unified data lake solution based on Alibaba OSS, an object store similar to AWS S3, to provide a centralized location to store structured and unstructured data, following the design principles of  _Multi-cluster Shared-data Architecture_; all the applications access OSS storage as the source of truth, as opposed to different data silos. This architecture allows us to store the data as-is, without having to first structure the data, and run different types of analytics to guide better decisions, building dashboards and visualizations from big data processing, real-time analytics, and machine learning.\\n\\n## II. Efficient Near Real-time Analytics Using Hudi\\n\\nOur business in smart travel drives the need to process and analyze data in a near real-time manner. With a traditional data warehouse, we faced the following challenges:  \\n\\n1.  High overhead when updating due to long-tail latency\\n2.  High cost of order analysis due to the long window of a business session\\n3.  Reduced query accuracy due to late or ad-hoc updates\\n4.  Unreliability in data ingestion pipeline\\n5.  Data lost in the distributed data pipeline that cannot be reconciled\\n6.  High latency to access data storage\\n\\nAs a result, we adopted Apache Hudi on top of OSS to address these issues. The following diagram outlines the architecture:\\n\\n![architecture](/assets/images/blog/2020-12-01-t3go-architecture.png)\\n\\n### Enable Near real time data ingestion and analysis\\n\\nWith Hudi, our data lake supports multiple data sources including Kafka, MySQL binlog, GIS, and other business logs in near real time. As a result, more than 60% of the company\u2019s data is stored in the data lake and this proportion continues to increase.\\n\\nWe are also able to speed up the data ingestion time down to a few minutes by introducing Apache Hudi into the data pipeline. Combined with big data interactive query and analysis framework such as Presto and SparkSQL, real-time data analysis and insights are achieved.\\n\\n### Enable Incremental processing pipeline\\n\\nWith the help of Hudi, it is possible to provide incremental changes to the downstream derived table when the upstream table updates frequently. Even with a large number of interdependent tables, we can quickly run partial data updates. This also effectively avoids updating the full partitions of cold tables in the traditional Hive data warehouse.\\n\\n### Accessing Data using Hudi as a unified format\\n\\nTraditional data warehouses often deploy Hadoop to store data and provide batch analysis. Kafka is used separately to distribute Hadoop data to other data processing frameworks, resulting in duplicated data. Hudi helps effectively solve this problem; we always use Spark pipelines to insert new updates into the Hudi tables, then incrementally read the update of Hudi tables. In other words, Hudi tables are used as the unified storage format to access data.\\n\\n## III. Efficient Data Caching Using Alluxio\\n\\nIn the early version of our data lake without Alluxio, data received from Kafka in real time is processed by Spark and then written to OSS data lake using Hudi DeltaStreamer tasks. With this architecture, Spark often suffered high network latency when writing to OSS directly. Since all data is in OSS storage, OLAP queries on Hudi data may also be slow due to lack of data locality.\\n\\nTo address the latency issue, we deployed Alluxio as a data orchestration layer, co-located with computing engines such as Spark and Presto, and used Alluxio to accelerate read and write on the data lake as shown in the following diagram:\\n\\n![architecture-alluxio](/assets/images/blog/2020-12-01-t3go-architecture-alluxio.png)\\n\\nData in formats such as Hudi, Parquet, ORC, and JSON are stored mostly on OSS, consisting of 95% of the data. Computing engines such as Flink, Spark, Kylin, and Presto are deployed in isolated clusters respectively. When each engine accesses OSS, Alluxio acts as a virtual distributed storage system to accelerate data, being co-located with each of the computing clusters.\\n\\nSpecifically, here are a few applications leveraging Alluxio in the T3Go data lake.\\n\\n### Data lake ingestion\\n\\nWe mount the corresponding OSS path to the Alluxio file system and set Hudi\u2019s  _\u201c__target-base-path__\u201d_  parameter value to use the alluxio:// scheme in place of oss:// scheme. Spark pipelines with Hudi continuously ingest data to Alluxio. After data is written to Alluxio, it is asynchronously persisted from the Alluxio cache to the remote OSS every minute. These modifications allow Spark to write to a local Alluxio node instead of writing to remote OSS, significantly reducing the time for the data to be available in data lake after ingestion.\\n\\n### Data analysis on the lake\\n\\nWe use Presto as an ad-hoc query engine to analyze the Hudi tables in the lake, co-locating Alluxio workers on each Presto worker node. When Presto and Alluxio services are co-located and running, Alluxio caches the input data locally in the Presto worker which greatly benefits Presto for subsequent retrievals. On a cache hit, Presto can read from the local Alluxio worker storage at memory speed without any additional data transfer over the network.\\n\\n### Concurrent accesses across multiple storage systems\\n\\nIn order to ensure the accuracy of training samples, our machine learning team often synchronizes desensitized data in production to an offline machine learning environment. During synchronization, the data flows across multiple file systems, from production OSS to an offline HDFS followed by another offline Machine Learning HDFS.\\n\\nThis data migration process is not only inefficient but also error-prune for modelers because multiple different storages with varying configurations are involved. Alluxio helps in this specific scenario by mounting the destination storage systems under the same filesystem to be accessed by their corresponding logical paths in Alluxio namespace. By decoupling the physical storage, this allows applications with different APIs to access and transfer data seamlessly. This data access layout also improves performance.\\n\\n### Microbenchmark\\n\\nOverall, we observed the following improvements with Alluxio:\\n\\n1.  It supports a hierarchical and transparent caching mechanism\\n2.  It supports cache promote omode mode when reading\\n3.  It supports asynchronous writing mode\\n4.  It supports LRU recycling strategy\\n5.  It has pin and TTL features\\n\\nAfter comparison and verification, we choose to use Spark SQL as the query engine. Our performance testing queries the Hudi table, comparing Alluxio + OSS together against OSS directly as well as HDFS.\\n\\n![microbench](/assets/images/blog/2020-12-01-t3go-microbenchmark.png)\\n\\nIn the stress test shown above, after the data volume is greater than a certain magnitude (2400W), the query speed using Alluxio+OSS surpasses the HDFS query speed of the hybrid deployment. After the data volume is greater than 1E, the query speed starts to double. After reaching 6E data, it is up to 12 times higher than querying native OSS and 8 times higher than querying native HDFS. The improvement depends on the machine configuration.\\n\\nBased on our performance benchmarking, we found that the performance can be improved by over 10 times with the help of Alluxio. Furthermore, the larger the data scale, the more prominent the performance improvement.\\n\\n## IV. Next Step\\n\\nAs T3Go\u2019s data lake ecosystem expands, we will continue facing the critical scenario of compute and storage segregation. With T3Go\u2019s growing data processing needs, our team plans to deploy Alluxio on a larger scale to accelerate our data lake storage.\\n\\nIn addition to the deployment of Alluxio on the data lake computing engine, which currently is mainly SparkSQL, we plan to add a layer of Alluxio to the OLAP cluster using Apache Kylin and an ad_hoc cluster using Presto. The goal is to have Alluxio cover all computing scenarios, with Alluxio interconnected between each scene to improve the read and write efficiency of the data lake and the surrounding lake ecology.\\n\\n## V. Conclusion\\n\\nAs mentioned earlier, Hudi and Alluxio covers all scenarios of Hudi\u2019s near real-time ingestion, near real-time analysis, incremental processing, and data distribution on DFS, among many others, and plays the role of a powerful accelerator on data ingestion and data analysis on the lake. With Hudi and Alluxio together,  **our R&D engineers shortened the time for data ingestion into the lake by up to a factor of 2. Data analysts using Presto, Hudi, and Alluxio in conjunction to query data on the lake saw their queries speed up by 10 times faster.** Furthermore, the larger the data scale, the more prominent the performance improvement. Alluxio is an important part of T3Go\u2019s plan to become a leading enterprise data lake in China. We look forward to seeing further integration with Alluxio in T3Go\u2019s data lake ecosystem."},{"id":"/2020/11/29/Can-Big-Data-Solutions-Be-Affordable","metadata":{"permalink":"/cn/blog/2020/11/29/Can-Big-Data-Solutions-Be-Affordable","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-11-29-Can-Big-Data-Solutions-Be-Affordable.mdx","source":"@site/blog/2020-11-29-Can-Big-Data-Solutions-Be-Affordable.mdx","title":"Can Big Data Solutions Be Affordable?","description":"Redirecting... please wait!!","date":"2020-11-29T00:00:00.000Z","formattedDate":"November 29, 2020","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"big-data","permalink":"/cn/blog/tags/big-data"},{"label":"near real-time analytics","permalink":"/cn/blog/tags/near-real-time-analytics"},{"label":"analyticsinsight","permalink":"/cn/blog/tags/analyticsinsight"}],"readingTime":0.045,"truncated":false,"authors":[],"prevItem":{"title":"Building High-Performance Data Lake Using Apache Hudi and Alluxio at T3Go","permalink":"/cn/blog/2020/12/01/high-perf-data-lake-with-hudi-and-alluxio-t3go"},"nextItem":{"title":"Employing the right indexes for fast updates, deletes in Apache Hudi","permalink":"/cn/blog/2020/11/11/hudi-indexing-mechanisms"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.analyticsinsight.net/can-big-data-solutions-be-affordable/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2020/11/11/hudi-indexing-mechanisms","metadata":{"permalink":"/cn/blog/2020/11/11/hudi-indexing-mechanisms","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-11-11-hudi-indexing-mechanisms.md","source":"@site/blog/2020-11-11-hudi-indexing-mechanisms.md","title":"Employing the right indexes for fast updates, deletes in Apache Hudi","description":"Apache Hudi employs an index to locate the file group, that an update/delete belongs to. For Copy-On-Write tables, this enables","date":"2020-11-11T00:00:00.000Z","formattedDate":"November 11, 2020","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"indexing","permalink":"/cn/blog/tags/indexing"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":7.585,"truncated":true,"authors":[{"name":"vinoth"}],"prevItem":{"title":"Can Big Data Solutions Be Affordable?","permalink":"/cn/blog/2020/11/29/Can-Big-Data-Solutions-Be-Affordable"},"nextItem":{"title":"Architecting Data Lakes for the Modern Enterprise at Data Summit Connect Fall 2020","permalink":"/cn/blog/2020/10/21/Architecting-Data-Lakes-for-the-Modern-Enterprise-at-Data-Summit-Connect-Fall-2020"}},"content":"Apache Hudi employs an index to locate the file group, that an update/delete belongs to. For Copy-On-Write tables, this enables\\nfast upsert/delete operations, by avoiding the need to join against the entire dataset to determine which files to rewrite.\\nFor Merge-On-Read tables, this design allows Hudi to bound the amount of records any given base file needs to be merged against.\\nSpecifically, a given base file needs to merged only against updates for records that are part of that base file. In contrast,\\ndesigns without an indexing component (e.g: [Apache Hive ACID](https://cwiki.apache.org/confluence/display/Hive/Hive+Transactions)),\\ncould end up having to merge all the base files against all incoming updates/delete records.\\n\x3c!--truncate--\x3e\\nAt a high level, an index maps a record key + an optional partition path to a file group ID on storage (explained\\nmore in detail [here](/docs/concepts)) and during write operations, we lookup this mapping to route an incoming update/delete\\nto a log file attached to the base file (MOR) or to the latest base file that now needs to be merged against (COW). The index also enables \\nHudi to enforce unique constraints based on the record keys.\\n\\n![Fact table](/assets/images/blog/hudi-indexes/with-and-without-index.png)\\n_Figure: Comparison of merge cost for updates (yellow blocks) against base files (white blocks)_\\n\\nGiven that Hudi already supports few different indexing techniques and is also continuously improving/adding more to its toolkit, the rest of the blog \\nattempts to explain different categories of workloads, from our experience and suggests what index types to use for each. We will also interlace \\ncommentary on existing limitations, upcoming work and optimizations/tradeoffs along the way. \\n\\n## Index Types in Hudi\\n\\nCurrently, Hudi supports the following indexing options. \\n\\n- **Bloom Index (default):** Employs bloom filters built out of the record keys, optionally also pruning candidate files using record key ranges.\\n- **Simple Index:** Performs a lean join of the incoming update/delete records against keys extracted from the table on storage.\\n- **HBase Index:** Manages the index mapping in an external Apache HBase table.\\n\\nWriters can pick one of these options using `hoodie.index.type` config option. Additionally, a custom index implementation can also be employed\\nusing `hoodie.index.class` and supplying a subclass of `SparkHoodieIndex` (for Apache Spark writers) \\n\\nAnother key aspect worth understanding is the difference between global and non-global indexes. Both bloom and simple index have \\nglobal options - `hoodie.index.type=GLOBAL_BLOOM` and `hoodie.index.type=GLOBAL_SIMPLE` - respectively. HBase index is by nature a global index.\\n\\n- **Global index:**  Global indexes enforce uniqueness of keys across all partitions of a table i.e guarantees that exactly \\none record exists in the table for a given record key. Global indexes offer stronger guarantees, but the update/delete cost grows\\nwith size of the table `O(size of table)`, which might still be acceptable for smaller tables.\\n\\n- **Non Global index:** On the other hand, the default index implementations enforce this constraint only within a specific partition. \\nAs one might imagine, non global indexes depends on the writer to provide the same consistent partition path for a given record key during update/delete, \\nbut can deliver much better performance since the index lookup operation becomes `O(number of records updated/deleted)` and \\nscales well with write volume.\\n\\nSince data comes in at different volumes, velocity and has different access patterns, different indices could be used for different workloads. \\nNext, let\u2019s walk through some typical workloads and see how to leverage the right Hudi index for such use-cases.\\n\\n## Workload: Late arriving updates to fact tables\\n\\nMany companies store large volumes of transactional data in NoSQL data stores. For eg, trip tables in case of ride-sharing, buying and selling of shares, \\norders in an e-commerce site. These tables are usually ever growing with random updates on most recent data with long tail updates going to older data, either\\ndue to transactions settling at a later date/data corrections. In other words, most updates go into the latest partitions with few updates going to older ones.\\n\\n![Fact table](/assets/images/blog/hudi-indexes/Fact20tables.gif)\\n_Figure: Typical update pattern for Fact tables_\\n\\nFor such workloads, the `BLOOM` index performs well, since index look-up will prune a lot of data files based on a well-sized bloom filter.\\nAdditionally, if the keys can be constructed such that they have a certain ordering, the number of files to be compared is further reduced by range pruning. \\nHudi constructs an interval tree with all the file key ranges and efficiently filters out the files that don\'t match any key ranges in the updates/deleted records.\\n\\nIn order to efficiently compare incoming record keys against bloom filters i.e with minimal number of bloom filter reads and uniform distribution of work across\\nthe executors, Hudi leverages caching of input records and employs a custom partitioner that can iron out data skews using statistics. At times, if the bloom filter \\nfalse positive ratio is high, it could increase the amount of data shuffled to perform the lookup. Hudi supports dynamic bloom filters \\n(enabled using `hoodie.bloom.index.filter.type=DYNAMIC_V0`), which adjusts its size based on the number of records stored in a given file to deliver the \\nconfigured false positive ratio. \\n\\nIn the near future, we plan to introduce a much speedier version of the BLOOM index that tracks bloom filters/ranges in an internal Hudi metadata table, indexed for fast \\npoint lookups. This would avoid any current limitations around reading bloom filters/ranges from the base files themselves, to perform the lookup. (see \\n[RFC-15](https://cwiki.apache.org/confluence/display/HUDI/RFC+-+15%3A+HUDI+File+Listing+and+Query+Planning+Improvements?src=contextnavpagetreemode) for the general design)\\n\\n## Workload: De-Duplication in event tables\\n\\nEvent Streaming is everywhere. Events coming from Apache Kafka or similar message bus are typically 10-100x the size of fact tables and often treat \\"time\\" (event\'s arrival time/processing \\ntime) as a first class citizen. For eg, IoT event stream, click stream data, ad impressions etc. Inserts and updates only span the last few partitions as these are mostly append only data. \\nGiven duplicate events can be introduced anywhere in the end-end pipeline, de-duplication before storing on the data lake is a common requirement. \\n\\n![Event table](/assets/images/blog/hudi-indexes/Event20tables.gif)\\n_Figure showing the spread of updates for Event table._\\n\\nIn general, this is a very challenging problem to solve at lower cost. Although, we could even employ a key value store to perform this de-duplication ala HBASE index, the index storage\\ncosts would grow linear with number of events and thus can be prohibitively expensive. In fact, `BLOOM` index with range pruning is the optimal solution here. One can leverage the fact\\nthat time is often a first class citizen and construct a key such as `event_ts + event_id` such that the inserted records have monotonically increasing keys. This yields great returns\\nby pruning large amounts of files even within the latest table partitions. \\n\\n## Workload: Random updates/deletes to a dimension table\\n\\nThese types of tables usually contain high dimensional data and hold reference data e.g user profile, merchant information. These are high fidelity tables where the updates are often small but also spread \\nacross a lot of partitions and data files ranging across the dataset from old to new. Often times, these tables are also un-partitioned, since there is also not a good way to partition these tables.\\n\\n![Dimensions table](/assets/images/blog/hudi-indexes/Dimension20tables.gif)\\n_Figure showing the spread of updates for Dimensions table._\\n\\nAs discussed before, the `BLOOM` index may not yield benefits if a good number of files cannot be pruned out by comparing ranges/filters. In such a random write workload, updates end up touching \\nmost files within in the table and thus bloom filters will typically indicate a true positive for all files based on some incoming update. Consequently, we would end up comparing ranges/filter, only\\nto finally check the incoming updates against all files. The `SIMPLE` Index will be a better fit as it does not do any upfront pruning based, but directly joins with interested fields from every data file. \\n`HBASE` index can be employed, if the operational overhead is acceptable and would provide much better lookup times for these tables. \\n\\nWhen using a global index, users should also consider setting `hoodie.bloom.index.update.partition.path=true` or `hoodie.simple.index.update.partition.path=true` to deal with cases where the \\npartition path value could change due to an update e.g users table partitioned by home city; user relocates to a different city. These tables are also excellent candidates for the Merge-On-Read table type.\\n\\nGoing forward, we plan to build [record level indexing](https://cwiki.apache.org/confluence/display/HUDI/RFC+-+08+%3A+Record+level+indexing+mechanisms+for+Hudi+datasets?src=contextnavpagetreemode)\\nright within Hudi, which will improve the index look-up time and will also avoid additional overhead of maintaining an external system like hbase. \\n\\n## Summary \\n\\nWithout the indexing capabilities in Hudi, it would not been possible to make upserts/deletes happen at [very large scales](https://eng.uber.com/apache-hudi-graduation/). \\nHopefully this post gave you good enough context on the indexing mechanisms today and how different tradeoffs play out. \\n\\nSome interesting work underway in this area:\\n\\n- Apache Flink based writing with a RocksDB state store backed indexing mechanism, unlocking true streaming upserts on data lakes. \\n- A brand new MetadataIndex, which reimagines the bloom index today on top of the metadata table in Hudi.\\n- Record level index implementation, as a secondary index using another Hudi table.\\n\\nGoing forward, this will remain an area of active investment for the project. we are always looking for contributors who can drive these roadmap items forward.\\nPlease [engage](/contribute/get-involved) with our community if you want to get involved."},{"id":"/2020/10/21/Architecting-Data-Lakes-for-the-Modern-Enterprise-at-Data-Summit-Connect-Fall-2020","metadata":{"permalink":"/cn/blog/2020/10/21/Architecting-Data-Lakes-for-the-Modern-Enterprise-at-Data-Summit-Connect-Fall-2020","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-10-21-Architecting-Data-Lakes-for-the-Modern-Enterprise-at-Data-Summit-Connect-Fall-2020.mdx","source":"@site/blog/2020-10-21-Architecting-Data-Lakes-for-the-Modern-Enterprise-at-Data-Summit-Connect-Fall-2020.mdx","title":"Architecting Data Lakes for the Modern Enterprise at Data Summit Connect Fall 2020","description":"Redirecting... please wait!!","date":"2020-10-21T00:00:00.000Z","formattedDate":"October 21, 2020","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"dbta","permalink":"/cn/blog/tags/dbta"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Stephanie Simone"}],"prevItem":{"title":"Employing the right indexes for fast updates, deletes in Apache Hudi","permalink":"/cn/blog/2020/11/11/hudi-indexing-mechanisms"},"nextItem":{"title":"Data Lake Change Capture using Apache Hudi & Amazon AMS/EMR","permalink":"/cn/blog/2020/10/21/Data-Lake-Change-Capture-using-Apache-Hudi-and-Amazon-AMS-EMR"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.dbta.com/Editorial/News-Flashes/Architecting-Data-Lakes-for-the-Modern-Enterprise-at-Data-Summit-Connect-Fall-2020-143512.aspx\\">Redirecting... please wait!! </Redirect>"},{"id":"/2020/10/21/Data-Lake-Change-Capture-using-Apache-Hudi-and-Amazon-AMS-EMR","metadata":{"permalink":"/cn/blog/2020/10/21/Data-Lake-Change-Capture-using-Apache-Hudi-and-Amazon-AMS-EMR","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-10-21-Data-Lake-Change-Capture-using-Apache-Hudi-and-Amazon-AMS-EMR.mdx","source":"@site/blog/2020-10-21-Data-Lake-Change-Capture-using-Apache-Hudi-and-Amazon-AMS-EMR.mdx","title":"Data Lake Change Capture using Apache Hudi & Amazon AMS/EMR","description":"Redirecting... please wait!!","date":"2020-10-21T00:00:00.000Z","formattedDate":"October 21, 2020","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"change-data-capture","permalink":"/cn/blog/tags/change-data-capture"},{"label":"cdc","permalink":"/cn/blog/tags/cdc"},{"label":"towardsdatascience","permalink":"/cn/blog/tags/towardsdatascience"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Manoj Kukreja"}],"prevItem":{"title":"Architecting Data Lakes for the Modern Enterprise at Data Summit Connect Fall 2020","permalink":"/cn/blog/2020/10/21/Architecting-Data-Lakes-for-the-Modern-Enterprise-at-Data-Summit-Connect-Fall-2020"},"nextItem":{"title":"Apply record level changes from relational databases to Amazon S3 data lake using Apache Hudi on Amazon EMR and AWS Database Migration Service","permalink":"/cn/blog/2020/10/19/hudi-meets-aws-emr-and-aws-dms"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://towardsdatascience.com/data-lake-change-data-capture-cdc-using-apache-hudi-on-amazon-emr-part-2-process-65e4662d7b4b\\">Redirecting... please wait!! </Redirect>"},{"id":"/2020/10/19/hudi-meets-aws-emr-and-aws-dms","metadata":{"permalink":"/cn/blog/2020/10/19/hudi-meets-aws-emr-and-aws-dms","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-10-19-hudi-meets-aws-emr-and-aws-dms.md","source":"@site/blog/2020-10-19-hudi-meets-aws-emr-and-aws-dms.md","title":"Apply record level changes from relational databases to Amazon S3 data lake using Apache Hudi on Amazon EMR and AWS Database Migration Service","description":"This blog published by AWS shows how to build a CDC pipeline that captures data from an Amazon Relational Database Service (Amazon RDS) for MySQL database using AWS Database Migration Service (AWS DMS) and applies those changes to a dataset in Amazon S3 using Apache Hudi on Amazon EMR.","date":"2020-10-19T00:00:00.000Z","formattedDate":"October 19, 2020","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":0.245,"truncated":false,"authors":[{"name":"aws"}],"prevItem":{"title":"Data Lake Change Capture using Apache Hudi & Amazon AMS/EMR","permalink":"/cn/blog/2020/10/21/Data-Lake-Change-Capture-using-Apache-Hudi-and-Amazon-AMS-EMR"},"nextItem":{"title":"Origins of Data Lake at Grofers","permalink":"/cn/blog/2020/10/19/Origins-of-Data-Lake-at-Grofers"}},"content":"This [blog](https://aws.amazon.com/blogs/big-data/apply-record-level-changes-from-relational-databases-to-amazon-s3-data-lake-using-apache-hudi-on-amazon-emr-and-aws-database-migration-service/) published by AWS shows how to build a CDC pipeline that captures data from an Amazon Relational Database Service (Amazon RDS) for MySQL database using AWS Database Migration Service (AWS DMS) and applies those changes to a dataset in Amazon S3 using Apache Hudi on Amazon EMR."},{"id":"/2020/10/19/Origins-of-Data-Lake-at-Grofers","metadata":{"permalink":"/cn/blog/2020/10/19/Origins-of-Data-Lake-at-Grofers","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-10-19-Origins-of-Data-Lake-at-Grofers.mdx","source":"@site/blog/2020-10-19-Origins-of-Data-Lake-at-Grofers.mdx","title":"Origins of Data Lake at Grofers","description":"Redirecting... please wait!!","date":"2020-10-19T00:00:00.000Z","formattedDate":"October 19, 2020","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"datalake","permalink":"/cn/blog/tags/datalake"},{"label":"change-data-capture","permalink":"/cn/blog/tags/change-data-capture"},{"label":"cdc","permalink":"/cn/blog/tags/cdc"},{"label":"grofers","permalink":"/cn/blog/tags/grofers"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Akshay Agarwal"}],"prevItem":{"title":"Apply record level changes from relational databases to Amazon S3 data lake using Apache Hudi on Amazon EMR and AWS Database Migration Service","permalink":"/cn/blog/2020/10/19/hudi-meets-aws-emr-and-aws-dms"},"nextItem":{"title":"Apache Hudi meets Apache Flink","permalink":"/cn/blog/2020/10/15/apache-hudi-meets-apache-flink"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://lambda.grofers.com/origins-of-data-lake-at-grofers-6c011f94b86c\\">Redirecting... please wait!! </Redirect>"},{"id":"/2020/10/15/apache-hudi-meets-apache-flink","metadata":{"permalink":"/cn/blog/2020/10/15/apache-hudi-meets-apache-flink","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-10-15-apache-hudi-meets-apache-flink.md","source":"@site/blog/2020-10-15-apache-hudi-meets-apache-flink.md","title":"Apache Hudi meets Apache Flink","description":"Apache Hudi (Hudi for short) is a data lake framework created at Uber. Hudi joined the Apache incubator for incubation in January 2019, and was promoted to the top Apache project in May 2020. It is one of the most popular data lake frameworks.","date":"2020-10-15T00:00:00.000Z","formattedDate":"October 15, 2020","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"apache flink","permalink":"/cn/blog/tags/apache-flink"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":9.705,"truncated":true,"authors":[{"name":"wangxianghu"}],"prevItem":{"title":"Origins of Data Lake at Grofers","permalink":"/cn/blog/2020/10/19/Origins-of-Data-Lake-at-Grofers"},"nextItem":{"title":"How nClouds Helps Accelerate Data Delivery with Apache Hudi on Amazon EMR","permalink":"/cn/blog/2020/10/06/cdc-solution-using-hudi-by-nclouds"}},"content":"Apache Hudi (Hudi for short) is a data lake framework created at Uber. Hudi joined the Apache incubator for incubation in January 2019, and was promoted to the top Apache project in May 2020. It is one of the most popular data lake frameworks.\\n\x3c!--truncate--\x3e\\n## 1. Why decouple\\n\\nHudi has been using Spark as its data processing engine since its birth. If users want to use Hudi as their data lake framework, they must introduce Spark into their platform technology stack. \\nA few years ago, using Spark as a big data processing engine can be said to be very common or even natural. Since Spark can either perform batch processing or use micro-batch to simulate streaming, one engine solves both streaming and batch problems. \\nHowever, in recent years, with the development of big data technology, Flink, which is also a big data processing engine, has gradually entered people\'s vision and has occupied a certain market in the field of computing engines. \\nIn the big data technology community, forums and other territories, the voice of whether Hudi supports Flink has gradually appeared and has become more frequent. Therefore, it is a valuable thing to make Hudi support the Flink engine, and the first step of integrating the Flink engine is that Hudi and Spark are decoupled.\\n\\nIn addition, looking at the mature, active, and viable frameworks in the big data, all frameworks are elegant in design and can be integrated with other frameworks and leverage each other\'s expertise. \\nTherefore, decoupling Hudi from Spark and turning it into an engine-independent data lake framework will undoubtedly create more possibilities for the integration of Hudi and other components, allowing Hudi to better integrate into the big data ecosystem.\\n\\n## 2. Challenges\\n\\nHudi\'s internal use of Spark API is as common as our usual development and use of List. Since the data source reads the data, and finally writes the data to the table, Spark RDD is used as the main data structure everywhere, and even ordinary tools are implemented using the Spark API. \\nIt can be said that Hudi is a universal data lake framework implemented by Spark. Hudi also leverages deep Spark functionality like custom partitioning, in-memory caching to implement indexing and file sizing using workload heuristics. \\nFor some of these, Flink offers better out-of-box support (e.g using Flink\u2019s state store for indexing) and can in fact, make Hudi approach real-time latencies more and more. \\n\\nIn addition, the primary engine integrated after this decoupling is Flink. Flink and Spark differ greatly in core abstraction. Spark believes that data is bounded, and its core abstraction is a limited set of data. \\nFlink believes that the essence of data is a stream, and its core abstract DataStream contains various operations on data. Hudi has a streaming first design (record level updates, record level streams), that arguably fit the Flink model more naturally. \\nAt the same time, there are multiple RDDs operating at the same time in Hudi, and the processing result of one RDD is combined with another RDD. \\nThis difference in abstraction and the reuse of intermediate results during implementation make it difficult for Hudi to use a unified API to operate both RDD and DataStream in terms of decoupling abstraction.\\n\\n## 3. Decoupling Spark\\nIn theory, Hudi uses Spark as its computing engine to use Spark\'s distributed computing power and RDD\'s rich operator capabilities. Apart from distributed computing power, Hudi uses RDD more as a data structure, and RDD is essentially a bounded data set. \\nTherefore, it is theoretically feasible to replace RDD with List (of course, it may sacrifice performance/scale). In order to ensure the performance and stability of the Hudi Spark version as much as possible. We can keep setting the bounded data set as the basic operation unit. \\nHudi\'s main operation API remains unchanged, and RDD is extracted as a generic type. The Spark engine implementation still uses RDD, and other engines use List or other bounded  data set according to the actual situation.\\n\\n### Decoupling principle\\n1) Unified generics. The input records `JavaRDD<HoodieRecord>`, key of input records `JavaRDD<HoodieKey>`, and result of write operations `JavaRDD<WriteStatus>` used by the Spark API use generic `I,K,O` instead;\\n\\n2) De-sparkization. All APIs of the abstraction layer must have nothing to do with Spark. Involving specific operations that are difficult to implement in the abstract layer, rewrite them as abstract methods and introduce Spark subclasses.\\n\\nFor example: Hudi uses the `JavaSparkContext#map()` method in many places. To de-spark, you need to hide the `JavaSparkContext`. For this problem, we introduced the `HoodieEngineContext#map()` method, which will block the specific implementation details of `map`, so as to achieve de-sparkization in abstraction.\\n\\n3) Minimize changes to the abstraction layer to ensure the original function and performance of Hudi;\\n\\n4) Replace the `JavaSparkContext` with the `HoodieEngineContext` abstract class to provide the running environment context.\\n\\nIn addition, some of the core algorithms in Hudi, like [rollback](https://github.com/apache/hudi/pull/1756), has been redone without the need for computing a workload profile ahead of time, which used to rely on Spark caching. \\n\\n## 4. Flink integration design\\nHudi\'s write operation is batch processing in nature, and the continuous mode of `DeltaStreamer` is realized by looping batch processing. In order to use a unified API, when Hudi integrates Flink, we choose to collect a batch of data before processing, and finally submit it in a unified manner (here we use List to collect data in Flink).\\nIn Hudi terminology, we will stream data for a given commit, but only publish the commits every so often, making it practical to scale storage on cloud storage and also tunable.\\n\\nThe easiest way to think of batch operation is to use a time window. However, when using a window, when there is no data flowing in a window, there will be no output data, and it is difficult for the Flink sink to judge whether all the data from a given batch has been processed. \\nTherefore, we use Flink\'s checkpoint mechanism to collect batches. The data between every two barriers is a batch. When there is no data in a subtask, the mock result data is made up. \\nIn this way, on the sink side, when each subtask has result data issued, it can be considered that a batch of data has been processed and the commit can be executed.\\n\\nThe DAG is as follows:\\n\\n![dualism](/assets/images/blog/hudi-meets-flink/image1.png)\\n\\n - **Source:** receives Kafka data and converts it into `List<HoodieRecord>`;\\n - **InstantGeneratorOperator:** generates a globally unique instant. When the previous instant is not completed or the current batch has no data, no new instant is created;\\n - **KeyBy partitionPath:** partitions according to `partitionPath` to avoid multiple subtasks from writing the same partition;\\n - **WriteProcessOperator:** performs a write operation. When there is no data in the current partition, it sends empty result data to the downstream to make up the number;\\n - **CommitSink:** receives the calculation results of the upstream task. When receiving the parallelism results, it is considered that all the upstream subtasks are completed and the commit is executed.\\n\\nNote:\\n`InstantGeneratorOperator` and `WriteProcessOperator` are both custom Flink operators. `InstantGeneratorOperator` will block checking the state of the previous instant to ensure that there is only one instant in the global (or requested) state.\\n`WriteProcessOperator` is the actual execution Where a write operation is performed, the write operation is triggered at checkpoint.\\n\\n### 4.1 Index design based on Flink State\\n\\nStateful computing is one of the highlights of the Flink engine. Compared with using external storage, using Flink\'s built-in `State` can significantly improve the performance of Flink applications. \\nTherefore, it would be a good choice to implement a Hudi index based on Flink\'s State.\\n\\nThe core of the Hudi index is to maintain the mapping of the Hudi key `HoodieKey` and the location of the Hudi data `HoodieRecordLocation`. \\nTherefore, based on the current design, we can simply maintain a `MapState<HoodieKey, HoodieRecordLocation>` in Flink UDF to map the `HoodieKey` and `HoodieRecordLocation`, and leave the fault tolerance and persistence of State to the Flink framework.\\n\\n![dualism](/assets/images/blog/hudi-meets-flink/image2.png)\\n\\n## 5. Implementation examples\\n### 1) HoodieTable\\n\\n```\\n/**\\n  * Abstract implementation of a HoodieTable.\\n  *\\n  * @param <T> Sub type of HoodieRecordPayload\\n  * @param <I> Type of inputs\\n  * @param <K> Type of keys\\n  * @param <O> Type of outputs\\n  */\\npublic abstract class HoodieTable<T extends HoodieRecordPayload, I, K, O> implements Serializable {\\n\\n   protected final HoodieWriteConfig config;\\n   protected final HoodieTableMetaClient metaClient;\\n   protected final HoodieIndex<T, I, K, O> index;\\n\\n   public abstract HoodieWriteMetadata<O> upsert(HoodieEngineContext context, String instantTime,\\n       I records);\\n\\n   public abstract HoodieWriteMetadata<O> insert(HoodieEngineContext context, String instantTime,\\n       I records);\\n\\n   public abstract HoodieWriteMetadata<O> bulkInsert(HoodieEngineContext context, String instantTime,\\n       I records, Option<BulkInsertPartitioner<I>> bulkInsertPartitioner);\\n\\n   ...\\n}\\n```\\n\\n`HoodieTable` is one of the core abstractions of Hudi, which defines operations such as `insert`, `upsert`, and `bulkInsert` supported by the table. \\nTake `upsert` as an example, the input data is changed from the original `JavaRDD<HoodieRecord> inputRdds` to `I records`, and the runtime `JavaSparkContext jsc` is changed to `HoodieEngineContext context`.\\n\\nFrom the class annotations, we can see that `T, I, K, O` represents the load data type, input data type, primary key type and output data type of Hudi operation respectively. \\nThese generics will run through the entire abstraction layer.\\n\\n### 2) HoodieEngineContext\\n\\n```\\n/**\\n * Base class contains the context information needed by the engine at runtime. It will be extended by different\\n * engine implementation if needed.\\n */\\npublic abstract class HoodieEngineContext {\\n\\n  public abstract <I, O> List<O> map(List<I> data, SerializableFunction<I, O> func, int parallelism);\\n\\n  public abstract <I, O> List<O> flatMap(List<I> data, SerializableFunction<I, Stream<O>> func, int parallelism);\\n\\n  public abstract <I> void foreach(List<I> data, SerializableConsumer<I> consumer, int parallelism);\\n\\n  ......\\n}\\n```\\n\\n`HoodieEngineContext` plays the role of `JavaSparkContext`, it not only provides all the information that `JavaSparkContext` can provide, \\nbut also encapsulates many methods such as `map`, `flatMap`, `foreach`, and hides The specific implementation of `JavaSparkContext#map()`,`JavaSparkContext#flatMap()`, `JavaSparkContext#foreach()` and other methods.\\n\\nTake the `map` method as an example. In the Spark implementation class `HoodieSparkEngineContext`, the `map` method is as follows:\\n\\n```\\n  @Override\\n  public <I, O> List<O> map(List<I> data, SerializableFunction<I, O> func, int parallelism) {\\n    return javaSparkContext.parallelize(data, parallelism).map(func::apply).collect();\\n  }\\n```\\n\\nIn the engine that operates List, the implementation can be as follows (different methods need to pay attention to thread-safety issues, use `parallel()` with caution):\\n\\n```\\n  @Override\\n  public <I, O> List<O> map(List<I> data, SerializableFunction<I, O> func, int parallelism) {\\n    return data.stream().parallel().map(func::apply).collect(Collectors.toList());\\n  }\\n```\\n\\nNote:\\nThe exception thrown in the map function can be solved by wrapping `SerializableFunction<I, O> func`.\\n\\nHere is a brief introduction to `SerializableFunction`:\\n\\n```\\n@FunctionalInterface\\npublic interface SerializableFunction<I, O> extends Serializable {\\n  O apply(I v1) throws Exception;\\n}\\n```\\n\\nThis method is actually a variant of `java.util.function.Function`. The difference from `java.util.function.Function` is that `SerializableFunction` can be serialized and can throw exceptions. \\nThis function is introduced because the input parameters that the `JavaSparkContext#map()` function can receive must be serializable. \\nAt the same time, there are many exceptions that need to be thrown in the logic of Hudi, and the code for `try-catch` in the Lambda expression will be omitted It is bloated and not very elegant.\\n\\n## 6. Current progress and follow-up plan\\n\\n### 6.1 Working time axis\\n\\n![dualism](/assets/images/blog/hudi-meets-flink/image3.png)\\n\\n[T3go](https://www.t3go.cn/)\\n[Aliyun](https://cn.aliyun.com/)\\n[SF-express](https://www.sf-express.com/cn/sc/)\\n\\n### 6.2 Follow-up plan\\n\\n#### 1) Promote the integration of Hudi and Flink\\n\\nPush the integration of Flink and Hudi to the community as soon as possible. In the initial stage, this feature may only support Kafka data sources.\\n\\n#### 2) Performance optimization\\n\\nIn order to ensure the stability and performance of the Hudi-Spark version, the decoupling did not take too much into consideration the possible performance problems of the Flink version.\\n\\n#### 3) flink-connector-hudi like third-party package development\\n\\nMake the binding of Hudi-Flink into a third-party package. Users can this third-party package to read/write from/to Hudi with Flink."},{"id":"/2020/10/06/cdc-solution-using-hudi-by-nclouds","metadata":{"permalink":"/cn/blog/2020/10/06/cdc-solution-using-hudi-by-nclouds","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-10-06-cdc-solution-using-hudi-by-nclouds.md","source":"@site/blog/2020-10-06-cdc-solution-using-hudi-by-nclouds.md","title":"How nClouds Helps Accelerate Data Delivery with Apache Hudi on Amazon EMR","description":"This blog published by nClouds in partnership with AWS shows how to build a CDC pipeline using Apache Hudi on Amazon EMR and other managed services like Amazon RDS and AWS DMS, including Amazon QuickSight for data visualization.","date":"2020-10-06T00:00:00.000Z","formattedDate":"October 6, 2020","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"apache flink","permalink":"/cn/blog/tags/apache-flink"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":0.19,"truncated":false,"authors":[{"name":"nclouds"}],"prevItem":{"title":"Apache Hudi meets Apache Flink","permalink":"/cn/blog/2020/10/15/apache-hudi-meets-apache-flink"},"nextItem":{"title":"Ingest multiple tables using Hudi","permalink":"/cn/blog/2020/08/22/ingest-multiple-tables-using-hudi"}},"content":"This [blog](https://aws.amazon.com/blogs/apn/how-nclouds-helps-accelerate-data-delivery-with-apache-hudi-on-amazon-emr/) published by nClouds in partnership with AWS shows how to build a CDC pipeline using Apache Hudi on Amazon EMR and other managed services like Amazon RDS and AWS DMS, including Amazon QuickSight for data visualization."},{"id":"/2020/08/22/ingest-multiple-tables-using-hudi","metadata":{"permalink":"/cn/blog/2020/08/22/ingest-multiple-tables-using-hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-08-22-ingest-multiple-tables-using-hudi.md","source":"@site/blog/2020-08-22-ingest-multiple-tables-using-hudi.md","title":"Ingest multiple tables using Hudi","description":"When building a change data capture pipeline for already existing or newly created relational databases, one of the most common problems that one faces is simplifying the onboarding process for multiple tables. Ingesting multiple tables to Hudi dataset at a single go is now possible using HoodieMultiTableDeltaStreamer class which is a wrapper on top of the more popular HoodieDeltaStreamer class. Currently HoodieMultiTableDeltaStreamer supports COPY_ON_WRITE storage type only and the ingestion is done in a sequential way.","date":"2020-08-22T00:00:00.000Z","formattedDate":"August 22, 2020","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"multi-deltastreamer","permalink":"/cn/blog/tags/multi-deltastreamer"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":3.55,"truncated":true,"authors":[{"name":"pratyakshsharma"}],"prevItem":{"title":"How nClouds Helps Accelerate Data Delivery with Apache Hudi on Amazon EMR","permalink":"/cn/blog/2020/10/06/cdc-solution-using-hudi-by-nclouds"},"nextItem":{"title":"Async Compaction Deployment Models","permalink":"/cn/blog/2020/08/21/async-compaction-deployment-model"}},"content":"When building a change data capture pipeline for already existing or newly created relational databases, one of the most common problems that one faces is simplifying the onboarding process for multiple tables. Ingesting multiple tables to Hudi dataset at a single go is now possible using `HoodieMultiTableDeltaStreamer` class which is a wrapper on top of the more popular `HoodieDeltaStreamer` class. Currently `HoodieMultiTableDeltaStreamer` supports **COPY_ON_WRITE** storage type only and the ingestion is done in a **sequential** way.\\n\x3c!--truncate--\x3e\\nThis blog will guide you through configuring and running `HoodieMultiTableDeltaStreamer`.\\n\\n### Configuration\\n\\n - `HoodieMultiTableDeltaStreamer` expects users to maintain table wise overridden properties in separate files in a dedicated config folder. Common properties can be configured via common properties file also.\\n - By default, hudi datasets are created under the path `<base-path-prefix>/<database_name>/<name_of_table_to_be_ingested>`. You need to provide the names of tables to be ingested via the property `hoodie.deltastreamer.ingestion.tablesToBeIngested` in the format `<database>.<table>`, for example \\n \\n```java\\nhoodie.deltastreamer.ingestion.tablesToBeIngested=db1.table1,db2.table2\\n``` \\n \\n - If you do not provide database name, then it is assumed the table belongs to default database and the hudi dataset for the concerned table is created under the path `<base-path-prefix>/default/<name_of_table_to_be_ingested>`. Also there is a provision to override the default path for hudi datasets. You can create hudi dataset for a particular table by setting the property `hoodie.deltastreamer.ingestion.targetBasePath` in table level config file\\n - There are a lot of properties that one might like to override per table, for example\\n \\n```java\\nhoodie.datasource.write.recordkey.field=_row_key\\nhoodie.datasource.write.partitionpath.field=created_at\\nhoodie.deltastreamer.source.kafka.topic=topic2\\nhoodie.deltastreamer.keygen.timebased.timestamp.type=UNIX_TIMESTAMP\\nhoodie.deltastreamer.keygen.timebased.input.dateformat=yyyy-MM-dd HH:mm:ss.S\\nhoodie.datasource.hive_sync.table=short_trip_uber_hive_dummy_table\\nhoodie.deltastreamer.ingestion.targetBasePath=s3:///temp/hudi/table1\\n```  \\n \\n - Properties like above need to be set for every table to be ingested. As already suggested at the beginning, users are expected to maintain separate config files for every table by setting the below property\\n \\n```java\\nhoodie.deltastreamer.ingestion.<db>.<table>.configFile=s3:///tmp/config/config1.properties\\n``` \\n\\nIf you do not want to set the above property for every table, you can simply create config files for every table to be ingested under the config folder with the name - `<database>_<table>_config.properties`. For example if you want to ingest table1 and table2 from dummy database, where config folder is set to `s3:///tmp/config`, then you need to create 2 config files on the given paths - `s3:///tmp/config/dummy_table1_config.properties` and `s3:///tmp/config/dummy_table2_config.properties`.\\n\\n - Finally you can specify all the common properties in a common properties file. Common properties file does not necessarily have to lie under config folder but it is advised to keep it along with other config files. This file will contain the below properties\\n \\n```java\\nhoodie.deltastreamer.ingestion.tablesToBeIngested=db1.table1,db2.table2\\nhoodie.deltastreamer.ingestion.db1.table1.configFile=s3:///tmp/config_table1.properties\\nhoodie.deltastreamer.ingestion.db2.table2.configFile=s3:///tmp/config_table2.properties\\n``` \\n\\n### Configuring schema providers\\n\\nIt is possible to configure different schema providers for different tables or same schema provider class for all tables. All you need to do is configure the property `hoodie.deltastreamer.schemaprovider.class` accordingly as per your use case as below - \\n\\n```java\\nhoodie.deltastreamer.schemaprovider.class=org.apache.hudi.utilities.schema.FilebasedSchemaProvider\\n```\\n\\nFurther it is also possible to configure different source and target schema registry urls with `SchemaRegistryProvider` as the schemaprovider class. Originally HoodieMultiTableDeltaStreamer was designed to cater to use cases where subject naming strategy is set to [TopicNameStrategy](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#subject-name-strategy) which is the default provided by Confluent. \\nWith this default strategy in place, the subject name is same as the topic name being used in kafka. Source and target schema registry urls can be configured as below with TopicNameStrategy - \\n\\n```java\\nhoodie.deltastreamer.schemaprovider.registry.baseUrl=http://localhost:8081/subjects/\\nhoodie.deltastreamer.schemaprovider.registry.urlSuffix=-value/versions/latest\\n```\\n\\nIf you want to consume different versions of your source and target subjects, you can configure as below - \\n\\n```java\\nhoodie.deltastreamer.schemaprovider.registry.baseUrl=http://localhost:8081/subjects/\\nhoodie.deltastreamer.schemaprovider.registry.sourceUrlSuffix=-value/versions/latest\\nhoodie.deltastreamer.schemaprovider.registry.targetUrlSuffix=-value/versions/1\\n```\\n\\nIf you are looking to configure the schema registry urls in the most straight forward way, you can do that as below\\n\\n```java\\nhoodie.deltastreamer.schemaprovider.registry.url=http://localhost:8081/subjects/random-value/versions/latest\\nhoodie.deltastreamer.schemaprovider.registry.targetUrl=http://localhost:8081/subjects/random-value/versions/latest\\n```\\n\\n### Run Command\\n\\n`HoodieMultiTableDeltaStreamer` can be run similar to how one runs `HoodieDeltaStreamer`. Please refer to the example given below for the command. \\n\\n\\n### Example\\n\\nSuppose you want to ingest table1 and table2 from db1 and want to ingest the 2 tables under the path `s3:///temp/hudi`. You can ingest them using the below command\\n\\n```java\\n[hoodie]$ spark-submit --class org.apache.hudi.utilities.deltastreamer.HoodieMultiTableDeltaStreamer `ls packaging/hudi-utilities-bundle/target/hudi-utilities-bundle-*.jar` \\\\\\n  --props s3:///temp/hudi-ingestion-config/kafka-source.properties \\\\\\n  --config-folder s3:///temp/hudi-ingestion-config \\\\\\n  --schemaprovider-class org.apache.hudi.utilities.schema.SchemaRegistryProvider \\\\\\n  --source-class org.apache.hudi.utilities.sources.AvroKafkaSource \\\\\\n  --source-ordering-field impresssiontime \\\\\\n  --base-path-prefix s3:///temp/hudi \\\\ \\n  --target-table dummy_table \\\\\\n  --op UPSERT\\n```\\n\\ns3:///temp/config/kafka-source.properties\\n\\n```java\\nhoodie.deltastreamer.ingestion.tablesToBeIngested=db1.table1,db1.table2\\nhoodie.deltastreamer.ingestion.db1.table1.configFile=s3:///temp/hudi-ingestion-config/config_table1.properties\\nhoodie.deltastreamer.ingestion.db21.table2.configFile=s3:///temp/hudi-ingestion-config/config_table2.properties\\n\\n#Kafka props\\nbootstrap.servers=localhost:9092\\nauto.offset.reset=earliest\\nschema.registry.url=http://localhost:8081\\n\\nhoodie.datasource.write.keygenerator.class=org.apache.hudi.keygen.CustomKeyGenerator\\n```\\n\\ns3:///temp/hudi-ingestion-config/config_table1.properties\\n\\n```java\\nhoodie.datasource.write.recordkey.field=_row_key1\\nhoodie.datasource.write.partitionpath.field=created_at\\nhoodie.deltastreamer.source.kafka.topic=topic1\\n```\\n\\ns3:///temp/hudi-ingestion-config/config_table2.properties\\n\\n```java\\nhoodie.datasource.write.recordkey.field=_row_key2\\nhoodie.datasource.write.partitionpath.field=created_at\\nhoodie.deltastreamer.source.kafka.topic=topic2\\n```\\n\\nContributions are welcome for extending multiple tables ingestion support to **MERGE_ON_READ** storage type and enabling `HoodieMultiTableDeltaStreamer` ingest multiple tables parallely. \\n\\nHappy ingesting!"},{"id":"/2020/08/21/async-compaction-deployment-model","metadata":{"permalink":"/cn/blog/2020/08/21/async-compaction-deployment-model","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-08-21-async-compaction-deployment-model.md","source":"@site/blog/2020-08-21-async-compaction-deployment-model.md","title":"Async Compaction Deployment Models","description":"We will look at different deployment models for executing compactions asynchronously.","date":"2020-08-21T00:00:00.000Z","formattedDate":"August 21, 2020","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"compaction","permalink":"/cn/blog/tags/compaction"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":1.925,"truncated":true,"authors":[{"name":"vbalaji"}],"prevItem":{"title":"Ingest multiple tables using Hudi","permalink":"/cn/blog/2020/08/22/ingest-multiple-tables-using-hudi"},"nextItem":{"title":"Efficient Migration of Large Parquet Tables to Apache Hudi","permalink":"/cn/blog/2020/08/20/efficient-migration-of-large-parquet-tables"}},"content":"We will look at different deployment models for executing compactions asynchronously.\\n\x3c!--truncate--\x3e\\n## Compaction\\n\\nFor Merge-On-Read table, data is stored using a combination of columnar (e.g parquet) + row based (e.g avro) file formats. \\nUpdates are logged to delta files & later compacted to produce new versions of columnar files synchronously or \\nasynchronously. One of th main motivations behind Merge-On-Read is to reduce data latency when ingesting records.\\nHence, it makes sense to run compaction asynchronously without blocking ingestion.\\n\\n\\n## Async Compaction\\n\\nAsync Compaction is performed in 2 steps:\\n\\n1. ***Compaction Scheduling***: This is done by the ingestion job. In this step, Hudi scans the partitions and selects **file \\nslices** to be compacted. A compaction plan is finally written to Hudi timeline.\\n1. ***Compaction Execution***: A separate process reads the compaction plan and performs compaction of file slices.\\n\\n  \\n## Deployment Models\\n\\nThere are few ways by which we can execute compactions asynchronously. \\n\\n### Spark Structured Streaming\\n\\nWith 0.6.0, we now have support for running async compactions in Spark \\nStructured Streaming jobs. Compactions are scheduled and executed asynchronously inside the \\nstreaming job.  Async Compactions are enabled by default for structured streaming jobs\\non Merge-On-Read table.\\n\\nHere is an example snippet in java\\n\\n```properties\\nimport org.apache.hudi.DataSourceWriteOptions;\\nimport org.apache.hudi.HoodieDataSourceHelpers;\\nimport org.apache.hudi.config.HoodieCompactionConfig;\\nimport org.apache.hudi.config.HoodieWriteConfig;\\n\\nimport org.apache.spark.sql.streaming.OutputMode;\\nimport org.apache.spark.sql.streaming.ProcessingTime;\\n\\n\\n DataStreamWriter<Row> writer = streamingInput.writeStream().format(\\"org.apache.hudi\\")\\n        .option(DataSourceWriteOptions.OPERATION_OPT_KEY(), operationType)\\n        .option(DataSourceWriteOptions.TABLE_TYPE_OPT_KEY(), tableType)\\n        .option(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), \\"_row_key\\")\\n        .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), \\"partition\\")\\n        .option(DataSourceWriteOptions.PRECOMBINE_FIELD_OPT_KEY(), \\"timestamp\\")\\n        .option(HoodieCompactionConfig.INLINE_COMPACT_NUM_DELTA_COMMITS_PROP, \\"10\\")\\n        .option(DataSourceWriteOptions.ASYNC_COMPACT_ENABLE_OPT_KEY(), \\"true\\")\\n        .option(HoodieWriteConfig.TABLE_NAME, tableName).option(\\"checkpointLocation\\", checkpointLocation)\\n        .outputMode(OutputMode.Append());\\n writer.trigger(new ProcessingTime(30000)).start(tablePath);\\n```\\n\\n### DeltaStreamer Continuous Mode\\nHudi DeltaStreamer provides continuous ingestion mode where a single long running spark application  \\ningests data to Hudi table continuously from upstream sources. In this mode, Hudi supports managing asynchronous \\ncompactions. Here is an example snippet for running in continuous mode with async compactions\\n\\n```properties\\nspark-submit --packages org.apache.hudi:hudi-utilities-bundle_2.11:0.6.0 \\\\\\n--class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer \\\\\\n--table-type MERGE_ON_READ \\\\\\n--target-base-path <hudi_base_path> \\\\\\n--target-table <hudi_table> \\\\\\n--source-class org.apache.hudi.utilities.sources.JsonDFSSource \\\\\\n--source-ordering-field ts \\\\\\n--schemaprovider-class org.apache.hudi.utilities.schema.FilebasedSchemaProvider \\\\\\n--props /path/to/source.properties \\\\\\n--continous\\n```\\n\\n### Hudi CLI\\nHudi CLI is yet another way to execute specific compactions asynchronously. Here is an example \\n\\n```properties\\nhudi:trips->compaction run --tableName <table_name> --parallelism <parallelism> --compactionInstant <InstantTime>\\n...\\n```\\n\\n### Hudi Compactor Script\\nHudi provides a standalone tool to also execute specific compactions asynchronously. Here is an example\\n\\n```properties\\nspark-submit --packages org.apache.hudi:hudi-utilities-bundle_2.11:0.6.0 \\\\\\n--class org.apache.hudi.utilities.HoodieCompactor \\\\\\n--base-path <base_path> \\\\\\n--table-name <table_name> \\\\\\n--instant-time <compaction_instant> \\\\\\n--schema-file <schema_file>\\n```"},{"id":"/2020/08/20/efficient-migration-of-large-parquet-tables","metadata":{"permalink":"/cn/blog/2020/08/20/efficient-migration-of-large-parquet-tables","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-08-20-efficient-migration-of-large-parquet-tables.md","source":"@site/blog/2020-08-20-efficient-migration-of-large-parquet-tables.md","title":"Efficient Migration of Large Parquet Tables to Apache Hudi","description":"We will look at how to migrate a large parquet table to Hudi without having to rewrite the entire dataset.","date":"2020-08-20T00:00:00.000Z","formattedDate":"August 20, 2020","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"migration","permalink":"/cn/blog/tags/migration"},{"label":"bootstrap","permalink":"/cn/blog/tags/bootstrap"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":4.755,"truncated":true,"authors":[{"name":"vbalaji"}],"prevItem":{"title":"Async Compaction Deployment Models","permalink":"/cn/blog/2020/08/21/async-compaction-deployment-model"},"nextItem":{"title":"Incremental Processing on the Data Lake","permalink":"/cn/blog/2020/08/18/hudi-incremental-processing-on-data-lakes"}},"content":"We will look at how to migrate a large parquet table to Hudi without having to rewrite the entire dataset. \\n\\n\x3c!--truncate--\x3e\\n## Motivation:\\n\\nApache Hudi maintains per record metadata to perform core operations such as upserts and incremental pull. To take advantage of Hudi\u2019s upsert and incremental processing support, users would need to rewrite their whole dataset to make it an Apache Hudi table.  Hudi 0.6.0 comes with an ***experimental feature*** to support efficient migration of large Parquet tables to Hudi without the need to rewrite the entire dataset.\\n\\n\\n## High Level Idea:\\n\\n### Per Record Metadata:\\n\\nApache Hudi maintains record level metadata for perform efficient upserts and incremental pull.\\n\\n![Per Record Metadata](/assets/images/blog/2020-08-20-per-record.png)\\n\\nApache HUDI physical file contains 3 parts\\n\\n1. For each record, 5 HUDI metadata fields with column indices 0 to 4\\n1. For each record, the original data columns that comprises the record (Original Data)\\n1. Additional Hudi Metadata at file footer for index lookup\\n\\nThe parts (1) and (3) constitute what we term as  \u201cHudi skeleton\u201d. Hudi skeleton contains additional metadata that it maintains in each physical parquet file for supporting Hudi primitives. The conceptual idea is to decouple Hudi skeleton data from original data (2). Hudi skeleton can be stored in a Hudi file while the original data is stored in an external non-Hudi file. A migration of large parquet would result in creating only Hudi skeleton files without having to rewrite original data.\\n\\n![skeleton](/assets/images/blog/2020-08-20-skeleton.png)\\n\\n## Design Deep Dive:\\n\\n For a deep dive on the internals, please take a look at the [RFC document](https://cwiki.apache.org/confluence/display/HUDI/RFC+-+12+%3A+Efficient+Migration+of+Large+Parquet+Tables+to+Apache+Hudi) \\n\\n## Migration:\\n\\nHudi supports 2 modes when migrating parquet tables.  We will use the term bootstrap and migration interchangeably in this document.  \\n\\n* METADATA_ONLY : In this mode, record level metadata alone is generated for each source record and stored in new bootstrap location.\\n* FULL_RECORD : In this mode, record level metadata is generated for each source record and both original record and metadata for each record copied\\n\\nYou can pick and choose these modes at partition level. One of the common strategy would be to use FULL_RECORD mode for a small set of \\"hot\\" partitions which are accessed more frequently and METADATA_ONLY for a larger set of \\"warm\\" partitions. \\n\\n\\n### Query Engine Support:\\nFor a METADATA_ONLY bootstrapped table, Spark - data source, Spark-Hive and native Hive query engines are supported. Presto support is in the works.\\n\\n### Ways To Migrate :\\n\\nThere are 2 ways to migrate a large parquet table to Hudi. \\n\\n- Spark Datasource Write\\n- Hudi DeltaStreamer\\n\\nWe will look at how to migrate using both these approaches.\\n\\n### Configurations:\\n\\nThese are bootstrap specific configurations that needs to be set in addition to regular hudi write configurations.\\n\\n\\n|Configuration Name  | Default  | Mandatory ?  |  Description |\\n|---|---|---|---|\\n|hoodie.bootstrap.base.path| | Yes |Base Path of  source parquet table.|\\n|hoodie.bootstrap.parallelism | 1500 | Yes | Spark Parallelism used when running bootstrap |\\n|hoodie.bootstrap.keygen.class | |Yes |Bootstrap Index internally used by Hudi to map Hudi skeleton and source parquet files. |\\n|hoodie.bootstrap.mode.selector | org.apache.hudi.client.bootstrap.selector.MetadataOnlyBootstrapModeSelector | Yes |Bootstap Mode Selector class. By default, Hudi employs METADATA_ONLY boostrap for all partitions. |\\n|hoodie.bootstrap.partitionpath.translator.class |org.apache.hudi.client.bootstrap.translator. IdentityBootstrapPartitionPathTranslator | No | For METADATA_ONLY bootstrap, this class allows customization of partition paths used in Hudi target dataset. By default, no customization is done and the partition paths reflects what is available in source parquet table. |\\n|hoodie.bootstrap.full.input.provider| org.apache.hudi.bootstrap.SparkParquetBootstrapDataProvider|No |For FULL_RECORD bootstrap, this class provides the input RDD of Hudi records to write.  |\\n| hoodie.bootstrap.mode.selector.regex.mode |METADATA_ONLY |No |Bootstrap Mode used when the partition matches the regex pattern in hoodie.bootstrap.mode.selector.regex . Used only when hoodie.bootstrap.mode.selector set to BootstrapRegexModeSelector. |\\n| hoodie.bootstrap.mode.selector.regex |\\\\.\\\\* |No |Partition Regex used when  hoodie.bootstrap.mode.selector set to BootstrapRegexModeSelector. |\\n\\n### Spark Data Source:\\n\\nHere, we use a Spark Datasource Write to perform bootstrap. \\nHere is an example code snippet to perform METADATA_ONLY bootstrap.\\n\\n\\n```properties\\nimport org.apache.hudi.{DataSourceWriteOptions, HoodieDataSourceHelpers}\\nimport org.apache.hudi.config.{HoodieBootstrapConfig, HoodieWriteConfig}\\nimport org.apache.hudi.keygen.SimpleKeyGenerator\\nimport org.apache.spark.sql.SaveMode\\n \\nval bootstrapDF = spark.emptyDataFrame\\nbootstrapDF.write\\n      .format(\\"hudi\\")\\n      .option(HoodieWriteConfig.TABLE_NAME, \\"hoodie_test\\")\\n      .option(DataSourceWriteOptions.OPERATION_OPT_KEY, DataSourceWriteOptions.BOOTSTRAP_OPERATION_OPT_VAL)\\n      .option(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY, \\"_row_key\\")\\n      .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY, \\"datestr\\")\\n      .option(HoodieBootstrapConfig.BOOTSTRAP_BASE_PATH_PROP, srcPath)\\n      .option(HoodieBootstrapConfig.BOOTSTRAP_KEYGEN_CLASS, classOf[SimpleKeyGenerator].getName)\\n      .mode(SaveMode.Overwrite)\\n      .save(basePath)\\n```\\n\\nHere is an example code snippet to perform METADATA_ONLY bootstrap for August 20 2020 - August 29 2020 partitions and FULL_RECORD bootstrap for other partitions.\\n\\n\\n```properties\\nimport org.apache.hudi.bootstrap.SparkParquetBootstrapDataProvider\\nimport org.apache.hudi.client.bootstrap.selector.BootstrapRegexModeSelector\\nimport org.apache.hudi.{DataSourceWriteOptions, HoodieDataSourceHelpers}\\nimport org.apache.hudi.config.{HoodieBootstrapConfig, HoodieWriteConfig}\\nimport org.apache.hudi.keygen.SimpleKeyGenerator\\nimport org.apache.spark.sql.SaveMode\\n \\nval bootstrapDF = spark.emptyDataFrame\\nbootstrapDF.write\\n      .format(\\"hudi\\")\\n      .option(HoodieWriteConfig.TABLE_NAME, \\"hoodie_test\\")\\n      .option(DataSourceWriteOptions.OPERATION_OPT_KEY, DataSourceWriteOptions.BOOTSTRAP_OPERATION_OPT_VAL)\\n      .option(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY, \\"_row_key\\")\\n      .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY, \\"datestr\\")\\n      .option(DataSourceWriteOptions.PRECOMBINE_FIELD_OPT_KEY, \\"timestamp\\")\\n      .option(HoodieBootstrapConfig.BOOTSTRAP_BASE_PATH_PROP, srcPath)\\n      .option(HoodieBootstrapConfig.BOOTSTRAP_KEYGEN_CLASS, classOf[SimpleKeyGenerator].getName)\\n      .option(HoodieBootstrapConfig.BOOTSTRAP_MODE_SELECTOR, classOf[BootstrapRegexModeSelector].getName)\\n      .option(HoodieBootstrapConfig.BOOTSTRAP_MODE_SELECTOR_REGEX, \\"2020/08/2[0-9]\\")\\n      .option(HoodieBootstrapConfig.BOOTSTRAP_MODE_SELECTOR_REGEX_MODE, \\"METADATA_ONLY\\")\\n      .option(HoodieBootstrapConfig.FULL_BOOTSTRAP_INPUT_PROVIDER, classOf[SparkParquetBootstrapDataProvider].getName)\\n      .mode(SaveMode.Overwrite)\\n      .save(basePath)\\n```\\n\\n### Hoodie DeltaStreamer:\\n\\nHoodie Deltastreamer allows bootstrap to be performed using --run-bootstrap command line option.\\n\\nIf you are planning to use delta-streamer after the initial boostrap to incrementally ingest data to the new hudi dataset, you need to pass either --checkpoint or --initial-checkpoint-provider to set the initial checkpoint for the deltastreamer.\\n\\nHere is an example for running METADATA_ONLY bootstrap using Delta Streamer.\\n\\n```properties\\nspark-submit --package org.apache.hudi:hudi-spark-bundle_2.11:0.6.0\\n--conf \'spark.serializer=org.apache.spark.serializer.KryoSerializer\' \\\\\\n--class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer  \\\\\\n--run-bootstrap \\\\\\n--target-base-path <Hudi_Base_Path> \\\\\\n--target-table <Hudi_Table_Name> \\\\\\n--props <props_file> \\\\\\n--checkpoint <initial_checkpoint_if_you_are_going_to_use_deltastreamer_to_incrementally_ingest> \\\\\\n--hoodie-conf hoodie.bootstrap.base.path=<Parquet_Source_base_Path> \\\\\\n--hoodie-conf hoodie.datasource.write.recordkey.field=_row_key \\\\\\n--hoodie-conf hoodie.datasource.write.partitionpath.field=datestr \\\\\\n--hoodie-conf hoodie.bootstrap.keygen.class=org.apache.hudi.keygen.SimpleKeyGenerator\\n```\\n\\n\\n```properties\\nspark-submit --package org.apache.hudi:hudi-spark-bundle_2.11:0.6.0\\n--conf \'spark.serializer=org.apache.spark.serializer.KryoSerializer\' \\\\\\n--class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer  \\\\\\n--run-bootstrap \\\\\\n--target-base-path <Hudi_Base_Path> \\\\\\n--target-table <Hudi_Table_Name> \\\\\\n--props <props_file> \\\\\\n--checkpoint <initial_checkpoint_if_you_are_going_to_use_deltastreamer_to_incrementally_ingest> \\\\\\n--hoodie-conf hoodie.bootstrap.base.path=<Parquet_Source_base_Path> \\\\\\n--hoodie-conf hoodie.datasource.write.recordkey.field=_row_key \\\\\\n--hoodie-conf hoodie.datasource.write.partitionpath.field=datestr \\\\\\n--hoodie-conf hoodie.bootstrap.keygen.class=org.apache.hudi.keygen.SimpleKeyGenerator \\\\\\n--hoodie-conf hoodie.bootstrap.full.input.provider=org.apache.hudi.bootstrap.SparkParquetBootstrapDataProvider \\\\\\n--hoodie-conf hoodie.bootstrap.mode.selector=org.apache.hudi.client.bootstrap.selector.BootstrapRegexModeSelector \\\\\\n--hoodie-conf hoodie.bootstrap.mode.selector.regex=\\"2020/08/2[0-9]\\" \\\\\\n--hoodie-conf hoodie.bootstrap.mode.selector.regex.mode=METADATA_ONLY\\n```\\n\\n### Known Caveats\\n1. Need proper defaults for the bootstrap config : hoodie.bootstrap.full.input.provider. Here is the [ticket](https://issues.apache.org/jira/browse/HUDI-1213)\\n1. DeltaStreamer manages checkpoints inside hoodie commit files and expects checkpoints in previously committed metadata. Users are expected to pass checkpoint or initial checkpoint provider when performing bootstrap through deltastreamer. Such support is not present when doing bootstrap using Spark Datasource. Here is the [ticket](https://issues.apache.org/jira/browse/HUDI-1214)."},{"id":"/2020/08/18/hudi-incremental-processing-on-data-lakes","metadata":{"permalink":"/cn/blog/2020/08/18/hudi-incremental-processing-on-data-lakes","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-08-18-hudi-incremental-processing-on-data-lakes.md","source":"@site/blog/2020-08-18-hudi-incremental-processing-on-data-lakes.md","title":"Incremental Processing on the Data Lake","description":"NOTE: This article is a translation of the infoq.cn article, found here, with minor edits","date":"2020-08-18T00:00:00.000Z","formattedDate":"August 18, 2020","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"datalake","permalink":"/cn/blog/tags/datalake"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":17.005,"truncated":true,"authors":[{"name":"vinoyang"}],"prevItem":{"title":"Efficient Migration of Large Parquet Tables to Apache Hudi","permalink":"/cn/blog/2020/08/20/efficient-migration-of-large-parquet-tables"},"nextItem":{"title":"PrestoDB and Apache Hudi","permalink":"/cn/blog/2020/08/04/PrestoDB-and-Apache-Hudi"}},"content":"### NOTE: This article is a translation of the infoq.cn article, found [here](https://www.infoq.cn/article/CAgIDpfJBVcJHKJLSbhe), with minor edits\\n\\nApache Hudi is a data lake framework which provides the ability to ingest, manage and query large analytical data sets on a distributed file system/cloud stores. \\nHudi joined the Apache incubator for incubation in January 2019, and was promoted to the top Apache project in May 2020. This article mainly discusses the importance \\nof Hudi to the data lake from the perspective of \\"incremental processing\\". More information about Apache Hudi\'s framework functions, features, usage scenarios, and \\nlatest developments can be found at [QCon Global Software Development Conference (Shanghai Station) 2020](https://qconplus.infoq.cn/2020/shanghai/presentation/2646).\\n\x3c!--truncate--\x3e\\nThroughout the development of big data technology, Hadoop has steadily seized the opportunities of this era and has become the de-facto standard for enterprises to build big data infrastructure. \\nAmong them, the distributed file system HDFS that supports the Hadoop ecosystem almost naturally has become the standard interface for big data storage systems. In recent years, with the rise of \\ncloud-native architectures, we have seen a wave of newer models embracing low-cost cloud storage emerging, a number of data lake frameworks compatible with HDFS interfaces \\nembracing cloud vendor storage have emerged in the industry as well. \\n\\nHowever, we are still processing data pretty much in the same way we did 10 years ago. This article will try to talk about its importance to the data lake from the perspective of \\"incremental processing\\".\\n\\n## Traditional data lakes lack the primitives for incremental processing\\n\\nIn the era of mobile Internet and Internet of Things, delayed arrival of data is very common. \\nHere we are involved in the definition of two time semantics: [event time and processing time](https://www.oreilly.com/radar/the-world-beyond-batch-streaming-101/). \\n\\nAs the name suggests:\\n\\n - **Event time:** the time when the event actually occurred;\\n - **Processing time:** the time when an event is observed (processed) in the system;\\n\\nIdeally, the event time and the processing time are the same, but in reality, they may have more or less deviation, which we often call \\"Time Skew\\". \\nWhether for low-latency stream computing or common batch processing, the processing of event time and processing time and late data is a common and difficult problem. \\nIn general, in order to ensure correctness, when we strictly follow the \\"event time\\" semantics, late data will trigger the \\n[recalculation of the time window](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/stream/operators/windows#late-elements-considerations) \\n(usually Hive partitions for batch processing), although the results of these \\"windows\\" may have been calculated or even interacted with the end user. \\nFor recalculation, the extensible key-value storage structure is usually used in streaming processing, which is processed incrementally at the record/event level and optimized \\nbased on point queries and updates. However, in data lakes, recalculating usually means rewriting the entire (immutable) Hive partition (or simply a folder in DFS), and \\nre-triggering the recalculation of cascading tasks that have consumed that Hive partition.\\n\\nWith data lakes supporting massive amounts of data, many long-tail businesses still have a strong demand for updating cold data. However, for a long time, \\nthe data in a single partition in the data lake was designed to be non-updatable. If it needs to be updated, the entire partition needs to be rewritten. \\nThis will seriously damage the efficiency of the entire ecosystem. From the perspective of latency and resource utilization, these operations on Hadoop will incur expensive overhead.\\nBesides, this overhead is usually also cascaded to the entire Hadoop data processing pipeline, which ultimately leads to an increase in latency by several hours.\\n\\nIn response to the two problems mentioned above, if the data lake supports fine-grained incremental processing, we can incorporate changes into existing Hive partitions \\nmore effectively, and provide a way for downstream table consumers to obtain only the changed data. For effectively supporting incremental processing, we can decompose it into the \\nfollowing two primitive operations:\\n\\n - **Update insert (upsert):** Conceptually, rewriting the entire partition can be regarded as a very inefficient upsert operation, which will eventually write much more data than the \\noriginal data itself. Therefore, support for (bulk) upsert is considered a very important feature. [Google\'s Mesa](https://research.google/pubs/pub42851/) (Google\'s data warehouse system) also \\ntalks about several techniques that can be applied to rapid data ingestion scenarios.\\n\\n - **Incremental consumption:** Although upsert can solve the problem of quickly releasing new data to a partition, downstream data consumers do not know \\n which data has been changed from which time in the past. Usually, consumers can only know the changed data by scanning the entire partition/data table and \\n recalculating all the data, which requires considerable time and resources. Therefore, we also need a mechanism to more efficiently obtain data records that \\n have changed since the last time the partition was consumed.\\n\\nWith the above two primitive operations, you can upsert a data set, and then incrementally consume from it, and create another (also incremental) data set to solve the two problems \\nwe mentioned above and support many common cases, so as to support end-to-end incremental processing and reduce end-to-end latency. These two primitives combine with each other, \\nunlocking the ability of stream/incremental processing based on DFS abstraction.\\n\\nThe storage scale of the data lake far exceeds that of the data warehouse. Although the two have different focuses on the definition of functions, \\nthere is still a considerable intersection (of course, there are still disputes and deviations from definition and implementation. \\nThis is not the topic this article tries to discuss). In any case, the data lake will support larger analytical data sets with cheaper storage, \\nso incremental processing is also very important for it. Next let\'s discuss the significance of incremental processing for the data lake.\\n\\n## The significance of incremental processing for the data lake\\n\\n### Streaming Semantics\\n\\nIt has long been stated that there is a \\"[dualism](https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying)\\" \\nbetween the change log (that is, the \\"flow\\" in the conventional sense we understand) and the table.\\n\\n![dualism](/assets/images/blog/incr-processing/image4.jpg)\\n\\nThe core of this discussion is: if there is a change log, you can use these changes to generate a data table and get the current status. If you update a table, \\nyou can record these changes and publish all \\"change logs\\" to the table\'s status information. This interchangeable nature is called \\"stream table duality\\" for short.\\n\\nA more general understanding of \\"stream table duality\\": when the business system is modifying the data in the MySQL table, MySQL will reflect these changes as Binlog, \\nif we publish these continuous Binlog (stream) to Kafka, and then let the downstream processing system subscribe to the Kafka, and use the state store to gradually \\naccumulate the intermediate results. Then the current state of this intermediate result can reflects the current snapshot of the table.\\n\\nIf the two primitives mentioned above that support incremental processing can be introduced to the data lake, the above pipeline, which can reflect the \\n\\"stream table duality\\", is also applicable on the data lake. Based on the first primitive, the data lake can also ingest the Binlog log streams in Kafka, \\nand then store these Binlog log streams into \\"tables\\" on the data lake. Based on the second primitive, these tables recognize the changed records as \\"Binlog\\" \\nstreams to support the incremental consumption of subsequent cascading tasks.\\n\\nOf course, as the data in the data lake needs to be landed on the final file/object storage, considering the trade-off between throughput and write performance, \\nBinlog on the data lake reacts to a small batch of change logs over a period of time on the stream. For example, the Apache Hudi community is further trying to \\nprovide an incremental view similar to Binlog for different Commits (a Commit refers to a batch of data write commit), \\nas shown in the following figure:\\n\\n![idu](/assets/images/blog/incr-processing/image1.png)\\n\\nRemarks in the \\"Flag\\" column:\\n\\nI: Insert;\\nD: Delete;\\nU: After image of Update;\\nX: Before image of Update;\\n\\nBased on the above discussion, we can think that incremental processing and stream are naturally compatible, and we can naturally connect them on the data lake.\\n\\n### Warehousing needs Incremental Processing\\n\\nIn the data warehouse, whether it is dimensional modeling or relational modeling theory, it is usually constructed based on the [layered design ideas](https://en.wikipedia.org/wiki/Data_warehouse#Design_methods). \\nIn terms of technical implementation, multiple stages (steps) of a long pipeline are formed by connecting multiple levels of ETL tasks through a workflow scheduling engine, \\nas shown in the following figure:\\n\\n![image2](/assets/images/blog/incr-processing/image2.png)\\n\\nAs the main application of the data warehouse, in the OLAP field, for the conventional business scenarios(for no or few changes), there are already some frameworks in the industry \\nthat focus on the scenarios where they are good at providing efficient analysis capabilities. However, in the Hadoop data warehouse/data lake ecosystem, \\nthere is still no good solution for the analysis scenario of frequent changes of business data.\\n\\nFor example, let\u2019s consider the scenario of updating the order status of a travel business. This scenario has a typical long-tail effect: \\nyou cannot know whether an order will be billed tomorrow, one month later, or one year later. In this scenario, the order table is the main data table, \\nbut usually we will derive other derived tables based on this table to support the modeling of various business scenarios. \\nThe initial update takes place in the order table at the ODS level, but the derived tables need to be updated in cascade.\\n\\nFor this scenario, in the past, once there is a change, people usually need to find the partition where the data to be updated is located in the Hive order \\ntable of the ODS layer, and update the entire partition, besides, the partition of the relevant data of the derived table needs to be updated in cascade.\\n\\nYes, someone will definitely think of that Kudu\'s support for Upsert can solve the problem of the old version of Hive missing the first incremental primitive. \\nBut the Kudu storage engine has its own limitations:\\n\\n 1. Performance: additional requirements for the hardware itself;\\n 2. Ecologically: In terms of adapting to mainstream big data computing frameworks and machine learning frameworks, it is far less advantageous than Hive;\\n 3. Cost: requires special maintenance costs and expenses;\\n 4. Did not solve the second primitive of incremental processing mentioned above: the problem of incremental consumption.\\n\\nIn summary, incremental processing has the following advantages on the data lake:\\n\\n**Performance improvement:** Ingesting data usually needs to handle updates, deletes, and enforce unique key constraints. Since incremental primitives support record-level updates, \\nit can bring orders of magnitude performance improvements to these operations. \\n\\n**Faster ETL/derived Pipelines:** An ubiquitous next step, once the data has been ingested from external sources is to build derived data pipelines using \\nApache Spark/Apache Hive or any other data processing framework to ETL the ingested data for a variety of use-cases like data warehouse, \\nmachine learning, or even just analytics. Typically, such processes again rely on batch processing jobs expressed in code or SQL. Such data pipelines can be speed up dramatically, \\nby querying one or more input tables using an incremental query instead of a regular snapshot query, resulting in only processing the incremental changes from upstream tables and \\nthen upsert or delete the target derived table.Similar to raw data ingestion, in order to reduce the data delay of the modelled table, the ETL job only needs to gradually extract the \\nchanged data from the original table and update the previously derived output table instead of rebuilding the entire output table every few hours .\\n\\n**Unified storage:** Based on the above two advantages, faster and lighter processing on the existing data lake means that only for the purpose of accessing near real-time data, \\nno special storage or data mart is needed.\\n\\nNext, we use two simple examples to illustrate how [incremental processing](https://www.oreilly.com/content/ubers-case-for-incremental-processing-on-hadoop/) can speed up the processing \\nof pipelines in analytical scenarios. First of all, data projection is the most common and easy to understand case:\\n\\n![image7](/assets/images/blog/incr-processing/image7.png)\\n\\nThis simple example shows that: by upserting new changes into table_1 and establishing a simple projected table (projected_table) through incremental consumption, we can \\noperate simpler with lower latency more efficiently projection.\\n\\nNext, for a more complex scenario, we can use incremental processing to support the stream and batch connections supported by the stream computing framework, \\nand stream-stream connections (just need to add some additional logic to align window) :\\n\\n![image6](/assets/images/blog/incr-processing/image6.png)\\n\\nThe example in the figure above connects a fact table to multiple dimension tables to create a connected table. This case is one of the rare scenarios where we can save hardware \\ncosts while significantly reducing latency.\\n\\n### Quasi-real-time scenarios, resource/efficiency trade-offs\\n\\nIncremental processing of new data in mini batches can use resources more efficiently. Let\'s refer to a specific example. We have a Kafka event stream that is pouring in \\nat a rate of 10,000 per second. We want to count the number of messages in some dimensions over the past 15 minutes. Many stream processing pipelines use an external/internal \\nresult state store (such as RocksDB, Cassandra, ElasticSearch) to save the aggregated count results, and run the containers in resource managers such as YARN/Mesos continuously, \\nwhich is very reasonable in less than a five-minute delay window scene. In fact, the YARN container itself has some startup overhead. In addition, in order to improve the \\nperformance of writing to result storage system, we usually cache the results before performing batch updates. This kind of protocol requires the container to run continuously.\\n\\nHowever, in quasi-real-time processing scenarios, these options may not be optimal. To achieve the same effect, you can use short-life containers and optimize overall \\nresource utilization. For example, a streaming processor may need to perform six million updates to the result storage system in 15 minutes. However, in the incremental \\nbatch mode, we only need to perform an in-memory merge on the accumulated data and update the result storage system only once, then only use the resource container for \\nfive minutes. Compared with the pure stream processing mode, the incremental batch processing mode has several times the CPU efficiency improvement, and there are several \\norders of magnitude efficiency improvement in updating to the result storage. Basically, this processing method obtains resources on demand, instead of swallowing CPU and \\nmemory while waiting for data to be calculated in real time.\\n\\n### Incremental processing facilitates unified data lake architecture\\n\\nWhether in the data warehouse or in the data lake, data processing is an unavoidable problem. Data processing involves the selection of computing engines and \\nthe design of architectures. There are currently two mainstream architectures in the industry: Lambda and Kappa architectures. Each architecture has its own \\ncharacteristics and existing problems. Derivative versions of these architectures are also [emerging endlessly](https://www.infoq.cn/article/Uo4pFswlMzBVhq*Y2tB9).\\n\\nIn reality, many enterprises still maintain the implementation of the [Lambda architecture]( https://en.wikipedia.org/wiki/Lambda_architecture). \\nThe typical Lambda architecture has two modules for the data processing part: the speed layer and the batch layer.\\n\\n![image5](/assets/images/blog/incr-processing/image5.png)\\n\\nThey are usually two independent implementations (from code to infrastructure). For example, Flink (formerly Storm) is a popular option on the speed layer, \\nwhile MapReduce/Spark can serve as a batch layer. In fact, people often rely on the speed layer to provide updated results (which may not be accurate), and \\nonce the data is considered complete, the results of the speed layer are corrected at a later time through the batch layer. With incremental processing, \\nwe have the opportunity to implement the Lambda architecture for batch processing and quasi-real-time processing at the code level and infrastructure level in \\na unified manner. It typically looks like below:\\n\\n![image3](/assets/images/blog/incr-processing/image3.png)\\n\\nAs we said, you can use SQL or a batch processing framework like Spark to consistently implement your processing logic. The result table is built incrementally, \\nand SQL is executed on \\"new data\\" like streaming to produce a quick view of the results. The same SQL can be executed periodically on the full amount of data to \\ncorrect any inaccurate results (remember, join operations are always tricky!) and produce a more \\"complete\\" view of the results. In both cases, we will use the \\nsame infrastructure to perform calculations, which can reduce overall operating costs and complexity.\\n\\nSetting aside the Lambda architecture, even in the Kappa architecture, the first primitive of incremental processing (upsert) also plays an important role. \\nUber [proposed](https://www.slideshare.net/FlinkForward/flink-forward-san-francisco-2019-moving-from-lambda-and-kappa-architectures-to-kappa-at-uber-roshan-naik) the Kappa + architecture \\nbased on this. The Kappa architecture advocates a single stream computing layer sufficient to become a general solution \\nfor data processing. Although the batch layer is removed in this model, there are still two problems in the service layer:\\n\\nNow days many stream processing engines support row-level data processing, which requires that our service layer should also support row-level updates;\\nThe trade-offs between data ingestion delay, scanning performance and computing resources and operational complexity are unavoidable.\\n\\n![image8](/assets/images/blog/incr-processing/image8.png)\\n\\nHowever, if our business scenarios have low latency requirements, for example, we can accept a delay of about 10 minutes. And if we can quickly ingest and prepare data on DFS, \\neffectively connect and propagate updates to the upper-level modeling data set, Speed Serving in the service layer is unnecessary. Then the service layer can be unified, \\ngreatly reducing the overall complexity and resource consumption of the system.\\n\\nAbove, we introduced the significance of incremental processing for the data lake. Next, we introduce the implementation and support of incremental processing. \\nAmong the three open source data lake frameworks (Apache Hudi/Iceberg, Delta Lake), only Apache Hudi provides good support for incremental processing. \\nThis is completely rooted in a framework developed by Uber at the time when it encountered the pain points of data analysis on the Hadoop data lake. \\nSo, next, let\'s introduce how Hudi supports incremental processing.\\n\\n## Hudi\'s support for incremental processing\\n\\nApache Hudi (Hadoop Upserts Deletes and Incrementals) is a top-level project of the Apache Foundation. It allows you to process very large-scale data on \\ntop of Hadoop-compatible storage, and it also provides two primitives that enable stream processing on the data lake in addition to classic batch processing.\\n\\nFrom the naming of the letter \\"I\\" denotes \\"Incremental Processing\\", we can see that it will support incremental processing as a first class citizen. \\nThe two primitives we mentioned at the beginning of this article that support incremental processing are reflected in the following two aspects in Apache Hudi:\\n\\nUpdate/Delete operation:Hudi provides support for updating/deleting records, using fine-grained file/record level indexes while providing transactional guarantees \\nfor the write operation. Queries process the last such committed snapshot, to produce results..\\n\\nChange stream: Hudi also provides first-class support for obtaining an incremental stream of all the records that were updated/inserted/deleted in a given table, from a given point-in-time.\\n\\nThe specific implementation of the change flow is \\"incremental view\\". Hudi is the only one of the three open source data lake frameworks that supports \\nthe incremental query feature, with support for record level change streams. The following sample code snippet shows us how to query the incremental view:\\n\\n\\n```java\\n// spark-shell\\n// reload data\\nspark.\\n  read.\\n  format(\\"hudi\\").\\n  load(basePath + \\"/*/*/*/*\\").\\n  createOrReplaceTempView(\\"hudi_trips_snapshot\\")\\n\\nval commits = spark.sql(\\"select distinct(_hoodie_commit_time) as commitTime from  hudi_trips_snapshot order by commitTime\\").map(k => k.getString(0)).take(50)\\nval beginTime = commits(commits.length - 2) // commit time we are interested in\\n\\n// incrementally query data\\nval tripsIncrementalDF = spark.read.format(\\"hudi\\").\\n  option(QUERY_TYPE_OPT_KEY, QUERY_TYPE_INCREMENTAL_OPT_VAL).\\n  option(BEGIN_INSTANTTIME_OPT_KEY, beginTime).\\n  load(basePath)\\ntripsIncrementalDF.createOrReplaceTempView(\\"hudi_trips_incremental\\")\\n\\nspark.sql(\\"select `_hoodie_commit_time`, fare, begin_lon, begin_lat, ts from  hudi_trips_incremental where fare > 20.0\\").show()\\n\\n```\\n\\nThe code snippet above creates a Hudi trip increment table (hudi_trips_incremental), and then queries all the change records in the increment table after the \\"beginTime\\" submission time \\nand the \\"cost\\"  is greater than 20.0. Based on this query, you can create incremental data pipelines on batch data.\\n\\n## Summary\\n\\nIn this article, we first elaborated many problems caused by the lack of incremental processing primitives in the traditional Hadoop data warehouse due to the trade-off between data integrity \\nand latency, and some long-tail applications that rely heavily on updates. Next, we argued that to support incremental processing, we must have at least two primitives: upsert and \\nincremental consumption, and explained why these two primitives can solve the problems explained above.\\n\\nThen, we introduced why incremental processing is also important to the data lake. There are many common parts in data processing between the data lake and the data warehouse. \\nIn the data warehouse, some \\"pain points\\" caused by the lack of incremental processing also exist in the data lake. We elaborated its significance to the data lake from four \\naspects: incremental processing of semantics of natural fit flow, the need for analytical scenarios, quasi-real-time scene resource/efficiency trade-offs, and unified lake architecture.\\n\\nFinally, we introduced the open source data lake storage framework Apache Hudi\'s support for incremental processing and simple cases."},{"id":"/2020/08/04/PrestoDB-and-Apache-Hudi","metadata":{"permalink":"/cn/blog/2020/08/04/PrestoDB-and-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-08-04-PrestoDB-and-Apache-Hudi.mdx","source":"@site/blog/2020-08-04-PrestoDB-and-Apache-Hudi.mdx","title":"PrestoDB and Apache Hudi","description":"Redirecting... please wait!!","date":"2020-08-04T00:00:00.000Z","formattedDate":"August 4, 2020","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"prestodb","permalink":"/cn/blog/tags/prestodb"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Bhavani Sudha Saktheeswaran"},{"name":"Brandon Scheller"}],"prevItem":{"title":"Incremental Processing on the Data Lake","permalink":"/cn/blog/2020/08/18/hudi-incremental-processing-on-data-lakes"},"nextItem":{"title":"Apache Hudi grows cloud data lake maturity","permalink":"/cn/blog/2020/06/16/Apache-Hudi-grows-cloud-data-lake-maturity"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://prestodb.io/blog/2020/08/04/prestodb-and-hudi\\">Redirecting... please wait!! </Redirect>"},{"id":"/2020/06/16/Apache-Hudi-grows-cloud-data-lake-maturity","metadata":{"permalink":"/cn/blog/2020/06/16/Apache-Hudi-grows-cloud-data-lake-maturity","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-06-16-Apache-Hudi-grows-cloud-data-lake-maturity.mdx","source":"@site/blog/2020-06-16-Apache-Hudi-grows-cloud-data-lake-maturity.mdx","title":"Apache Hudi grows cloud data lake maturity","description":"Redirecting... please wait!!","date":"2020-06-16T00:00:00.000Z","formattedDate":"June 16, 2020","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"techtarget","permalink":"/cn/blog/tags/techtarget"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Sean Michael Kerner"}],"prevItem":{"title":"PrestoDB and Apache Hudi","permalink":"/cn/blog/2020/08/04/PrestoDB-and-Apache-Hudi"},"nextItem":{"title":"Building a Large-scale Transactional Data Lake at Uber Using Apache Hudi","permalink":"/cn/blog/2020/06/09/Building-a-Large-scale-Transactional-Data-Lake-at-Uber-Using-Apache-Hudi"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://searchdatamanagement.techtarget.com/news/252484740/Apache-Hudi-grows-cloud-data-lake-maturity\\">Redirecting... please wait!! </Redirect>"},{"id":"/2020/06/09/Building-a-Large-scale-Transactional-Data-Lake-at-Uber-Using-Apache-Hudi","metadata":{"permalink":"/cn/blog/2020/06/09/Building-a-Large-scale-Transactional-Data-Lake-at-Uber-Using-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-06-09-Building-a-Large-scale-Transactional-Data-Lake-at-Uber-Using-Apache-Hudi.mdx","source":"@site/blog/2020-06-09-Building-a-Large-scale-Transactional-Data-Lake-at-Uber-Using-Apache-Hudi.mdx","title":"Building a Large-scale Transactional Data Lake at Uber Using Apache Hudi","description":"Redirecting... please wait!!","date":"2020-06-09T00:00:00.000Z","formattedDate":"June 9, 2020","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"datalake","permalink":"/cn/blog/tags/datalake"},{"label":"analytics at-scale","permalink":"/cn/blog/tags/analytics-at-scale"},{"label":"uber","permalink":"/cn/blog/tags/uber"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Nishith Agarwal"}],"prevItem":{"title":"Apache Hudi grows cloud data lake maturity","permalink":"/cn/blog/2020/06/16/Apache-Hudi-grows-cloud-data-lake-maturity"},"nextItem":{"title":"The Apache Software Foundation Announces Apache\xae Hudi\u2122 as a Top-Level Project","permalink":"/cn/blog/2020/06/04/The-Apache-Software-Foundation-Announces-Apache-Hudi-as-a-Top-Level-Project"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://eng.uber.com/apache-hudi-graduation/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2020/06/04/The-Apache-Software-Foundation-Announces-Apache-Hudi-as-a-Top-Level-Project","metadata":{"permalink":"/cn/blog/2020/06/04/The-Apache-Software-Foundation-Announces-Apache-Hudi-as-a-Top-Level-Project","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-06-04-The-Apache-Software-Foundation-Announces-Apache-Hudi-as-a-Top-Level-Project.mdx","source":"@site/blog/2020-06-04-The-Apache-Software-Foundation-Announces-Apache-Hudi-as-a-Top-Level-Project.mdx","title":"The Apache Software Foundation Announces Apache\xae Hudi\u2122 as a Top-Level Project","description":"Redirecting... please wait!!","date":"2020-06-04T00:00:00.000Z","formattedDate":"June 4, 2020","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"apache","permalink":"/cn/blog/tags/apache"}],"readingTime":0.045,"truncated":false,"authors":[],"prevItem":{"title":"Building a Large-scale Transactional Data Lake at Uber Using Apache Hudi","permalink":"/cn/blog/2020/06/09/Building-a-Large-scale-Transactional-Data-Lake-at-Uber-Using-Apache-Hudi"},"nextItem":{"title":"Monitor Hudi metrics with Datadog","permalink":"/cn/blog/2020/05/28/monitoring-hudi-metrics-with-datadog"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://blogs.apache.org/foundation/entry/the-apache-software-foundation-announces64\\">Redirecting... please wait!! </Redirect>"},{"id":"/2020/05/28/monitoring-hudi-metrics-with-datadog","metadata":{"permalink":"/cn/blog/2020/05/28/monitoring-hudi-metrics-with-datadog","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-05-28-monitoring-hudi-metrics-with-datadog.md","source":"@site/blog/2020-05-28-monitoring-hudi-metrics-with-datadog.md","title":"Monitor Hudi metrics with Datadog","description":"Availability","date":"2020-05-28T00:00:00.000Z","formattedDate":"May 28, 2020","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"metrics","permalink":"/cn/blog/tags/metrics"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":1.415,"truncated":true,"authors":[{"name":"rxu"}],"prevItem":{"title":"The Apache Software Foundation Announces Apache\xae Hudi\u2122 as a Top-Level Project","permalink":"/cn/blog/2020/06/04/The-Apache-Software-Foundation-Announces-Apache-Hudi-as-a-Top-Level-Project"},"nextItem":{"title":"Apache Hudi Support on Apache Zeppelin","permalink":"/cn/blog/2020/04/27/apache-hudi-apache-zepplin"}},"content":"## Availability\\n\\n**0.6.0 (unreleased)**\\n\\n## Introduction\\n\\n[Datadog](https://www.datadoghq.com/) is a popular monitoring service. In the upcoming `0.6.0` release of Apache Hudi, we will introduce the feature of reporting Hudi metrics via Datadog HTTP API, in addition to the current reporter types: Graphite and JMX.\\n\x3c!--truncate--\x3e\\n## Configurations\\n\\nSimilar to other supported reporters, turning on Datadog reporter requires these 2 properties.\\n\\n```properties\\nhoodie.metrics.on=true\\nhoodie.metrics.reporter.type=DATADOG\\n```\\n\\nThe following property sets the Datadog API site. It determines whether the requests will be sent to `api.datadoghq.eu` (EU) or `api.datadoghq.com` (US). Set this according to your Datadog account settings.\\n\\n```properties\\nhoodie.metrics.datadog.api.site=EU # or US\\n```\\n\\nThe property `hoodie.metrics.datadog.api.key` allows you to set the api key directly from the configuration. \\n\\n```properties\\nhoodie.metrics.datadog.api.key=<your api key>\\nhoodie.metrics.datadog.api.key.supplier=<your api key supplier>\\n```\\n\\nDue to security consideration in some cases, you may prefer to return the api key at runtime. To go with this approach, implement `java.util.function.Supplier<String>` and set the implementation\'s FQCN to `hoodie.metrics.datadog.api.key.supplier`, and make sure `hoodie.metrics.datadog.api.key` is _not_ set since it will take higher precedence.\\n\\nThe following property helps segregate metrics by setting different prefixes for different jobs. \\n\\n```properties\\nhoodie.metrics.datadog.metric.prefix=<your metrics prefix>\\n```\\n\\nNote that it will use `.` to delimit the prefix and the metric name. For example, if the prefix is set to `foo`, then `foo.` will be prepended to the metric name.\\n\\nThere are other optional properties, which are explained in the configuration reference page.\\n\\n## Demo\\n\\nIn this demo, we ran a `HoodieDeltaStreamer` job with metrics turn on and other configurations set properly. \\n\\n![datadog metrics demo](/assets/images/blog/2020-05-28-datadog-metrics-demo.png)\\n\\nAs shown above, we were able to collect Hudi\'s action-related metrics like\\n\\n- `<prefix>.<table name>.commit.totalScanTime`\\n- `<prefix>.<table name>.clean.duration`\\n- `<prefix>.<table name>.index.lookup.duration`\\n\\nas well as `HoodieDeltaStreamer`-specific metrics\\n\\n- `<prefix>.<table name>.deltastreamer.duration`\\n- `<prefix>.<table name>.deltastreamer.hiveSyncDuration`"},{"id":"/2020/04/27/apache-hudi-apache-zepplin","metadata":{"permalink":"/cn/blog/2020/04/27/apache-hudi-apache-zepplin","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-04-27-apache-hudi-apache-zepplin.md","source":"@site/blog/2020-04-27-apache-hudi-apache-zepplin.md","title":"Apache Hudi Support on Apache Zeppelin","description":"1. Introduction","date":"2020-04-27T00:00:00.000Z","formattedDate":"April 27, 2020","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"apache zeppelin","permalink":"/cn/blog/tags/apache-zeppelin"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":2.23,"truncated":true,"authors":[{"name":"leesf"}],"prevItem":{"title":"Monitor Hudi metrics with Datadog","permalink":"/cn/blog/2020/05/28/monitoring-hudi-metrics-with-datadog"},"nextItem":{"title":"Export Hudi datasets as a copy or as different formats","permalink":"/cn/blog/2020/03/22/exporting-hudi-datasets"}},"content":"## 1. Introduction\\nApache Zeppelin is a web-based notebook that provides interactive data analysis. It is convenient for you to make beautiful documents that can be data-driven, interactive, and collaborative, and supports multiple languages, including Scala (using Apache Spark), Python (Apache Spark), SparkSQL, Hive, Markdown, Shell, and so on. Hive and SparkSQL currently support querying Hudi\u2019s read-optimized view and real-time view. So in theory, Zeppelin\u2019s notebook should also have such query capabilities.\\n\x3c!--truncate--\x3e\\n## 2. Achieve the effect\\n### 2.1 Hive\\n\\n### 2.1.1 Read optimized view\\n![Read Optimized View](/assets/images/blog/read_optimized_view.png)\\n\\n### 2.1.2 Real-time view\\n![Real-time View](/assets/images/blog/real_time_view.png)\\n\\n### 2.2 Spark SQL\\n\\n### 2.2.1 Read optimized view\\n![Read Optimized View](/assets/images/blog/spark_read_optimized_view.png)\\n\\n### 2.2.2 Real-time view\\n![Real-time View](/assets/images/blog/spark_real_time_view.png)\\n\\n## 3. Common problems\\n\\n### 3.1 Hudi package adaptation\\nZeppelin will load the packages under lib by default when starting. For external dependencies such as Hudi, it is suitable to be placed directly under zeppelin / lib to avoid Hive or Spark SQL not finding the corresponding Hudi dependency on the cluster.\\n\\n### 3.2 Parquet jar package adaptation\\nThe parquet version of the Hudi package is 1.10, and the current parquet version of the CDH cluster is 1.9, so when executing the Hudi table query, many jar package conflict errors will be reported.\\n\\n**Solution**: upgrade the parquet package to 1.10 in the spark / jars directory of the node where zepeelin is located.\\n**Side effects**: The tasks of saprk jobs other than zeppelin assigned to the cluster nodes of parquet 1.10 may fail.\\n**Suggestions**: Clients other than zeppelin will also have jar conflicts. Therefore, it is recommended to fully upgrade the spark jar, parquet jar and related dependent jars of the cluster to better adapt to Hudi\u2019s capabilities.\\n\\n### 3.3 Spark Interpreter adaptation\\n\\nThe same SQL using Spark SQL query on Zeppelin will have more records than the hive query.\\n\\n**Cause of the problem**: When reading and writing Parquet tables to the Hive metastore, Spark SQL will use the Parquet SerDe (SerDe: Serialize / Deserilize for short) for Spark serialization and deserialization, not the Hive\u2019s SerDe, because Spark SQL\u2019s own SerDe has better performance.\\n\\nThis causes Spark SQL to only query Hudi\u2019s pipeline records, not the final merge result.\\n\\n**Solution**: set `spark.sql.hive.convertMetastoreParquet=false`\\n\\n 1. **Method 1**: Edit properties directly on the page**\\n![](/assets/images/blog/spark_edit_properties.png)\\n 2. **Method 2**: Edit `zeppelin / conf / interpreter.json` and add**\\n\\n```json\\n\\"spark.sql.hive.convertMetastoreParquet\\": {\\n  \\"name\\": \\"spark.sql.hive.convertMetastoreParquet\\",\\n  \\"value\\": false,\\n  \\"type\\": \\"checkbox\\"\\n}\\n```\\n## 4. Hudi incremental view\\n\\nFor Hudi incremental view, currently only supports pulling by writing Spark code. Considering that Zeppelin has the ability to execute code and shell commands directly on the notebook, later consider packaging these notebooks to query Hudi incremental views in a way that supports SQL."},{"id":"/2020/03/22/exporting-hudi-datasets","metadata":{"permalink":"/cn/blog/2020/03/22/exporting-hudi-datasets","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-03-22-exporting-hudi-datasets.md","source":"@site/blog/2020-03-22-exporting-hudi-datasets.md","title":"Export Hudi datasets as a copy or as different formats","description":"Copy to Hudi dataset","date":"2020-03-22T00:00:00.000Z","formattedDate":"March 22, 2020","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"snapshot-exporter","permalink":"/cn/blog/tags/snapshot-exporter"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":1.695,"truncated":true,"authors":[{"name":"rxu"}],"prevItem":{"title":"Apache Hudi Support on Apache Zeppelin","permalink":"/cn/blog/2020/04/27/apache-hudi-apache-zepplin"},"nextItem":{"title":"Change Capture Using AWS Database Migration Service and Hudi","permalink":"/cn/blog/2020/01/20/change-capture-using-aws"}},"content":"### Copy to Hudi dataset\\n\\nSimilar to the existing  `HoodieSnapshotCopier`, the Exporter scans the source dataset and then makes a copy of it to the target output path.\\n\x3c!--truncate--\x3e\\n```bash\\nspark-submit \\\\\\n  --jars \\"packaging/hudi-spark-bundle/target/hudi-spark-bundle_2.11-0.6.0-SNAPSHOT.jar\\" \\\\\\n  --deploy-mode \\"client\\" \\\\\\n  --class \\"org.apache.hudi.utilities.HoodieSnapshotExporter\\" \\\\\\n      packaging/hudi-utilities-bundle/target/hudi-utilities-bundle_2.11-0.6.0-SNAPSHOT.jar \\\\\\n  --source-base-path \\"/tmp/\\" \\\\\\n  --target-output-path \\"/tmp/exported/hudi/\\" \\\\\\n  --output-format \\"hudi\\"\\n```\\n\\n### Export to json or parquet dataset\\nThe Exporter can also convert the source dataset into other formats. Currently only \\"json\\" and \\"parquet\\" are supported.\\n\\n```bash\\nspark-submit \\\\\\n  --jars \\"packaging/hudi-spark-bundle/target/hudi-spark-bundle_2.11-0.6.0-SNAPSHOT.jar\\" \\\\\\n  --deploy-mode \\"client\\" \\\\\\n  --class \\"org.apache.hudi.utilities.HoodieSnapshotExporter\\" \\\\\\n      packaging/hudi-utilities-bundle/target/hudi-utilities-bundle_2.11-0.6.0-SNAPSHOT.jar \\\\\\n  --source-base-path \\"/tmp/\\" \\\\\\n  --target-output-path \\"/tmp/exported/json/\\" \\\\\\n  --output-format \\"json\\"  # or \\"parquet\\"\\n```\\n\\n### Re-partitioning\\n\\nWhen export to a different format, the Exporter takes parameters to do some custom re-partitioning. By default, if neither of the 2 parameters below is given, the output dataset will have no partition.\\n\\n#### `--output-partition-field`\\n\\nThis parameter uses an existing non-metadata field as the output partitions. All  `_hoodie_*`  metadata field will be stripped during export.\\n\\n```bash\\nspark-submit \\\\\\n  --jars \\"packaging/hudi-spark-bundle/target/hudi-spark-bundle_2.11-0.6.0-SNAPSHOT.jar\\" \\\\\\n  --deploy-mode \\"client\\" \\\\\\n  --class \\"org.apache.hudi.utilities.HoodieSnapshotExporter\\" \\\\\\n      packaging/hudi-utilities-bundle/target/hudi-utilities-bundle_2.11-0.6.0-SNAPSHOT.jar \\\\  \\n  --source-base-path \\"/tmp/\\" \\\\\\n  --target-output-path \\"/tmp/exported/json/\\" \\\\\\n  --output-format \\"json\\" \\\\\\n  --output-partition-field \\"symbol\\"  # assume the source dataset contains a field `symbol`\\n```\\n\\nThe output directory will look like this\\n\\n```bash\\n`_SUCCESS symbol=AMRS symbol=AYX symbol=CDMO symbol=CRC symbol=DRNA ...`\\n```\\n\\n#### `--output-partitioner`\\n\\nThis parameter takes in a fully-qualified name of a class that implements  `HoodieSnapshotExporter.Partitioner`. This parameter takes higher precedence than  `--output-partition-field`, which will be ignored if this is provided.\\n\\nAn example implementation is shown below:\\n\\n**MyPartitioner.java**\\n\\n```java\\npackage com.foo.bar;\\npublic class MyPartitioner implements HoodieSnapshotExporter.Partitioner {\\n\\n  private static final String PARTITION_NAME = \\"date\\";\\n \\n  @Override\\n  public DataFrameWriter<Row> partition(Dataset<Row> source) {\\n    // use the current hoodie partition path as the output partition\\n    return source\\n        .withColumnRenamed(HoodieRecord.PARTITION_PATH_METADATA_FIELD, PARTITION_NAME)\\n        .repartition(new Column(PARTITION_NAME))\\n        .write()\\n        .partitionBy(PARTITION_NAME);\\n  }\\n}\\n```\\n\\nAfter putting this class in `my-custom.jar`, which is then placed on the job classpath, the submit command will look like this:\\n\\n```bash\\nspark-submit \\\\\\n  --jars \\"packaging/hudi-spark-bundle/target/hudi-spark-bundle_2.11-0.6.0-SNAPSHOT.jar,my-custom.jar\\" \\\\\\n  --deploy-mode \\"client\\" \\\\\\n  --class \\"org.apache.hudi.utilities.HoodieSnapshotExporter\\" \\\\\\n      packaging/hudi-utilities-bundle/target/hudi-utilities-bundle_2.11-0.6.0-SNAPSHOT.jar \\\\\\n  --source-base-path \\"/tmp/\\" \\\\\\n  --target-output-path \\"/tmp/exported/json/\\" \\\\\\n  --output-format \\"json\\" \\\\\\n  --output-partitioner \\"com.foo.bar.MyPartitioner\\"\\n```"},{"id":"/2020/01/20/change-capture-using-aws","metadata":{"permalink":"/cn/blog/2020/01/20/change-capture-using-aws","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-01-20-change-capture-using-aws.md","source":"@site/blog/2020-01-20-change-capture-using-aws.md","title":"Change Capture Using AWS Database Migration Service and Hudi","description":"One of the core use-cases for Apache Hudi is enabling seamless, efficient database ingestion to your data lake. Even though a lot has been talked about and even users already adopting this model, content on how to go about this is sparse.","date":"2020-01-20T00:00:00.000Z","formattedDate":"January 20, 2020","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"change-data-capture","permalink":"/cn/blog/tags/change-data-capture"},{"label":"cdc","permalink":"/cn/blog/tags/cdc"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":7.42,"truncated":true,"authors":[{"name":"vinoth"}],"prevItem":{"title":"Export Hudi datasets as a copy or as different formats","permalink":"/cn/blog/2020/03/22/exporting-hudi-datasets"},"nextItem":{"title":"Delete support in Hudi","permalink":"/cn/blog/2020/01/15/delete-support-in-hudi"}},"content":"One of the core use-cases for Apache Hudi is enabling seamless, efficient database ingestion to your data lake. Even though a lot has been talked about and even users already adopting this model, content on how to go about this is sparse.\\n\\nIn this blog, we will build an end-end solution for capturing changes from a MySQL instance running on AWS RDS to a Hudi table on S3, using capabilities in the Hudi  **0.5.1 release**\\n\x3c!--truncate--\x3e\\n  \\n\\nWe can break up the problem into two pieces.\\n\\n1.  **Extracting change logs from MySQL**  : Surprisingly, this is still a pretty tricky problem to solve and often Hudi users get stuck here. Thankfully, at-least for AWS users, there is a  [Database Migration service](https://aws.amazon.com/dms/)  (DMS for short), that does this change capture and uploads them as parquet files on S3\\n2.  **Applying these change logs to your data lake table**  : Once there are change logs in some form, the next step is to apply them incrementally to your table. This mundane task can be fully automated using the Hudi  [DeltaStreamer](http://hudi.apache.org/docs/writing_data#deltastreamer)  tool.\\n\\n  \\n\\nThe actual end-end architecture looks something like this.\\n![enter image description here](/assets/images/blog/change-capture-architecture.png)\\n\\nLet\'s now illustrate how one can accomplish this using a simple _orders_ table, stored in MySQL (these instructions should broadly apply to other database engines like Postgres, or Aurora as well, though SQL/Syntax may change)\\n\\n```java\\nCREATE DATABASE hudi_dms;\\nUSE hudi_dms;\\n     \\nCREATE TABLE orders(\\n   order_id INTEGER,\\n   order_qty INTEGER,\\n   customer_name VARCHAR(100),\\n   updated_at TIMESTAMP DEFAULT NOW() ON UPDATE NOW(),\\n   created_at TIMESTAMP DEFAULT NOW(),\\n   CONSTRAINT orders_pk PRIMARY KEY(order_id)\\n);\\n \\nINSERT INTO orders(order_id, order_qty, customer_name) VALUES(1, 10, \'victor\');\\nINSERT INTO orders(order_id, order_qty, customer_name) VALUES(2, 20, \'peter\');\\n```\\n\\nIn the table, _order_id_ is the primary key which will be enforced on the Hudi table as well. Since a batch of change records can contain changes to the same primary key, we also include _updated_at_ and _created_at_ fields, which are kept upto date as writes happen to the table.\\n\\n### Extracting Change logs from MySQL\\n\\nBefore we can configure DMS, we first need to [prepare the MySQL instance](https://aws.amazon.com/premiumsupport/knowledge-center/enable-binary-logging-aurora/)  for change capture, by ensuring backups are enabled and binlog is turned on.\\n![](/assets/images/blog/change-logs-mysql.png)\\n\\nNow, proceed to create endpoints in DMS that capture MySQL data and  [store in S3, as parquet files](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3).\\n\\n-   Source _hudi-source-db_ endpoint, points to the DB server and provides basic authentication details\\n-   Target _parquet-s3_ endpoint, points to the bucket and folder on s3 to store the change logs records as parquet files\\n![](/assets/images/blog/s3-endpoint-configuration-1.png)\\n![](/assets/images/blog/s3-endpoint-configuration-2.png)\\n![](/assets/images/blog/s3-endpoint-list.png)\\n\\nThen proceed to create a migration task, as below. Give it a name, connect the source to the target and be sure to pick the right _Migration type_ as shown below, to ensure ongoing changes are continuously replicated to S3. Also make sure to specify, the rules using which DMS decides which MySQL schema/tables to replicate. In this example, we simply whitelist _orders_ table under the _hudi_dms_ schema, as specified in the table SQL above.\\n\\n![](/assets/images/blog/s3-migration-task-1.png)\\n![](/assets/images/blog/s3-migration-task-2.png)\\n\\nStarting the DMS task and should result in an initial load, like below.\\n\\n![](/assets/images/blog/dms-task.png)\\n\\nSimply reading the raw initial load file, shoud give the same values as the upstream table\\n\\n```scala\\nscala> spark.read.parquet(\\"s3://hudi-dms-demo/orders/hudi_dms/orders/*\\").sort(\\"updated_at\\").show\\n \\n+--------+---------+-------------+-------------------+-------------------+\\n|order_id|order_qty|customer_name|         updated_at|         created_at|\\n+--------+---------+-------------+-------------------+-------------------+\\n|       2|       10|        peter|2020-01-20 20:12:22|2020-01-20 20:12:22|\\n|       1|       10|       victor|2020-01-20 20:12:31|2020-01-20 20:12:31|\\n+--------+---------+-------------+-------------------+-------------------+\\n\\n```\\n\\n## Applying Change Logs using Hudi DeltaStreamer\\n\\nNow, we are ready to start consuming the change logs. Hudi DeltaStreamer runs as Spark job on your favorite workflow scheduler (it also supports a continuous mode using _--continuous_ flag, where it runs as a long running Spark job), that tails a given path on S3 (or any DFS implementation) for new files and can issue an _upsert_ to a target hudi dataset. The tool automatically checkpoints itself and thus to repeatedly ingest, all one needs to do is to keep executing the DeltaStreamer periodically.\\n\\nWith an initial load already on S3, we then run the following command (deltastreamer command, here on) to ingest the full load first and create a Hudi dataset on S3.\\n\\n```bash\\nspark-submit --class org.apache.hudi.utilities.deltastreamer.HoodieDeltaStreamer  \\\\\\n  --packages org.apache.spark:spark-avro_2.11:2.4.4 \\\\\\n  --master yarn --deploy-mode client \\\\\\n  hudi-utilities-bundle_2.11-0.5.1-SNAPSHOT.jar \\\\\\n  --table-type COPY_ON_WRITE \\\\\\n  --source-ordering-field updated_at \\\\\\n  --source-class org.apache.hudi.utilities.sources.ParquetDFSSource \\\\\\n  --target-base-path s3://hudi-dms-demo/hudi_orders --target-table hudi_orders \\\\\\n  --transformer-class org.apache.hudi.utilities.transform.AWSDmsTransformer \\\\\\n  --payload-class org.apache.hudi.payload.AWSDmsAvroPayload \\\\\\n  --hoodie-conf hoodie.datasource.write.recordkey.field=order_id,hoodie.datasource.write.partitionpath.field=customer_name,hoodie.deltastreamer.source.dfs.root=s3://hudi-dms-demo/orders/hudi_dms/orders\\n```\\n\\nA few things are going on here\\n\\n-   First, we specify the _--table-type_ as COPY_ON_WRITE. Hudi also supports another _MERGE_ON_READ ty_pe you can use if you choose from.\\n-   To handle cases where the input parquet files contain multiple updates/deletes or insert/updates to the same record, we use _updated_at_ as the ordering field. This ensures that the change record which has the latest timestamp will be reflected in Hudi.\\n-   We specify a target base path and a table table, all needed for creating and writing to the Hudi table\\n-   We use a special payload class - _AWSDMSAvroPayload_ , to handle the different change operations correctly. The parquet files generated have an _Op_ field, that indicates whether a given change record is an insert (I), delete (D) or update (U) and the payload implementation uses this field to decide how to handle a given change record.\\n-   You may also notice a special transformer class _AWSDmsTransformer_ , being specified. The reason here is tactical, but important. The initial load file does not contain an _Op_ field, so this adds one to Hudi table schema additionally.\\n-   Finally, we specify the record key for the Hudi table as same as the upstream table. Then we specify partitioning by _customer_name_  and also the root of the DMS output.\\n\\nOnce the command is run, the Hudi table should be created and have same records as the upstream table (with all the _hoodie fields as well).\\n\\n```scala\\nscala> spark.read.format(\\"org.apache.hudi\\").load(\\"s3://hudi-dms-demo/hudi_orders/*/*.parquet\\").show\\n+-------------------+--------------------+------------------+----------------------+--------------------+--------+---------+-------------+-------------------+-------------------+---+\\n|_hoodie_commit_time|_hoodie_commit_seqno|_hoodie_record_key|_hoodie_partition_path|   _hoodie_file_name|order_id|order_qty|customer_name|         updated_at|         created_at| Op|\\n+-------------------+--------------------+------------------+----------------------+--------------------+--------+---------+-------------+-------------------+-------------------+---+\\n|     20200120205028|  20200120205028_0_1|                 2|                 peter|af9a2525-a486-40e...|       2|       10|        peter|2020-01-20 20:12:22|2020-01-20 20:12:22|   |\\n|     20200120205028|  20200120205028_1_1|                 1|                victor|8e431ece-d51c-4c7...|       1|       10|       victor|2020-01-20 20:12:31|2020-01-20 20:12:31|   |\\n+-------------------+--------------------+------------------+----------------------+--------------------+--------+---------+-------------+-------------------+-------------------+---+\\n```\\n\\nNow, let\'s do an insert and an update\\n\\n```java\\nINSERT INTO orders(order_id, order_qty, customer_name) VALUES(3, 30, \'sandy\');\\nUPDATE orders set order_qty = 20 where order_id = 2;\\n```\\n\\nThis will add a new parquet file to the DMS output folder and when the deltastreamer command is run again, it will go ahead and apply these to the Hudi table.\\n\\nSo, querying the Hudi table now would yield 3 rows and the _hoodie_commit_time_ accurately reflects when these writes happened. You can notice that order_qty for order_id=2, is updated from 10 to 20!\\n\\n```bash\\n+-------------------+--------------------+------------------+----------------------+--------------------+---+--------+---------+-------------+-------------------+-------------------+\\n|_hoodie_commit_time|_hoodie_commit_seqno|_hoodie_record_key|_hoodie_partition_path|   _hoodie_file_name| Op|order_id|order_qty|customer_name|         updated_at|         created_at|\\n+-------------------+--------------------+------------------+----------------------+--------------------+---+--------+---------+-------------+-------------------+-------------------+\\n|     20200120211526|  20200120211526_0_1|                 2|                 peter|af9a2525-a486-40e...|  U|       2|       20|        peter|2020-01-20 21:11:47|2020-01-20 20:12:22|\\n|     20200120211526|  20200120211526_1_1|                 3|                 sandy|566eb34a-e2c5-44b...|  I|       3|       30|        sandy|2020-01-20 21:11:24|2020-01-20 21:11:24|\\n|     20200120205028|  20200120205028_1_1|                 1|                victor|8e431ece-d51c-4c7...|   |       1|       10|       victor|2020-01-20 20:12:31|2020-01-20 20:12:31|\\n+-------------------+--------------------+------------------+----------------------+--------------------+---+--------+---------+-------------+-------------------+-------------------+\\n```\\n\\nA nice debugging aid would be read all of the DMS output now and sort it by update_at, which should give us a sequence of changes that happened on the upstream table. As we can see, the Hudi table above is a compacted snapshot of this raw change log.\\n\\n```bash\\n+----+--------+---------+-------------+-------------------+-------------------+\\n|  Op|order_id|order_qty|customer_name|         updated_at|         created_at|\\n+----+--------+---------+-------------+-------------------+-------------------+\\n|null|       2|       10|        peter|2020-01-20 20:12:22|2020-01-20 20:12:22|\\n|null|       1|       10|       victor|2020-01-20 20:12:31|2020-01-20 20:12:31|\\n|   I|       3|       30|        sandy|2020-01-20 21:11:24|2020-01-20 21:11:24|\\n|   U|       2|       20|        peter|2020-01-20 21:11:47|2020-01-20 20:12:22|\\n+----+--------+---------+-------------+-------------------+-------------------+\\n```\\n\\nInitial load with no _Op_ field value , followed by an insert and an update.\\n\\nNow, lets do deletes an inserts\\n\\n```java\\nDELETE FROM orders WHERE order_id = 2;\\nINSERT INTO orders(order_id, order_qty, customer_name) VALUES(4, 40, \'barry\');\\nINSERT INTO orders(order_id, order_qty, customer_name) VALUES(5, 50, \'nathan\');\\n```\\n\\nThis should result in more files on S3, written by DMS , which the DeltaStreamer command will continue to process incrementally (i.e only the newly written files are read each time)\\n\\n![](/assets/images/blog/dms-demo-files.png)\\n\\nRunning the deltastreamer command again, would result in the follow state for the Hudi table. You can notice the two new records and that the _order_id=2_ is now gone\\n\\n```bash\\n+-------------------+--------------------+------------------+----------------------+--------------------+---+--------+---------+-------------+-------------------+-------------------+\\n|_hoodie_commit_time|_hoodie_commit_seqno|_hoodie_record_key|_hoodie_partition_path|   _hoodie_file_name| Op|order_id|order_qty|customer_name|         updated_at|         created_at|\\n+-------------------+--------------------+------------------+----------------------+--------------------+---+--------+---------+-------------+-------------------+-------------------+\\n|     20200120212522|  20200120212522_1_1|                 5|                nathan|3da94b20-c70b-457...|  I|       5|       50|       nathan|2020-01-20 21:23:00|2020-01-20 21:23:00|\\n|     20200120212522|  20200120212522_2_1|                 4|                 barry|8cc46715-8f0f-48a...|  I|       4|       40|        barry|2020-01-20 21:22:49|2020-01-20 21:22:49|\\n|     20200120211526|  20200120211526_1_1|                 3|                 sandy|566eb34a-e2c5-44b...|  I|       3|       30|        sandy|2020-01-20 21:11:24|2020-01-20 21:11:24|\\n|     20200120205028|  20200120205028_1_1|                 1|                victor|8e431ece-d51c-4c7...|   |       1|       10|       victor|2020-01-20 20:12:31|2020-01-20 20:12:31|\\n+-------------------+--------------------+------------------+----------------------+--------------------+---+--------+---------+-------------+-------------------+-------------------+\\n```\\n\\nOur little informal change log query yields the following.\\n\\n```bash\\n+----+--------+---------+-------------+-------------------+-------------------+\\n|  Op|order_id|order_qty|customer_name|         updated_at|         created_at|\\n+----+--------+---------+-------------+-------------------+-------------------+\\n|null|       2|       10|        peter|2020-01-20 20:12:22|2020-01-20 20:12:22|\\n|null|       1|       10|       victor|2020-01-20 20:12:31|2020-01-20 20:12:31|\\n|   I|       3|       30|        sandy|2020-01-20 21:11:24|2020-01-20 21:11:24|\\n|   U|       2|       20|        peter|2020-01-20 21:11:47|2020-01-20 20:12:22|\\n|   D|       2|       20|        peter|2020-01-20 21:11:47|2020-01-20 20:12:22|\\n|   I|       4|       40|        barry|2020-01-20 21:22:49|2020-01-20 21:22:49|\\n|   I|       5|       50|       nathan|2020-01-20 21:23:00|2020-01-20 21:23:00|\\n+----+--------+---------+-------------+-------------------+-------------------+\\n```\\n\\nNote that the delete and update have the same _updated_at,_ value. thus it can very well order differently here.. In short this way of looking at the changelog has its caveats. For a true changelog of the Hudi table itself, you can issue an [incremental query](http://hudi.apache.org/docs/querying_data).\\n\\nAnd Life goes on ..... Hope this was useful to all the data engineers out there!"},{"id":"/2020/01/15/delete-support-in-hudi","metadata":{"permalink":"/cn/blog/2020/01/15/delete-support-in-hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2020-01-15-delete-support-in-hudi.md","source":"@site/blog/2020-01-15-delete-support-in-hudi.md","title":"Delete support in Hudi","description":"Deletes are supported at a record level in Hudi with 0.5.1 release. This blog is a \\"how to\\" blog on how to delete records in hudi. Deletes can be done with 3 flavors: Hudi RDD APIs, with Spark data source and with DeltaStreamer.","date":"2020-01-15T00:00:00.000Z","formattedDate":"January 15, 2020","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"delete","permalink":"/cn/blog/tags/delete"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":3.835,"truncated":true,"authors":[{"name":"shivnarayan"}],"prevItem":{"title":"Change Capture Using AWS Database Migration Service and Hudi","permalink":"/cn/blog/2020/01/20/change-capture-using-aws"},"nextItem":{"title":"New \u2013 Insert, Update, Delete Data on S3 with Amazon EMR and Apache Hudi","permalink":"/cn/blog/2019/11/15/New-Insert-Update-Delete-Data-on-S3-with-Amazon-EMR-and-Apache-Hudi"}},"content":"Deletes are supported at a record level in Hudi with 0.5.1 release. This blog is a \\"how to\\" blog on how to delete records in hudi. Deletes can be done with 3 flavors: Hudi RDD APIs, with Spark data source and with DeltaStreamer.\\n\x3c!--truncate--\x3e\\n### Delete using RDD Level APIs\\n\\nIf you have embedded  _HoodieWriteClient_ , then deletion is as simple as passing in a  _JavaRDD&#60;HoodieKey&#62;_ to the delete api.\\n\\n```java\\n// Fetch list of HoodieKeys from elsewhere that needs to be deleted\\n// convert to JavaRDD if required. JavaRDD<HoodieKey> toBeDeletedKeys\\nList<WriteStatus> statuses = writeClient.delete(toBeDeletedKeys, commitTime);\\n```\\n\\n### Deletion with Datasource\\n\\nNow we will walk through an example of how to perform deletes on a sample dataset using the Datasource API. Quick Start has the same example as below. Feel free to check it out.\\n\\n**Step 1** : Launch spark shell\\n\\n```bash\\nbin/spark-shell --packages org.apache.hudi:hudi-spark-bundle:0.5.1-incubating \\\\\\n  --conf \'spark.serializer=org.apache.spark.serializer.KryoSerializer\'\\n```\\n**Step 2** : Import as required and set up table name, etc for sample dataset\\n\\n```scala\\nimport org.apache.hudi.QuickstartUtils._\\nimport scala.collection.JavaConversions._\\nimport org.apache.spark.sql.SaveMode._\\nimport org.apache.hudi.DataSourceReadOptions._\\nimport org.apache.hudi.DataSourceWriteOptions._\\nimport org.apache.hudi.config.HoodieWriteConfig._\\n     \\nval tableName = \\"hudi_cow_table\\"\\nval basePath = \\"file:///tmp/hudi_cow_table\\"\\nval dataGen = new DataGenerator\\n```\\n\\n**Step 3** : Insert data. Generate some new trips, load them into a DataFrame and write the DataFrame into the Hudi dataset as below.\\n\\n```scala\\nval inserts = convertToStringList(dataGen.generateInserts(10))\\nval df = spark.read.json(spark.sparkContext.parallelize(inserts, 2))\\ndf.write.format(\\"org.apache.hudi\\").\\n  options(getQuickstartWriteConfigs).\\n  option(PRECOMBINE_FIELD_OPT_KEY, \\"ts\\").\\n  option(RECORDKEY_FIELD_OPT_KEY, \\"uuid\\").\\n  option(PARTITIONPATH_FIELD_OPT_KEY, \\"partitionpath\\").\\n  option(TABLE_NAME, tableName).\\n  mode(Overwrite).\\n  save(basePath);\\n```\\n**Note:** For non-partitioned table, set\\n  ```\\n  option(KEYGENERATOR_CLASS_PROP, \\"org.apache.hudi.keygen.NonpartitionedKeyGenerator\\")\\n  ```\\n Checkout https://hudi.apache.org/blog/2021/02/13/hudi-key-generators for more options\\n\\n**Step 4** : Query data. Load the data files into a DataFrame.\\n\\n```scala\\nval roViewDF = spark.read.\\n  format(\\"org.apache.hudi\\").\\n  load(basePath + \\"/*/*/*/*\\")\\nroViewDF.createOrReplaceTempView(\\"hudi_ro_table\\")\\nspark.sql(\\"select count(*) from hudi_ro_table\\").show() // should return 10 (number of records inserted above)\\nval riderValue = spark.sql(\\"select distinct rider from hudi_ro_table\\").show()\\n// copy the value displayed to be used in next step\\n```\\n\\n**Step 5** : Fetch records that needs to be deleted, with the above rider value. This example is just to illustrate how to delete. In real world, use a select query using spark sql to fetch records that needs to be deleted and from the result we could invoke deletes as given below. Example rider value used is \\"rider-213\\".\\n\\n```scala\\nval df = spark.sql(\\"select uuid, partitionPath from hudi_ro_table where rider = \'rider-213\'\\")\\n```\\n\\n// Replace the above query with any other query that will fetch records to be deleted.\\n\\n**Step 6** : Issue deletes\\n\\n```scala\\nval deletes = dataGen.generateDeletes(df.collectAsList())\\nval df = spark.read.json(spark.sparkContext.parallelize(deletes, 2));\\ndf.write.format(\\"org.apache.hudi\\").\\n  options(getQuickstartWriteConfigs).\\n  option(OPERATION_OPT_KEY,\\"delete\\").\\n  option(PRECOMBINE_FIELD_OPT_KEY, \\"ts\\").\\n  option(RECORDKEY_FIELD_OPT_KEY, \\"uuid\\").\\n  option(PARTITIONPATH_FIELD_OPT_KEY, \\"partitionpath\\").\\n  option(TABLE_NAME, tableName).\\n  mode(Append).\\n  save(basePath);\\n```\\n**Note:** For non-partitioned table, set\\n  ```\\n  option(KEYGENERATOR_CLASS_PROP, \\"org.apache.hudi.keygen.NonpartitionedKeyGenerator\\")\\n  ```\\n Checkout https://hudi.apache.org/blog/2021/02/13/hudi-key-generators for more options\\n\\n**Step 7** : Reload the table and verify that the records are deleted\\n\\n```scala\\nval roViewDFAfterDelete = spark.\\n  read.\\n  format(\\"org.apache.hudi\\").\\n  load(basePath + \\"/*/*/*/*\\")\\nroViewDFAfterDelete.createOrReplaceTempView(\\"hudi_ro_table\\")\\nspark.sql(\\"select uuid, partitionPath from hudi_ro_table where rider = \'rider-213\'\\").show() // should not return any rows\\n```\\n\\n## Deletion with HoodieDeltaStreamer\\n\\nDeletion with `HoodieDeltaStreamer` takes the same path as upsert and so it relies on a specific field called  \\"*_hoodie_is_deleted*\\" of type boolean in each record.\\n\\n-   If a record has the field value set to  _false_ or it\'s not present, then it is considered a regular upsert\\n-   if not (if the value is set to  _true_ ), then its considered to be deleted record.\\n\\nThis essentially means that the schema has to be changed for the source, to add this field and all incoming records are expected to have this field set. We will be working to relax this in future releases.\\n\\nLets say the original schema is:\\n\\n```json\\n{\\n  \\"type\\":\\"record\\",\\n  \\"name\\":\\"example_tbl\\",\\n  \\"fields\\":[{\\n     \\"name\\": \\"uuid\\",\\n     \\"type\\": \\"String\\"\\n  }, {\\n     \\"name\\": \\"ts\\",\\n     \\"type\\": \\"string\\"\\n  },  {\\n     \\"name\\": \\"partitionPath\\",\\n     \\"type\\": \\"string\\"\\n  }, {\\n     \\"name\\": \\"rank\\",\\n     \\"type\\": \\"long\\"\\n  }\\n]}\\n```\\n\\nTo leverage deletion capabilities of `DeltaStreamer`, you have to change the schema as below.\\n\\n```json\\n{\\n  \\"type\\":\\"record\\",\\n  \\"name\\":\\"example_tbl\\",\\n  \\"fields\\":[{\\n     \\"name\\": \\"uuid\\",\\n     \\"type\\": \\"String\\"\\n  }, {\\n     \\"name\\": \\"ts\\",\\n     \\"type\\": \\"string\\"\\n  },  {\\n     \\"name\\": \\"partitionPath\\",\\n     \\"type\\": \\"string\\"\\n  }, {\\n     \\"name\\": \\"rank\\",\\n     \\"type\\": \\"long\\"\\n  }, {\\n    \\"name\\" : \\"_hoodie_is_deleted\\",\\n    \\"type\\" : \\"boolean\\",\\n    \\"default\\" : false\\n  }\\n]}\\n```\\n\\nExample incoming record for upsert\\n\\n```json\\n{\\n  \\"ts\\": 0.0,\\n  \\"uuid\\":\\"69cdb048-c93e-4532-adf9-f61ce6afe605\\",\\n  \\"rank\\": 1034,\\n  \\"partitionpath\\":\\"americas/brazil/sao_paulo\\",\\n  \\"_hoodie_is_deleted\\":false\\n}\\n```\\n      \\n\\nExample incoming record that needs to be deleted\\n```json\\n{\\n  \\"ts\\": 0.0,\\n  \\"uuid\\": \\"19tdb048-c93e-4532-adf9-f61ce6afe10\\",\\n  \\"rank\\": 1045,\\n  \\"partitionpath\\":\\"americas/brazil/sao_paulo\\",\\n  \\"_hoodie_is_deleted\\":true\\n}\\n```\\n\\nThese are one time changes. Once these are in, then the DeltaStreamer pipeline will handle both upserts and deletions within every batch. Each batch could contain a mix of upserts and deletes and no additional step or changes are required after this. Note that this is to perform hard deletion instead of soft deletion."},{"id":"/2019/11/15/New-Insert-Update-Delete-Data-on-S3-with-Amazon-EMR-and-Apache-Hudi","metadata":{"permalink":"/cn/blog/2019/11/15/New-Insert-Update-Delete-Data-on-S3-with-Amazon-EMR-and-Apache-Hudi","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2019-11-15-New-Insert-Update-Delete-Data-on-S3-with-Amazon-EMR-and-Apache-Hudi.mdx","source":"@site/blog/2019-11-15-New-Insert-Update-Delete-Data-on-S3-with-Amazon-EMR-and-Apache-Hudi.mdx","title":"New \u2013 Insert, Update, Delete Data on S3 with Amazon EMR and Apache Hudi","description":"Redirecting... please wait!!","date":"2019-11-15T00:00:00.000Z","formattedDate":"November 15, 2019","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"amazon","permalink":"/cn/blog/tags/amazon"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Danilo Poccia"}],"prevItem":{"title":"Delete support in Hudi","permalink":"/cn/blog/2020/01/15/delete-support-in-hudi"},"nextItem":{"title":"Hudi On Hops","permalink":"/cn/blog/2019/10/22/Hudi-On-Hops"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://aws.amazon.com/blogs/aws/new-insert-update-delete-data-on-s3-with-amazon-emr-and-apache-hudi/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2019/10/22/Hudi-On-Hops","metadata":{"permalink":"/cn/blog/2019/10/22/Hudi-On-Hops","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2019-10-22-Hudi-On-Hops.mdx","source":"@site/blog/2019-10-22-Hudi-On-Hops.mdx","title":"Hudi On Hops","description":"Redirecting... please wait!!","date":"2019-10-22T00:00:00.000Z","formattedDate":"October 22, 2019","tags":[{"label":"blog","permalink":"/cn/blog/tags/blog"},{"label":"diva-portal","permalink":"/cn/blog/tags/diva-portal"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"NETSANET GEBRETSADKAN KIDANE"}],"prevItem":{"title":"New \u2013 Insert, Update, Delete Data on S3 with Amazon EMR and Apache Hudi","permalink":"/cn/blog/2019/11/15/New-Insert-Update-Delete-Data-on-S3-with-Amazon-EMR-and-Apache-Hudi"},"nextItem":{"title":"Ingesting Database changes via Sqoop/Hudi","permalink":"/cn/blog/2019/09/09/ingesting-database-changes"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.diva-portal.org/smash/get/diva2:1413103/FULLTEXT01.pdf\\">Redirecting... please wait!! </Redirect>"},{"id":"/2019/09/09/ingesting-database-changes","metadata":{"permalink":"/cn/blog/2019/09/09/ingesting-database-changes","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2019-09-09-ingesting-database-changes.md","source":"@site/blog/2019-09-09-ingesting-database-changes.md","title":"Ingesting Database changes via Sqoop/Hudi","description":"Very simple in just 2 steps.","date":"2019-09-09T00:00:00.000Z","formattedDate":"September 9, 2019","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":0.605,"truncated":true,"authors":[{"name":"vinoth"}],"prevItem":{"title":"Hudi On Hops","permalink":"/cn/blog/2019/10/22/Hudi-On-Hops"},"nextItem":{"title":"Registering sample dataset to Hive via beeline","permalink":"/cn/blog/2019/05/14/registering-dataset-to-hive"}},"content":"Very simple in just 2 steps.\\n\\n**Step 1**: Extract new changes to users table in MySQL, as avro data files on DFS\\n\x3c!--truncate--\x3e\\n```bash\\n// Command to extract incrementals using sqoop\\nbin/sqoop import \\\\\\n  -Dmapreduce.job.user.classpath.first=true \\\\\\n  --connect jdbc:mysql://localhost/users \\\\\\n  --username root \\\\\\n  --password ******* \\\\\\n  --table users \\\\\\n  --as-avrodatafile \\\\\\n  --target-dir \\\\ \\n  s3:///tmp/sqoop/import-1/users\\n```\\n\\n**Step 2**: Use your fav datasource to read extracted data and directly \u201cupsert\u201d the users table on DFS/Hive\\n\\n```scala\\n// Spark Datasource\\nimport org.apache.hudi.DataSourceWriteOptions._\\n// Use Spark datasource to read avro\\nval inputDataset = spark.read.avro(\\"s3://tmp/sqoop/import-1/users/*\\");\\n     \\n// save it as a Hudi dataset\\ninputDataset.write.format(\\"org.apache.hudi\u201d)\\n  .option(HoodieWriteConfig.TABLE_NAME, \\"hoodie.users\\")\\n  .option(RECORDKEY_FIELD_OPT_KEY(), \\"userID\\")\\n  .option(PARTITIONPATH_FIELD_OPT_KEY(),\\"country\\")\\n  .option(PRECOMBINE_FIELD_OPT_KEY(), \\"last_mod\\")\\n  .option(OPERATION_OPT_KEY(), UPSERT_OPERATION_OPT_VAL())\\n  .mode(SaveMode.Append)\\n  .save(\\"/path/on/dfs\\");\\n```\\n\\nAlternatively, you can also use the Hudi [DeltaStreamer](https://hudi.apache.org/writing_data#deltastreamer) tool with the DFSSource."},{"id":"/2019/05/14/registering-dataset-to-hive","metadata":{"permalink":"/cn/blog/2019/05/14/registering-dataset-to-hive","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2019-05-14-registering-dataset-to-hive.md","source":"@site/blog/2019-05-14-registering-dataset-to-hive.md","title":"Registering sample dataset to Hive via beeline","description":"Hudi hive sync tool typically handles registration of the dataset into Hive metastore. In case, there are issues with quickstart around this, following page shows commands that can be used to do this manually via beeline.","date":"2019-05-14T00:00:00.000Z","formattedDate":"May 14, 2019","tags":[{"label":"how-to","permalink":"/cn/blog/tags/how-to"},{"label":"apache hudi","permalink":"/cn/blog/tags/apache-hudi"}],"readingTime":1.32,"truncated":true,"authors":[{"name":"vinoth"}],"prevItem":{"title":"Ingesting Database changes via Sqoop/Hudi","permalink":"/cn/blog/2019/09/09/ingesting-database-changes"},"nextItem":{"title":"Big Batch vs Incremental Processing","permalink":"/cn/blog/2019/03/07/batch-vs-incremental"}},"content":"Hudi hive sync tool typically handles registration of the dataset into Hive metastore. In case, there are issues with quickstart around this, following page shows commands that can be used to do this manually via beeline.  \\n\\n\x3c!--truncate--\x3e\\nAdd in the _packaging/hoodie-hive-bundle/target/hoodie-hive-bundle-0.4.6-SNAPSHOT.jar,_ so that Hive can read the Hudi dataset and answer the query.\\n\\n```java\\nhive> set hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;\\nhive> set hive.stats.autogather=false;\\nhive> add jar file:///path/to/hoodie-hive-bundle-0.5.2-SNAPSHOT.jar;\\nAdded [file:///path/to/hoodie-hive-bundle-0.5.2-SNAPSHOT.jar] to class path\\nAdded resources: [file:///path/to/hoodie-hive-bundle-0.5.2-SNAPSHOT.jar]\\n```\\n\\n\\nThen, you need to create a *ReadOptimized* Hive table as below and register the sample partitions\\n\\n```java\\nDROP TABLE hoodie_test;\\nCREATE EXTERNAL TABLE hoodie_test(`_row_key` string,\\n    `_hoodie_commit_time` string,\\n    `_hoodie_commit_seqno` string,\\n    rider string,\\n    driver string,\\n    begin_lat double,\\n    begin_lon double,\\n    end_lat double,\\n    end_lon double,\\n    fare double)\\n    PARTITIONED BY (`datestr` string)\\n    ROW FORMAT SERDE\\n    \'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe\'\\n    STORED AS INPUTFORMAT\\n    \'com.uber.hoodie.hadoop.HoodieInputFormat\'\\n    OUTPUTFORMAT\\n    \'org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\'\\n    LOCATION\\n    \'hdfs:///tmp/hoodie/sample-table\';\\n     \\nALTER TABLE `hoodie_test` ADD IF NOT EXISTS PARTITION (datestr=\'2016-03-15\') LOCATION \'hdfs:///tmp/hoodie/sample-table/2016/03/15\';\\nALTER TABLE `hoodie_test` ADD IF NOT EXISTS PARTITION (datestr=\'2015-03-16\') LOCATION \'hdfs:///tmp/hoodie/sample-table/2015/03/16\';\\nALTER TABLE `hoodie_test` ADD IF NOT EXISTS PARTITION (datestr=\'2015-03-17\') LOCATION \'hdfs:///tmp/hoodie/sample-table/2015/03/17\';\\n     \\nset mapreduce.framework.name=yarn;\\n```\\n\\nAnd you can add a *Realtime* Hive table, as below\\n\\n```java\\nDROP TABLE hoodie_rt;\\nCREATE EXTERNAL TABLE hoodie_rt(\\n    `_hoodie_commit_time` string,\\n    `_hoodie_commit_seqno` string,\\n    `_hoodie_record_key` string,\\n    `_hoodie_partition_path` string,\\n    `_hoodie_file_name` string,\\n    timestamp double,\\n    `_row_key` string,\\n    rider string,\\n    driver string,\\n    begin_lat double,\\n    begin_lon double,\\n    end_lat double,\\n    end_lon double,\\n    fare double)\\n    PARTITIONED BY (`datestr` string)\\n    ROW FORMAT SERDE\\n    \'com.uber.hoodie.hadoop.realtime.HoodieParquetSerde\'\\n    STORED AS INPUTFORMAT\\n    \'com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat\'\\n    OUTPUTFORMAT\\n    \'org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat\'\\n    LOCATION\\n    \'file:///tmp/hoodie/sample-table\';\\n     \\nALTER TABLE `hoodie_rt` ADD IF NOT EXISTS PARTITION (datestr=\'2016-03-15\') LOCATION \'file:///tmp/hoodie/sample-table/2016/03/15\';\\nALTER TABLE `hoodie_rt` ADD IF NOT EXISTS PARTITION (datestr=\'2015-03-16\') LOCATION \'file:///tmp/hoodie/sample-table/2015/03/16\';\\nALTER TABLE `hoodie_rt` ADD IF NOT EXISTS PARTITION (datestr=\'2015-03-17\') LOCATION \'file:///tmp/hoodie/sample-table/2015/03/17\';\\n```"},{"id":"/2019/03/07/batch-vs-incremental","metadata":{"permalink":"/cn/blog/2019/03/07/batch-vs-incremental","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2019-03-07-batch-vs-incremental.md","source":"@site/blog/2019-03-07-batch-vs-incremental.md","title":"Big Batch vs Incremental Processing","description":"","date":"2019-03-07T00:00:00.000Z","formattedDate":"March 7, 2019","tags":[],"readingTime":0.005,"truncated":false,"authors":[{"name":"vinoth"}],"prevItem":{"title":"Registering sample dataset to Hive via beeline","permalink":"/cn/blog/2019/05/14/registering-dataset-to-hive"},"nextItem":{"title":"Hudi entered Apache Incubator","permalink":"/cn/blog/2019/01/18/asf-incubation"}},"content":"![](/assets/images/blog/batch_vs_incremental.png)"},{"id":"/2019/01/18/asf-incubation","metadata":{"permalink":"/cn/blog/2019/01/18/asf-incubation","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2019-01-18-asf-incubation.md","source":"@site/blog/2019-01-18-asf-incubation.md","title":"Hudi entered Apache Incubator","description":"In the coming weeks, we will be moving in our new home on the Apache Incubator.","date":"2019-01-18T00:00:00.000Z","formattedDate":"January 18, 2019","tags":[],"readingTime":0.08,"truncated":false,"authors":[{"name":"admin"}],"prevItem":{"title":"Big Batch vs Incremental Processing","permalink":"/cn/blog/2019/03/07/batch-vs-incremental"},"nextItem":{"title":"Hoodie: Uber Engineering\'s Incremental Processing Framework on Hadoop","permalink":"/cn/blog/2017/03/12/Hoodie-Uber-Engineerings-Incremental-Processing-Framework-on-Hadoop"}},"content":"In the coming weeks, we will be moving in our new home on the Apache Incubator."},{"id":"/2017/03/12/Hoodie-Uber-Engineerings-Incremental-Processing-Framework-on-Hadoop","metadata":{"permalink":"/cn/blog/2017/03/12/Hoodie-Uber-Engineerings-Incremental-Processing-Framework-on-Hadoop","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2017-03-12-Hoodie-Uber-Engineerings-Incremental-Processing-Framework-on-Hadoop.mdx","source":"@site/blog/2017-03-12-Hoodie-Uber-Engineerings-Incremental-Processing-Framework-on-Hadoop.mdx","title":"Hoodie: Uber Engineering\'s Incremental Processing Framework on Hadoop","description":"Redirecting... please wait!!","date":"2017-03-12T00:00:00.000Z","formattedDate":"March 12, 2017","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"uber","permalink":"/cn/blog/tags/uber"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Prasanna Rajaperumal"},{"name":"Vinoth Chandar"}],"prevItem":{"title":"Hudi entered Apache Incubator","permalink":"/cn/blog/2019/01/18/asf-incubation"},"nextItem":{"title":"Connect with us at Strata San Jose March 2017","permalink":"/cn/blog/2016/12/30/strata-talk-2017"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://eng.uber.com/hoodie/\\">Redirecting... please wait!! </Redirect>"},{"id":"/2016/12/30/strata-talk-2017","metadata":{"permalink":"/cn/blog/2016/12/30/strata-talk-2017","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2016-12-30-strata-talk-2017.md","source":"@site/blog/2016-12-30-strata-talk-2017.md","title":"Connect with us at Strata San Jose March 2017","description":"We will be presenting Hudi & general concepts around how incremental processing works at Uber.","date":"2016-12-30T00:00:00.000Z","formattedDate":"December 30, 2016","tags":[],"readingTime":0.12,"truncated":false,"authors":[{"name":"admin"}],"prevItem":{"title":"Hoodie: Uber Engineering\'s Incremental Processing Framework on Hadoop","permalink":"/cn/blog/2017/03/12/Hoodie-Uber-Engineerings-Incremental-Processing-Framework-on-Hadoop"},"nextItem":{"title":"The Case for incremental processing on Hadoop","permalink":"/cn/blog/2016/08/04/The-Case-for-incremental-processing-on-Hadoop"}},"content":"We will be presenting Hudi & general concepts around how incremental processing works at Uber.\\nCatch our talk **\\"Incremental Processing on Hadoop At Uber\\"**"},{"id":"/2016/08/04/The-Case-for-incremental-processing-on-Hadoop","metadata":{"permalink":"/cn/blog/2016/08/04/The-Case-for-incremental-processing-on-Hadoop","editUrl":"https://github.com/apache/hudi/edit/asf-site/website/blog/blog/2016-08-04-The-Case-for-incremental-processing-on-Hadoop.mdx","source":"@site/blog/2016-08-04-The-Case-for-incremental-processing-on-Hadoop.mdx","title":"The Case for incremental processing on Hadoop","description":"Redirecting... please wait!!","date":"2016-08-04T00:00:00.000Z","formattedDate":"August 4, 2016","tags":[{"label":"use-case","permalink":"/cn/blog/tags/use-case"},{"label":"incremental-processing","permalink":"/cn/blog/tags/incremental-processing"},{"label":"oreilly","permalink":"/cn/blog/tags/oreilly"}],"readingTime":0.045,"truncated":false,"authors":[{"name":"Vinoth Chandar"}],"prevItem":{"title":"Connect with us at Strata San Jose March 2017","permalink":"/cn/blog/2016/12/30/strata-talk-2017"}},"content":"import Redirect from \'@site/src/components/Redirect\';\\n\\n<Redirect url=\\"https://www.oreilly.com/ideas/ubers-case-for-incremental-processing-on-hadoop\\">Redirecting... please wait!! </Redirect>"}]}')}}]);