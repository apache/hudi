"use strict";(self.webpackChunkhudi=self.webpackChunkhudi||[]).push([[49112],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=s(t),h=i,m=c["".concat(l,".").concat(h)]||c[h]||u[h]||r;return t?a.createElement(m,o(o({ref:n},p),{},{components:t})):a.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=h;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d[c]="string"==typeof e?e:i,o[1]=d;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},65240:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var a=t(58168),i=(t(96540),t(15680));const r={title:"Metadata Indexing",summary:"In this page, we describe how to run metadata indexing asynchronously.",toc:!0,last_modified_at:null},o=void 0,d={unversionedId:"metadata_indexing",id:"metadata_indexing",title:"Metadata Indexing",description:"Hudi maintains a scalable metadata that has some auxiliary data about the table.",source:"@site/docs/metadata_indexing.md",sourceDirName:".",slug:"/metadata_indexing",permalink:"/cn/docs/next/metadata_indexing",editUrl:"https://github.com/apache/hudi/tree/asf-site/website/docs/metadata_indexing.md",tags:[],version:"current",frontMatter:{title:"Metadata Indexing",summary:"In this page, we describe how to run metadata indexing asynchronously.",toc:!0,last_modified_at:null},sidebar:"docs",previous:{title:"Clustering",permalink:"/cn/docs/next/clustering"},next:{title:"Cleaning",permalink:"/cn/docs/next/hoodie_cleaner"}},l=[{value:"Setup Async Indexing",id:"setup-async-indexing",children:[{value:"Configurations",id:"configurations",children:[],level:3},{value:"Schedule indexing",id:"schedule-indexing",children:[],level:3},{value:"Execute Indexing",id:"execute-indexing",children:[],level:3},{value:"Drop Index",id:"drop-index",children:[],level:3}],level:2},{value:"Caveats",id:"caveats",children:[],level:2},{value:"Related Resources",id:"related-resources",children:[],level:2}],s={toc:l},p="wrapper";function c(e){let{components:n,...t}=e;return(0,i.yg)(p,(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Hudi maintains a scalable ",(0,i.yg)("a",{parentName:"p",href:"/docs/metadata"},"metadata")," that has some auxiliary data about the table.\nThe ",(0,i.yg)("a",{parentName:"p",href:"https://www.onehouse.ai/blog/introducing-multi-modal-index-for-the-lakehouse-in-apache-hudi"},"pluggable indexing subsystem"),"\nof Hudi depends on the metadata table. Different types of index, from ",(0,i.yg)("inlineCode",{parentName:"p"},"files")," index for locating records efficiently\nto ",(0,i.yg)("inlineCode",{parentName:"p"},"column_stats")," index for data skipping, are part of the metadata table. A fundamental tradeoff in any data system\nthat supports indices is to balance the write throughput with index updates. A brute-force way is to lock out the writes\nwhile indexing. However, very large tables can take hours to index. This is where Hudi's novel asynchronous metadata\nindexing comes into play."),(0,i.yg)("p",null,"We can now create different metadata indices, including ",(0,i.yg)("inlineCode",{parentName:"p"},"files"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"bloom_filters"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"column_stats")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"record_index")," asynchronously in\nHudi, which are then used by readers and writers to improve performance. Being able to index without blocking writing\nhas two benefits,"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"improved write latency"),(0,i.yg)("li",{parentName:"ul"},"reduced resource wastage due to contention between writing and indexing.")),(0,i.yg)("p",null,"In this document, we will learn how to setup asynchronous metadata indexing. To learn more about the design of this\nfeature, please check out ",(0,i.yg)("a",{parentName:"p",href:"https://www.onehouse.ai/blog/asynchronous-indexing-using-hudi"},"this blog"),"."),(0,i.yg)("h2",{id:"setup-async-indexing"},"Setup Async Indexing"),(0,i.yg)("p",null,"First, we will generate a continuous workload. In the below example, we are going to start a ",(0,i.yg)("a",{parentName:"p",href:"/docs/hoodie_streaming_ingestion#hudi-streamer"},"Hudi Streamer")," which will continuously write data\nfrom raw parquet to Hudi table. We used the widely available ",(0,i.yg)("a",{parentName:"p",href:"https://registry.opendata.aws/nyc-tlc-trip-records-pds/"},"NY Taxi dataset"),", whose setup details are as below:"),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Ingestion write config"),(0,i.yg)("p",null,(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"hoodie.datasource.write.recordkey.field=VendorID\nhoodie.datasource.write.partitionpath.field=tpep_dropoff_datetime\nhoodie.datasource.write.precombine.field=tpep_dropoff_datetime\nhoodie.streamer.source.dfs.root=/Users/home/path/to/data/parquet_files/\nhoodie.streamer.schemaprovider.target.schema.file=/Users/home/path/to/schema/schema.avsc\nhoodie.streamer.schemaprovider.source.schema.file=/Users/home/path/to/schema/schema.avsc\n// set lock provider configs\nhoodie.write.lock.provider=org.apache.hudi.client.transaction.lock.ZookeeperBasedLockProvider\nhoodie.write.lock.zookeeper.url=<zk_url>\nhoodie.write.lock.zookeeper.port=<zk_port>\nhoodie.write.lock.zookeeper.lock_key=<zk_key>\nhoodie.write.lock.zookeeper.base_path=<zk_base_path>\n")))),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Run Hudi Streamer"),(0,i.yg)("p",null,(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"spark-submit \\\n--class org.apache.hudi.utilities.streamer.HoodieStreamer `ls /Users/home/path/to/hudi-utilities-bundle/target/hudi-utilities-bundle_2.11-0.13.0.jar` \\\n--props `ls /Users/home/path/to/write/config.properties` \\\n--source-class org.apache.hudi.utilities.sources.ParquetDFSSource  --schemaprovider-class org.apache.hudi.utilities.schema.FilebasedSchemaProvider \\\n--source-ordering-field tpep_dropoff_datetime   \\\n--table-type COPY_ON_WRITE \\\n--target-base-path file:///tmp/hudi-ny-taxi/   \\\n--target-table ny_hudi_tbl  \\\n--op UPSERT  \\\n--continuous \\\n--source-limit 5000000 \\\n--min-sync-interval-seconds 60\n")))),(0,i.yg)("p",null,"Hudi metadata table is enabled by default and the files index will be automatically created. While the Hudi Streamer is running in continuous mode, let\nus schedule the indexing for COLUMN_STATS index. First we need to define a properties file for the indexer."),(0,i.yg)("h3",{id:"configurations"},"Configurations"),(0,i.yg)("p",null,"As mentioned before, metadata indices are pluggable. One can add any index at any point in time depending on changing\nbusiness requirements. Some configurations to enable particular indices are listed below. Currently, available indices under\nmetadata table can be explored ",(0,i.yg)("a",{parentName:"p",href:"/docs/next/metadata#metadata-table-indices"},"here")," along with ",(0,i.yg)("a",{parentName:"p",href:"/docs/next/metadata#enable-hudi-metadata-table-and-multi-modal-index-in-write-side"},"configs"),"\nto enable them. The full set of metadata configurations can be explored ",(0,i.yg)("a",{parentName:"p",href:"/docs/next/configurations/#Metadata-Configs"},"here"),"."),(0,i.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.yg)("div",{parentName:"div",className:"admonition-heading"},(0,i.yg)("h5",{parentName:"div"},(0,i.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,i.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.yg)("div",{parentName:"div",className:"admonition-content"},(0,i.yg)("p",{parentName:"div"},"Enabling the metadata table and configuring a lock provider are the prerequisites for using async indexer. Checkout a sample\nconfiguration below."))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"# ensure that both metadata and async indexing is enabled as below two configs\nhoodie.metadata.enable=true\nhoodie.metadata.index.async=true\n# enable column_stats index config\nhoodie.metadata.index.column.stats.enable=true\n# set concurrency mode and lock configs as this is a multi-writer scenario\n# check https://hudi.apache.org/docs/concurrency_control/ for differnt lock provider configs\nhoodie.write.concurrency.mode=optimistic_concurrency_control\nhoodie.write.lock.provider=org.apache.hudi.client.transaction.lock.ZookeeperBasedLockProvider\nhoodie.write.lock.zookeeper.url=<zk_url>\nhoodie.write.lock.zookeeper.port=<zk_port>\nhoodie.write.lock.zookeeper.lock_key=<zk_key>\nhoodie.write.lock.zookeeper.base_path=<zk_base_path>\n")),(0,i.yg)("h3",{id:"schedule-indexing"},"Schedule indexing"),(0,i.yg)("p",null,"Now, we can schedule indexing using ",(0,i.yg)("inlineCode",{parentName:"p"},"HoodieIndexer")," in ",(0,i.yg)("inlineCode",{parentName:"p"},"schedule")," mode as follows:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"spark-submit \\\n--class org.apache.hudi.utilities.HoodieIndexer \\\n/Users/home/path/to/hudi-utilities-bundle/target/hudi-utilities-bundle_2.11-0.13.0.jar \\\n--props /Users/home/path/to/indexer.properties \\\n--mode schedule \\\n--base-path /tmp/hudi-ny-taxi \\\n--table-name ny_hudi_tbl \\\n--index-types COLUMN_STATS \\\n--parallelism 1 \\\n--spark-memory 1g\n")),(0,i.yg)("p",null,"This will write an ",(0,i.yg)("inlineCode",{parentName:"p"},"indexing.requested")," instant to the timeline."),(0,i.yg)("h3",{id:"execute-indexing"},"Execute Indexing"),(0,i.yg)("p",null,"To execute indexing, run the indexer in ",(0,i.yg)("inlineCode",{parentName:"p"},"execute")," mode as below."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"spark-submit \\\n--class org.apache.hudi.utilities.HoodieIndexer \\\n/Users/home/path/to/hudi-utilities-bundle/target/hudi-utilities-bundle_2.11-0.13.0.jar \\\n--props /Users/home/path/to/indexer.properties \\\n--mode execute \\\n--base-path /tmp/hudi-ny-taxi \\\n--table-name ny_hudi_tbl \\\n--index-types COLUMN_STATS \\\n--parallelism 1 \\\n--spark-memory 1g\n")),(0,i.yg)("p",null,"We can also run the indexer in ",(0,i.yg)("inlineCode",{parentName:"p"},"scheduleAndExecute")," mode to do the above two steps in one shot. Doing it separately gives us better control over when we want to execute."),(0,i.yg)("p",null,"Let's look at the data timeline."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"ls -lrt /tmp/hudi-ny-taxi/.hoodie\ntotal 1816\n-rw-r--r--  1 sagars  wheel       0 Apr 14 19:53 20220414195327683.commit.requested\n-rw-r--r--  1 sagars  wheel  153423 Apr 14 19:54 20220414195327683.inflight\n-rw-r--r--  1 sagars  wheel  207061 Apr 14 19:54 20220414195327683.commit\n-rw-r--r--  1 sagars  wheel       0 Apr 14 19:54 20220414195423420.commit.requested\n-rw-r--r--  1 sagars  wheel     659 Apr 14 19:54 20220414195437837.indexing.requested\n-rw-r--r--  1 sagars  wheel  323950 Apr 14 19:54 20220414195423420.inflight\n-rw-r--r--  1 sagars  wheel       0 Apr 14 19:55 20220414195437837.indexing.inflight\n-rw-r--r--  1 sagars  wheel  222920 Apr 14 19:55 20220414195423420.commit\n-rw-r--r--  1 sagars  wheel     734 Apr 14 19:55 hoodie.properties\n-rw-r--r--  1 sagars  wheel     979 Apr 14 19:55 20220414195437837.indexing\n")),(0,i.yg)("p",null,"In the data timeline, we can see that indexing was scheduled after one commit completed (",(0,i.yg)("inlineCode",{parentName:"p"},"20220414195327683.commit"),") and another was requested\n(",(0,i.yg)("inlineCode",{parentName:"p"},"20220414195423420.commit.requested"),"). This would have picked ",(0,i.yg)("inlineCode",{parentName:"p"},"20220414195327683")," as the base instant. Indexing was inflight with an inflight writer as well. If we parse the\nindexer logs, we would find that it indeed caught up with instant ",(0,i.yg)("inlineCode",{parentName:"p"},"20220414195423420")," after indexing upto the base instant."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"22/04/14 19:55:22 INFO HoodieTableMetaClient: Finished Loading Table of type MERGE_ON_READ(version=1, baseFileFormat=HFILE) from /tmp/hudi-ny-taxi/.hoodie/metadata\n22/04/14 19:55:22 INFO RunIndexActionExecutor: Starting Index Building with base instant: 20220414195327683\n22/04/14 19:55:22 INFO HoodieBackedTableMetadataWriter: Creating a new metadata index for partition 'column_stats' under path /tmp/hudi-ny-taxi/.hoodie/metadata upto instant 20220414195327683\n...\n...\n22/04/14 19:55:38 INFO RunIndexActionExecutor: Total remaining instants to index: 1\n22/04/14 19:55:38 INFO HoodieTableMetaClient: Loading HoodieTableMetaClient from /tmp/hudi-ny-taxi/.hoodie/metadata\n22/04/14 19:55:38 INFO HoodieTableConfig: Loading table properties from /tmp/hudi-ny-taxi/.hoodie/metadata/.hoodie/hoodie.properties\n22/04/14 19:55:38 INFO HoodieTableMetaClient: Finished Loading Table of type MERGE_ON_READ(version=1, baseFileFormat=HFILE) from /tmp/hudi-ny-taxi/.hoodie/metadata\n22/04/14 19:55:38 INFO HoodieActiveTimeline: Loaded instants upto : Option{val=[20220414195423420__deltacommit__COMPLETED]}\n22/04/14 19:55:38 INFO RunIndexActionExecutor: Starting index catchup task\n...\n")),(0,i.yg)("h3",{id:"drop-index"},"Drop Index"),(0,i.yg)("p",null,"To drop an index, just run the index in ",(0,i.yg)("inlineCode",{parentName:"p"},"dropindex")," mode."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"spark-submit \\\n--class org.apache.hudi.utilities.HoodieIndexer \\\n/Users/home/path/to/hudi-utilities-bundle/target/hudi-utilities-bundle_2.11-0.13.0.jar \\\n--props /Users/home/path/to/indexer.properties \\\n--mode dropindex \\\n--base-path /tmp/hudi-ny-taxi \\\n--table-name ny_hudi_tbl \\\n--index-types COLUMN_STATS \\\n--parallelism 1 \\\n--spark-memory 2g\n")),(0,i.yg)("h2",{id:"caveats"},"Caveats"),(0,i.yg)("p",null,"Asynchronous indexing feature is still evolving. Few points to note from deployment perspective while running the indexer:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"While an index can be created concurrently with ingestion, it cannot be dropped concurrently. Please stop all writers\nbefore dropping an index."),(0,i.yg)("li",{parentName:"ul"},"Files index is created by default as long as the metadata table is enabled."),(0,i.yg)("li",{parentName:"ul"},"Trigger indexing for one metadata partition (or index type) at a time."),(0,i.yg)("li",{parentName:"ul"},"If an index is enabled via async HoodieIndexer, then ensure that index is also enabled in configs corresponding to regular ingestion writers. Otherwise, metadata writer will\nthink that particular index was disabled and cleanup the metadata partition."),(0,i.yg)("li",{parentName:"ul"},"In the case of multi-writers, enable async index and specific index config for all writers."),(0,i.yg)("li",{parentName:"ul"},"Unlike other table services like compaction and clustering, where we have a separate configuration to run inline, there is no such inline config here.\nFor example, if async indexing is disabled and metadata is enabled along with column stats index type, then both files and column stats index will be created synchronously with ingestion.")),(0,i.yg)("p",null,"Some of these limitations will be removed in the upcoming releases. Please\nfollow ",(0,i.yg)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/HUDI-2488"},"HUDI-2488")," for developments on this feature."),(0,i.yg)("h2",{id:"related-resources"},"Related Resources"),(0,i.yg)("h3",null,"Videos"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=TSphQCsY4pY"},"Advantages of Metadata Indexing and Asynchronous Indexing in Hudi Hands on Lab"))))}c.isMDXComponent=!0}}]);