"use strict";(self.webpackChunkhudi=self.webpackChunkhudi||[]).push([[6856],{3905:function(e,t,i){i.d(t,{Zo:function(){return d},kt:function(){return u}});var o=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,o)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,o,n=function(e,t){if(null==e)return{};var i,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)i=a[o],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)i=a[o],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var s=o.createContext({}),p=function(e){var t=o.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},d=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var i=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(i),u=n,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||a;return i?o.createElement(h,r(r({ref:t},d),{},{components:i})):o.createElement(h,r({ref:t},d))}));function u(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=i.length,r=new Array(a);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,r[1]=l;for(var p=2;p<a;p++)r[p]=i[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,i)}m.displayName="MDXCreateElement"},3896:function(e,t,i){i.r(t),i.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var o=i(7462),n=i(3366),a=(i(7294),i(3905)),r=["components"],l={version:"0.6.0",title:"Configurations",keywords:["garbage collection","hudi","jvm","configs","tuning"],summary:"Here we list all possible configurations and what they mean",toc:!0,last_modified_at:new Date("2019-12-30T19:59:57.000Z")},s=void 0,p={unversionedId:"configurations",id:"version-0.6.0/configurations",isDocsHomePage:!1,title:"Configurations",description:"This page covers the different ways of configuring your job to write/read Hudi tables.",source:"@site/versioned_docs/version-0.6.0/configurations.md",sourceDirName:".",slug:"/configurations",permalink:"/docs/0.6.0/configurations",editUrl:"https://github.com/apache/hudi/edit/asf-site/website/docs/versioned_docs/version-0.6.0/configurations.md",version:"0.6.0",frontMatter:{version:"0.6.0",title:"Configurations",keywords:["garbage collection","hudi","jvm","configs","tuning"],summary:"Here we list all possible configurations and what they mean",toc:!0,last_modified_at:"2019-12-30T19:59:57.000Z"},sidebar:"version-0.6.0/docs",previous:{title:"Querying Hudi Tables",permalink:"/docs/0.6.0/querying_data"},next:{title:"Performance",permalink:"/docs/0.6.0/performance"}},d=[{value:"Spark Datasource Configs",id:"spark-datasource-configs",children:[{value:"Write Options",id:"write-options",children:[]},{value:"Read Options",id:"read-options",children:[]}]},{value:"WriteClient Configs",id:"writeclient-configs",children:[{value:"Index configs",id:"index-configs",children:[]},{value:"Storage configs",id:"storage-configs",children:[]},{value:"Compaction configs",id:"compaction-configs",children:[]},{value:"Metrics configs",id:"metrics-configs",children:[]},{value:"Memory configs",id:"memory-configs",children:[]},{value:"Write commit callback configs",id:"write-commit-callback-configs",children:[]}]}],c={toc:d};function m(e){var t=e.components,i=(0,n.Z)(e,r);return(0,a.kt)("wrapper",(0,o.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This page covers the different ways of configuring your job to write/read Hudi tables.\nAt a high level, you can control behaviour at few levels. "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"#spark-datasource"},"Spark Datasource Configs"))," : These configs control the Hudi Spark Datasource, providing ability to define keys/partitioning, pick out the write operation, specify how to merge records or choosing query type to read."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"#writeclient-configs"},"WriteClient Configs"))," : Internally, the Hudi datasource uses a RDD based ",(0,a.kt)("inlineCode",{parentName:"li"},"HoodieWriteClient")," api to actually perform writes to storage. These configs provide deep control over lower level aspects like\nfile sizing, compression, parallelism, compaction, write schema, cleaning etc. Although Hudi provides sane defaults, from time-time these configs may need to be tweaked to optimize for specific workloads."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"#PAYLOAD_CLASS_OPT_KEY"},"RecordPayload Config"))," : This is the lowest level of customization offered by Hudi. Record payloads define how to produce new values to upsert based on incoming new record and\nstored old record. Hudi provides default implementations such as ",(0,a.kt)("inlineCode",{parentName:"li"},"OverwriteWithLatestAvroPayload")," which simply update table with the latest/last-written record.\nThis can be overridden to a custom class extending ",(0,a.kt)("inlineCode",{parentName:"li"},"HoodieRecordPayload")," class, on both datasource and WriteClient levels.")),(0,a.kt)("h2",{id:"spark-datasource-configs"},"Spark Datasource Configs"),(0,a.kt)("p",null,"Spark jobs using the datasource can be configured by passing the below options into the ",(0,a.kt)("inlineCode",{parentName:"p"},"option(k,v)")," method as usual.\nThe actual datasource level configs are listed below."),(0,a.kt)("h3",{id:"write-options"},"Write Options"),(0,a.kt)("p",null,"Additionally, you can pass down any of the WriteClient level configs directly using ",(0,a.kt)("inlineCode",{parentName:"p"},"options()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"option(k,v)")," methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'inputDF.write()\n.format("org.apache.hudi")\n.options(clientOpts) // any of the Hudi client opts can be passed in as well\n.option(DataSourceWriteOptions.RECORDKEY_FIELD_OPT_KEY(), "_row_key")\n.option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), "partition")\n.option(DataSourceWriteOptions.PRECOMBINE_FIELD_OPT_KEY(), "timestamp")\n.option(HoodieWriteConfig.TABLE_NAME, tableName)\n.mode(SaveMode.Append)\n.save(basePath);\n')),(0,a.kt)("p",null,"Options useful for writing tables via ",(0,a.kt)("inlineCode",{parentName:"p"},"write.format.option(...)")),(0,a.kt)("h4",{id:"table_name_opt_key"},"TABLE_NAME_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.write.table.name")," ","[Required]",(0,a.kt)("br",null),"\nHive table name, to register the table into."),(0,a.kt)("h4",{id:"operation_opt_key"},"OPERATION_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.write.operation"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"upsert"),(0,a.kt)("br",null),"\nwhether to do upsert, insert or bulkinsert for the write operation. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"bulkinsert")," to load new data into a table, and there on use ",(0,a.kt)("inlineCode",{parentName:"p"},"upsert"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"insert"),".\nbulk insert uses a disk based write path to scale to load large inputs without need to cache it."),(0,a.kt)("h4",{id:"table_type_opt_key"},"TABLE_TYPE_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.write.table.type"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"COPY_ON_WRITE")," ",(0,a.kt)("br",null),"\nThe table type for the underlying data, for this write. This can't change between writes."),(0,a.kt)("h4",{id:"precombine_field_opt_key"},"PRECOMBINE_FIELD_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.write.precombine.field"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"ts")," ",(0,a.kt)("br",null),"\nField used in preCombining before actual write. When two records have the same key value,\nwe will pick the one with the largest value for the precombine field, determined by Object.compareTo(..)"),(0,a.kt)("h4",{id:"payload_class_opt_key"},"PAYLOAD_CLASS_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.write.payload.class"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"org.apache.hudi.OverwriteWithLatestAvroPayload")," ",(0,a.kt)("br",null),"\nPayload class used. Override this, if you like to roll your own merge logic, when upserting/inserting.\nThis will render any value set for ",(0,a.kt)("inlineCode",{parentName:"p"},"PRECOMBINE_FIELD_OPT_VAL")," in-effective"),(0,a.kt)("h4",{id:"recordkey_field_opt_key"},"RECORDKEY_FIELD_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.write.recordkey.field"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"uuid")," ",(0,a.kt)("br",null),"\nRecord key field. Value to be used as the ",(0,a.kt)("inlineCode",{parentName:"p"},"recordKey")," component of ",(0,a.kt)("inlineCode",{parentName:"p"},"HoodieKey"),". Actual value\nwill be obtained by invoking .toString() on the field value. Nested fields can be specified using\nthe dot notation eg: ",(0,a.kt)("inlineCode",{parentName:"p"},"a.b.c")),(0,a.kt)("h4",{id:"partitionpath_field_opt_key"},"PARTITIONPATH_FIELD_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.write.partitionpath.field"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"partitionpath")," ",(0,a.kt)("br",null),"\nPartition path field. Value to be used at the ",(0,a.kt)("inlineCode",{parentName:"p"},"partitionPath")," component of ",(0,a.kt)("inlineCode",{parentName:"p"},"HoodieKey"),".\nActual value ontained by invoking .toString()"),(0,a.kt)("h4",{id:"hive_style_partitioning_opt_key"},"HIVE_STYLE_PARTITIONING_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.write.hive_style_partitioning"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," ",(0,a.kt)("br",null),"\nWhen set to true, partition folder names follow the format of Hive partitions: ","[partition_column_name]","=","[partition_value]"),(0,a.kt)("h4",{id:"keygenerator_class_opt_key"},"KEYGENERATOR_CLASS_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.write.keygenerator.class"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"org.apache.hudi.SimpleKeyGenerator")," ",(0,a.kt)("br",null),"\nKey generator class, that implements will extract the key out of incoming ",(0,a.kt)("inlineCode",{parentName:"p"},"Row")," object"),(0,a.kt)("h4",{id:"commit_metadata_keyprefix_opt_key"},"COMMIT_METADATA_KEYPREFIX_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.write.commitmeta.key.prefix"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"_")," ",(0,a.kt)("br",null),"\nOption keys beginning with this prefix, are automatically added to the commit/deltacommit metadata.\nThis is useful to store checkpointing information, in a consistent way with the hudi timeline"),(0,a.kt)("h4",{id:"insert_drop_dups_opt_key"},"INSERT_DROP_DUPS_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.write.insert.drop.duplicates"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," ",(0,a.kt)("br",null),"\nIf set to true, filters out all duplicate records from incoming dataframe, during insert operations. "),(0,a.kt)("h4",{id:"enable_row_writer_opt_key"},"ENABLE_ROW_WRITER_OPT_KEY"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.write.row.writer.enable"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," ",(0,a.kt)("br",null),"\nWhen set to true, will perform write operations directly using the spark native ",(0,a.kt)("inlineCode",{parentName:"p"},"Row"),"\nrepresentation. This is expected to be faster by 20 to 30% than regular bulk_insert by setting this config"),(0,a.kt)("h4",{id:"hive_sync_enabled_opt_key"},"HIVE_SYNC_ENABLED_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.hive_sync.enable"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," ",(0,a.kt)("br",null),"\nWhen set to true, register/sync the table to Apache Hive metastore"),(0,a.kt)("h4",{id:"hive_database_opt_key"},"HIVE_DATABASE_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.hive_sync.database"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," ",(0,a.kt)("br",null),"\ndatabase to sync to"),(0,a.kt)("h4",{id:"hive_table_opt_key"},"HIVE_TABLE_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.hive_sync.table"),", ","[Required]"," ",(0,a.kt)("br",null),"\ntable to sync to"),(0,a.kt)("h4",{id:"hive_user_opt_key"},"HIVE_USER_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.hive_sync.username"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"hive")," ",(0,a.kt)("br",null),"\nhive user name to use"),(0,a.kt)("h4",{id:"hive_pass_opt_key"},"HIVE_PASS_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.hive_sync.password"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"hive")," ",(0,a.kt)("br",null),"\nhive password to use"),(0,a.kt)("h4",{id:"hive_url_opt_key"},"HIVE_URL_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.hive_sync.jdbcurl"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"jdbc:hive2://localhost:10000")," ",(0,a.kt)("br",null),"\nHive metastore url"),(0,a.kt)("h4",{id:"hive_partition_fields_opt_key"},"HIVE_PARTITION_FIELDS_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.hive_sync.partition_fields"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"}," ")," ",(0,a.kt)("br",null),"\nfield in the table to use for determining hive partition columns."),(0,a.kt)("h4",{id:"hive_partition_extractor_class_opt_key"},"HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.hive_sync.partition_extractor_class"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"org.apache.hudi.hive.SlashEncodedDayPartitionValueExtractor")," ",(0,a.kt)("br",null),"\nClass used to extract partition field values into hive partition columns."),(0,a.kt)("h4",{id:"hive_assume_date_partition_opt_key"},"HIVE_ASSUME_DATE_PARTITION_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.hive_sync.assume_date_partitioning"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," ",(0,a.kt)("br",null),"\nAssume partitioning is yyyy/mm/dd"),(0,a.kt)("h4",{id:"hive_use_jdbc_opt_key"},"HIVE_USE_JDBC_OPT_KEY"),(0,a.kt)("p",null,"  Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.hive_sync.use_jdbc"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," ",(0,a.kt)("br",null),"\nUse JDBC when hive synchronization is enabled"),(0,a.kt)("h3",{id:"read-options"},"Read Options"),(0,a.kt)("p",null,"Options useful for reading tables via ",(0,a.kt)("inlineCode",{parentName:"p"},"read.format.option(...)")),(0,a.kt)("h4",{id:"query_type_opt_key"},"QUERY_TYPE_OPT_KEY"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.query.type"),", Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"snapshot")," ",(0,a.kt)("br",null),"\nWhether data needs to be read, in incremental mode (new data since an instantTime)\n(or) Read Optimized mode (obtain latest view, based on columnar data)\n(or) Snapshot mode (obtain latest view, based on row & columnar data)"),(0,a.kt)("h4",{id:"begin_instanttime_opt_key"},"BEGIN_INSTANTTIME_OPT_KEY"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.read.begin.instanttime"),", ","[Required in incremental mode]"," ",(0,a.kt)("br",null),"\nInstant time to start incrementally pulling data from. The instanttime here need not\nnecessarily correspond to an instant on the timeline. New data written with an\n",(0,a.kt)("inlineCode",{parentName:"p"},"instant_time > BEGIN_INSTANTTIME")," are fetched out. For e.g: '20170901080000' will get\nall new data written after Sep 1, 2017 08:00AM."),(0,a.kt)("h4",{id:"end_instanttime_opt_key"},"END_INSTANTTIME_OPT_KEY"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.datasource.read.end.instanttime"),", Default: latest instant (i.e fetches all new data since begin instant time) ",(0,a.kt)("br",null),"\nInstant time to limit incrementally fetched data to. New data written with an\n",(0,a.kt)("inlineCode",{parentName:"p"},"instant_time &lt;= END_INSTANTTIME")," are fetched out."),(0,a.kt)("h2",{id:"writeclient-configs"},"WriteClient Configs"),(0,a.kt)("p",null,"Jobs programming directly against the RDD level apis can build a ",(0,a.kt)("inlineCode",{parentName:"p"},"HoodieWriteConfig")," object and pass it in to the ",(0,a.kt)("inlineCode",{parentName:"p"},"HoodieWriteClient")," constructor.\nHoodieWriteConfig can be built using a builder pattern as below. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder()\n        .withPath(basePath)\n        .forTable(tableName)\n        .withSchema(schemaStr)\n        .withProps(props) // pass raw k,v pairs from a property file.\n        .withCompactionConfig(HoodieCompactionConfig.newBuilder().withXXX(...).build())\n        .withIndexConfig(HoodieIndexConfig.newBuilder().withXXX(...).build())\n        ...\n        .build();\n")),(0,a.kt)("p",null,"Following subsections go over different aspects of write configs, explaining most important configs with their property names, default values."),(0,a.kt)("h4",{id:"withpathhoodie_base_path"},"withPath(hoodie_base_path)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.base.path")," ","[Required]"," ",(0,a.kt)("br",null),"\nBase DFS path under which all the data partitions are created. Always prefix it explicitly with the storage scheme (e.g hdfs://, s3:// etc). Hudi stores all the main meta-data about commits, savepoints, cleaning audit logs etc in .hoodie directory under the base directory. "),(0,a.kt)("h4",{id:"withschemaschema_str"},"withSchema(schema_str)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.avro.schema")," ","[Required]",(0,a.kt)("br",null),"\nThis is the current reader avro schema for the table. This is a string of the entire schema. HoodieWriteClient uses this schema to pass on to implementations of HoodieRecordPayload to convert from the source format to avro record. This is also used when re-writing records during an update. "),(0,a.kt)("h4",{id:"fortabletable_name"},"forTable(table_name)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.table.name")," ","[Required]"," ",(0,a.kt)("br",null),"\nTable name that will be used for registering with Hive. Needs to be same across runs."),(0,a.kt)("h4",{id:"withbulkinsertparallelismbulk_insert_parallelism--1500"},"withBulkInsertParallelism(bulk_insert_parallelism = 1500)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bulkinsert.shuffle.parallelism"),(0,a.kt)("br",null),"\nBulk insert is meant to be used for large initial imports and this parallelism determines the initial number of files in your table. Tune this to achieve a desired optimal size during initial import."),(0,a.kt)("h4",{id:"withuserdefinedbulkinsertpartitionerclassclassname--xyzuserdefinedpatitionerclass"},"withUserDefinedBulkInsertPartitionerClass(className = x.y.z.UserDefinedPatitionerClass)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bulkinsert.user.defined.partitioner.class"),(0,a.kt)("br",null),"\nIf specified, this class will be used to re-partition input records before they are inserted."),(0,a.kt)("h4",{id:"withbulkinsertsortmodemode--bulkinsertsortmodeglobal_sort"},"withBulkInsertSortMode(mode = BulkInsertSortMode.GLOBAL_SORT)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bulkinsert.sort.mode"),(0,a.kt)("br",null),"\nSorting modes to use for sorting records for bulk insert. This is leveraged when user defined partitioner is not configured. Default is GLOBAL_SORT.\nAvailable values are - ",(0,a.kt)("strong",{parentName:"p"},"GLOBAL_SORT"),":  this ensures best file sizes, with lowest memory overhead at cost of sorting.\n",(0,a.kt)("strong",{parentName:"p"},"PARTITION_SORT"),": Strikes a balance by only sorting within a partition, still keeping the memory overhead of writing lowest and best effort file sizing.\n",(0,a.kt)("strong",{parentName:"p"},"NONE"),": No sorting. Fastest and matches ",(0,a.kt)("inlineCode",{parentName:"p"},"spark.write.parquet()")," in terms of number of files, overheads "),(0,a.kt)("h4",{id:"withparallelisminsert_shuffle_parallelism--1500-upsert_shuffle_parallelism--1500"},"withParallelism(insert_shuffle_parallelism = 1500, upsert_shuffle_parallelism = 1500)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.insert.shuffle.parallelism"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.upsert.shuffle.parallelism"),(0,a.kt)("br",null),"\nOnce data has been initially imported, this parallelism controls initial parallelism for reading input records. Ensure this value is high enough say: 1 partition for 1 GB of input data"),(0,a.kt)("h4",{id:"combineinputon_insert--false-on_updatetrue"},"combineInput(on_insert = false, on_update=true)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.combine.before.insert"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.combine.before.upsert"),(0,a.kt)("br",null),"\nFlag which first combines the input RDD and merges multiple partial records into a single record before inserting or updating in DFS"),(0,a.kt)("h4",{id:"withwritestatusstoragelevellevel--memory_and_disk_ser"},"withWriteStatusStorageLevel(level = MEMORY_AND_DISK_SER)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.write.status.storage.level"),(0,a.kt)("br",null),"\nHoodieWriteClient.insert and HoodieWriteClient.upsert returns a persisted RDD","[WriteStatus]",", this is because the Client can choose to inspect the WriteStatus and choose and commit or not based on the failures. This is a configuration for the storage level for this RDD "),(0,a.kt)("h4",{id:"withautocommitautocommit--true"},"withAutoCommit(autoCommit = true)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.auto.commit"),(0,a.kt)("br",null),'\nShould HoodieWriteClient autoCommit after insert and upsert. The client can choose to turn off auto-commit and commit on a "defined success condition"'),(0,a.kt)("h4",{id:"withassumedatepartitioningassumedatepartitioning--false"},"withAssumeDatePartitioning(assumeDatePartitioning = false)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.assume.date.partitioning"),(0,a.kt)("br",null),"\nShould HoodieWriteClient assume the data is partitioned by dates, i.e three levels from base path. This is a stop-gap to support tables created by versions ","<"," 0.3.1. Will be removed eventually "),(0,a.kt)("h4",{id:"withconsistencycheckenabledenabled--false"},"withConsistencyCheckEnabled(enabled = false)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.consistency.check.enabled"),(0,a.kt)("br",null),"\nShould HoodieWriteClient perform additional checks to ensure written files' are listable on the underlying filesystem/storage. Set this to true, to workaround S3's eventual consistency model and ensure all data written as a part of a commit is faithfully available for queries. "),(0,a.kt)("h4",{id:"withrollbackparallelismrollbackparallelism--100"},"withRollbackParallelism(rollbackParallelism = 100)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.rollback.parallelism"),(0,a.kt)("br",null),"\nDetermines the parallelism for rollback of commits."),(0,a.kt)("h4",{id:"withrollbackusingmarkersrollbackusingmarkers--false"},"withRollbackUsingMarkers(rollbackUsingMarkers = false)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.rollback.using.markers"),(0,a.kt)("br",null),"\nEnables a more efficient mechanism for rollbacks based on the marker files generated during the writes. Turned off by default."),(0,a.kt)("h4",{id:"withmarkersdeleteparallelismparallelism--100"},"withMarkersDeleteParallelism(parallelism = 100)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.markers.delete.parallelism"),(0,a.kt)("br",null),"\nDetermines the parallelism for deleting marker files."),(0,a.kt)("h3",{id:"index-configs"},"Index configs"),(0,a.kt)("p",null,"Following configs control indexing behavior, which tags incoming records as either inserts or updates to older records. "),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"#index-configs"},"withIndexConfig")," (HoodieIndexConfig) ",(0,a.kt)("br",null),"\nThis is pluggable to have a external index (HBase) or use the default bloom filter stored in the Parquet files"),(0,a.kt)("h4",{id:"withindexclassindexclass--xyzuserdefinedindex"},'withIndexClass(indexClass = "x.y.z.UserDefinedIndex")'),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.index.class")," ",(0,a.kt)("br",null),"\nFull path of user-defined index class and must be a subclass of HoodieIndex class. It will take precedence over the ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.index.type")," configuration if specified"),(0,a.kt)("h4",{id:"withindextypeindextype--bloom"},"withIndexType(indexType = BLOOM)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.index.type")," ",(0,a.kt)("br",null),"\nType of index to use. Default is Bloom filter. Possible options are ","[BLOOM | GLOBAL_BLOOM |SIMPLE | GLOBAL_SIMPLE | INMEMORY | HBASE]",". Bloom filters removes the dependency on a external system and is stored in the footer of the Parquet Data Files"),(0,a.kt)("h4",{id:"bloom-index-configs"},"Bloom Index configs"),(0,a.kt)("h4",{id:"bloomfilternumentriesnumentries--60000"},"bloomFilterNumEntries(numEntries = 60000)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.index.bloom.num_entries")," ",(0,a.kt)("br",null),"\nOnly applies if index type is BLOOM. ",(0,a.kt)("br",null),"This is the number of entries to be stored in the bloom filter. We assume the maxParquetFileSize is 128MB and averageRecordSize is 1024B and hence we approx a total of 130K records in a file. The default (60000) is roughly half of this approximation. ",(0,a.kt)("a",{parentName:"p",href:"https://issues.apache.org/jira/browse/HUDI-56"},"HUDI-56")," tracks computing this dynamically. Warning: Setting this very low, will generate a lot of false positives and index lookup will have to scan a lot more files than it has to and Setting this to a very high number will increase the size every data file linearly (roughly 4KB for every 50000 entries)."),(0,a.kt)("h4",{id:"bloomfilterfppfpp--0000000001"},"bloomFilterFPP(fpp = 0.000000001)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.index.bloom.fpp")," ",(0,a.kt)("br",null),"\nOnly applies if index type is BLOOM. ",(0,a.kt)("br",null)," Error rate allowed given the number of entries. This is used to calculate how many bits should be assigned for the bloom filter and the number of hash functions. This is usually set very low (default: 0.000000001), we like to tradeoff disk space for lower false positives"),(0,a.kt)("h4",{id:"bloomindexparallelism0"},"bloomIndexParallelism(0)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bloom.index.parallelism")," ",(0,a.kt)("br",null),"\nOnly applies if index type is BLOOM. ",(0,a.kt)("br",null)," This is the amount of parallelism for index lookup, which involves a Spark Shuffle. By default, this is auto computed based on input workload characteristics"),(0,a.kt)("h4",{id:"bloomindexprunebyrangespruneranges--true"},"bloomIndexPruneByRanges(pruneRanges = true)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bloom.index.prune.by.ranges")," ",(0,a.kt)("br",null),"\nOnly applies if index type is BLOOM. ",(0,a.kt)("br",null)," When true, range information from files to leveraged speed up index lookups. Particularly helpful, if the key has a monotonously increasing prefix, such as timestamp."),(0,a.kt)("h4",{id:"bloomindexusecachingusecaching--true"},"bloomIndexUseCaching(useCaching = true)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bloom.index.use.caching")," ",(0,a.kt)("br",null),"\nOnly applies if index type is BLOOM. ",(0,a.kt)("br",null)," When true, the input RDD will cached to speed up index lookup by reducing IO for computing parallelism or affected partitions"),(0,a.kt)("h4",{id:"bloomindextreebasedfilterusetreefilter--true"},"bloomIndexTreebasedFilter(useTreeFilter = true)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bloom.index.use.treebased.filter")," ",(0,a.kt)("br",null),"\nOnly applies if index type is BLOOM. ",(0,a.kt)("br",null)," When true, interval tree based file pruning optimization is enabled. This mode speeds-up file-pruning based on key ranges when compared with the brute-force mode"),(0,a.kt)("h4",{id:"bloomindexbucketizedcheckingbucketizedchecking--true"},"bloomIndexBucketizedChecking(bucketizedChecking = true)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bloom.index.bucketized.checking")," ",(0,a.kt)("br",null),"\nOnly applies if index type is BLOOM. ",(0,a.kt)("br",null)," When true, bucketized bloom filtering is enabled. This reduces skew seen in sort based bloom index lookup"),(0,a.kt)("h4",{id:"bloomindexfiltertypebucketizedchecking--bloomfiltertypecodesimple"},"bloomIndexFilterType(bucketizedChecking = BloomFilterTypeCode.SIMPLE)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bloom.index.filter.type")," ",(0,a.kt)("br",null),"\nFilter type used. Default is BloomFilterTypeCode.SIMPLE. Available values are ","[BloomFilterTypeCode.SIMPLE , BloomFilterTypeCode.DYNAMIC_V0]",". Dynamic bloom filters auto size themselves based on number of keys"),(0,a.kt)("h4",{id:"bloomindexfilterdynamicmaxentriesmaxnumberofentries--100000"},"bloomIndexFilterDynamicMaxEntries(maxNumberOfEntries = 100000)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bloom.index.filter.dynamic.max.entries")," ",(0,a.kt)("br",null),"\nThe threshold for the maximum number of keys to record in a dynamic Bloom filter row. Only applies if filter type is BloomFilterTypeCode.DYNAMIC_V0."),(0,a.kt)("h4",{id:"bloomindexkeysperbucketkeysperbucket--10000000"},"bloomIndexKeysPerBucket(keysPerBucket = 10000000)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bloom.index.keys.per.bucket")," ",(0,a.kt)("br",null),"\nOnly applies if bloomIndexBucketizedChecking is enabled and index type is bloom. ",(0,a.kt)("br",null),' This configuration controls the "bucket" size which tracks the number of record-key checks made against a single file and is the unit of work allocated to each partition performing bloom filter lookup. A higher value would amortize the fixed cost of reading a bloom filter to memory. '),(0,a.kt)("h5",{id:"withbloomindexinputstoragelevellevel--memory_and_disk_ser"},"withBloomIndexInputStorageLevel(level = MEMORY_AND_DISK_SER)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bloom.index.input.storage.level")," ",(0,a.kt)("br",null),"\nOnly applies when ",(0,a.kt)("a",{parentName:"p",href:"#bloomIndexUseCaching"},"#bloomIndexUseCaching")," is set. Determine what level of persistence is used to cache input RDDs.",(0,a.kt)("br",null)," Refer to org.apache.spark.storage.StorageLevel for different values"),(0,a.kt)("h5",{id:"bloomindexupdatepartitionpathupdatepartitionpath--false"},"bloomIndexUpdatePartitionPath(updatePartitionPath = false)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.bloom.index.update.partition.path")," ",(0,a.kt)("br",null),"\nOnly applies if index type is GLOBAL_BLOOM. ",(0,a.kt)("br",null),"When set to true, an update including the partition path of a record that already exists will result in inserting the incoming record into the new partition and deleting the original record in the old partition. When set to false, the original record will only be updated in the old partition."),(0,a.kt)("h4",{id:"hbase-index-configs"},"HBase Index configs"),(0,a.kt)("h4",{id:"hbasezkquorumzkstring-required"},"hbaseZkQuorum(zkString) ","[Required]"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.index.hbase.zkquorum")," ",(0,a.kt)("br",null),"\nOnly applies if index type is HBASE. HBase ZK Quorum url to connect to."),(0,a.kt)("h4",{id:"hbasezkportport-required"},"hbaseZkPort(port) ","[Required]"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.index.hbase.zkport")," ",(0,a.kt)("br",null),"\nOnly applies if index type is HBASE. HBase ZK Quorum port to connect to."),(0,a.kt)("h4",{id:"hbasezkznodeparentzkznodeparent--required"},"hbaseZkZnodeParent(zkZnodeParent)  ","[Required]"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.index.hbase.zknode.path")," ",(0,a.kt)("br",null),"\nOnly applies if index type is HBASE. This is the root znode that will contain all the znodes created/used by HBase."),(0,a.kt)("h4",{id:"hbasetablenametablename--required"},"hbaseTableName(tableName)  ","[Required]"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.index.hbase.table")," ",(0,a.kt)("br",null),"\nOnly applies if index type is HBASE. HBase Table name to use as the index. Hudi stores the row_key and ","[partition_path, fileID, commitTime]"," mapping in the table."),(0,a.kt)("h4",{id:"simple-index-configs"},"Simple Index configs"),(0,a.kt)("h4",{id:"simpleindexusecachingusecaching--true"},"simpleIndexUseCaching(useCaching = true)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.simple.index.use.caching")," ",(0,a.kt)("br",null),"\nOnly applies if index type is SIMPLE. ",(0,a.kt)("br",null)," When true, the input RDD will cached to speed up index lookup by reducing IO for computing parallelism or affected partitions"),(0,a.kt)("h5",{id:"withsimpleindexinputstoragelevellevel--memory_and_disk_ser"},"withSimpleIndexInputStorageLevel(level = MEMORY_AND_DISK_SER)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.simple.index.input.storage.level")," ",(0,a.kt)("br",null),"\nOnly applies when ",(0,a.kt)("a",{parentName:"p",href:"#simpleIndexUseCaching"},"#simpleIndexUseCaching")," is set. Determine what level of persistence is used to cache input RDDs.",(0,a.kt)("br",null)," Refer to org.apache.spark.storage.StorageLevel for different values"),(0,a.kt)("h4",{id:"withsimpleindexparallelismparallelism--50"},"withSimpleIndexParallelism(parallelism = 50)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.simple.index.parallelism")," ",(0,a.kt)("br",null),"\nOnly applies if index type is SIMPLE. ",(0,a.kt)("br",null)," This is the amount of parallelism for index lookup, which involves a Spark Shuffle."),(0,a.kt)("h4",{id:"withglobalsimpleindexparallelismparallelism--100"},"withGlobalSimpleIndexParallelism(parallelism = 100)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.global.simple.index.parallelism")," ",(0,a.kt)("br",null),"\nOnly applies if index type is GLOBAL_SIMPLE. ",(0,a.kt)("br",null)," This is the amount of parallelism for index lookup, which involves a Spark Shuffle."),(0,a.kt)("h3",{id:"storage-configs"},"Storage configs"),(0,a.kt)("p",null,"Controls aspects around sizing parquet and log files."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"#withStorageConfig"},"withStorageConfig")," (HoodieStorageConfig) ",(0,a.kt)("br",null)),(0,a.kt)("h4",{id:"limitfilesize-size--120mb"},"limitFileSize (size = 120MB)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.parquet.max.file.size")," ",(0,a.kt)("br",null),"\nTarget size for parquet files produced by Hudi write phases. For DFS, this needs to be aligned with the underlying filesystem block size for optimal performance. "),(0,a.kt)("h4",{id:"parquetblocksizerowgroupsize--120mb"},"parquetBlockSize(rowgroupsize = 120MB)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.parquet.block.size")," ",(0,a.kt)("br",null),"\nParquet RowGroup size. Its better this is same as the file size, so that a single column within a file is stored continuously on disk"),(0,a.kt)("h4",{id:"parquetpagesizepagesize--1mb"},"parquetPageSize(pagesize = 1MB)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.parquet.page.size")," ",(0,a.kt)("br",null),"\nParquet page size. Page is the unit of read within a parquet file. Within a block, pages are compressed seperately. "),(0,a.kt)("h4",{id:"parquetcompressionratioparquetcompressionratio--01"},"parquetCompressionRatio(parquetCompressionRatio = 0.1)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.parquet.compression.ratio")," ",(0,a.kt)("br",null),"\nExpected compression of parquet data used by Hudi, when it tries to size new parquet files. Increase this value, if bulk_insert is producing smaller than expected sized files"),(0,a.kt)("h4",{id:"parquetcompressioncodecparquetcompressioncodec--gzip"},"parquetCompressionCodec(parquetCompressionCodec = gzip)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.parquet.compression.codec")," ",(0,a.kt)("br",null),"\nParquet compression codec name. Default is gzip. Possible options are ","[gzip | snappy | uncompressed | lzo]"),(0,a.kt)("h4",{id:"logfilemaxsizelogfilesize--1gb"},"logFileMaxSize(logFileSize = 1GB)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.logfile.max.size")," ",(0,a.kt)("br",null),"\nLogFile max size. This is the maximum size allowed for a log file before it is rolled over to the next version. "),(0,a.kt)("h4",{id:"logfiledatablockmaxsizedatablocksize--256mb"},"logFileDataBlockMaxSize(dataBlockSize = 256MB)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.logfile.data.block.max.size")," ",(0,a.kt)("br",null),"\nLogFile Data block max size. This is the maximum size allowed for a single data block to be appended to a log file. This helps to make sure the data appended to the log file is broken up into sizable blocks to prevent from OOM errors. This size should be greater than the JVM memory. "),(0,a.kt)("h4",{id:"logfiletoparquetcompressionratiologfiletoparquetcompressionratio--035"},"logFileToParquetCompressionRatio(logFileToParquetCompressionRatio = 0.35)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.logfile.to.parquet.compression.ratio")," ",(0,a.kt)("br",null),"\nExpected additional compression as records move from log files to parquet. Used for merge_on_read table to send inserts into log files & control the size of compacted parquet file."),(0,a.kt)("h4",{id:"parquetcompressioncodecparquetcompressioncodec--gzip-1"},"parquetCompressionCodec(parquetCompressionCodec = gzip)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.parquet.compression.codec")," ",(0,a.kt)("br",null),"\nCompression Codec for parquet files "),(0,a.kt)("h3",{id:"compaction-configs"},"Compaction configs"),(0,a.kt)("p",null,"Configs that control compaction (merging of log files onto a new parquet base file), cleaning (reclamation of older/unused file groups).\n",(0,a.kt)("a",{parentName:"p",href:"#withCompactionConfig"},"withCompactionConfig")," (HoodieCompactionConfig) ",(0,a.kt)("br",null)),(0,a.kt)("h4",{id:"withcleanerpolicypolicy--keep_latest_commits"},"withCleanerPolicy(policy = KEEP_LATEST_COMMITS)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.cleaner.policy")," ",(0,a.kt)("br",null),"\nCleaning policy to be used. Hudi will delete older versions of parquet files to re-claim space. Any Query/Computation referring to this version of the file will fail. It is good to make sure that the data is retained for more than the maximum query execution time."),(0,a.kt)("h4",{id:"retaincommitsno_of_commits_to_retain--24"},"retainCommits(no_of_commits_to_retain = 24)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.cleaner.commits.retained")," ",(0,a.kt)("br",null),"\nNumber of commits to retain. So data will be retained for num_of_commits * time_between_commits (scheduled). This also directly translates into how much you can incrementally pull on this table"),(0,a.kt)("h4",{id:"withautocleanautoclean--true"},"withAutoClean(autoClean = true)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.clean.automatic")," ",(0,a.kt)("br",null),"\nShould cleanup if there is anything to cleanup immediately after the commit"),(0,a.kt)("h4",{id:"withasynccleanasyncclean--false"},"withAsyncClean(asyncClean = false)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.clean.async")," ",(0,a.kt)("br",null),"\nOnly applies when ",(0,a.kt)("a",{parentName:"p",href:"#withAutoClean"},"#withAutoClean")," is turned on. When turned on runs cleaner async with writing. "),(0,a.kt)("h4",{id:"archivecommitswithmincommits--96-maxcommits--128"},"archiveCommitsWith(minCommits = 96, maxCommits = 128)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.keep.min.commits"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.keep.max.commits")," ",(0,a.kt)("br",null),"\nEach commit is a small file in the ",(0,a.kt)("inlineCode",{parentName:"p"},".hoodie")," directory. Since DFS typically does not favor lots of small files, Hudi archives older commits into a sequential log. A commit is published atomically by a rename of the commit file."),(0,a.kt)("h4",{id:"withcommitsarchivalbatchsizebatch--10"},"withCommitsArchivalBatchSize(batch = 10)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.commits.archival.batch")," ",(0,a.kt)("br",null),"\nThis controls the number of commit instants read in memory as a batch and archived together."),(0,a.kt)("h4",{id:"compactionsmallfilesizesize--100mb"},"compactionSmallFileSize(size = 100MB)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.parquet.small.file.limit")," ",(0,a.kt)("br",null),"\nThis should be less ","<",' maxFileSize and setting it to 0, turns off this feature. Small files can always happen because of the number of insert records in a partition in a batch. Hudi has an option to auto-resolve small files by masking inserts into this partition as updates to existing small files. The size here is the minimum file size considered as a "small file size".'),(0,a.kt)("h4",{id:"insertsplitsizesize--500000"},"insertSplitSize(size = 500000)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.copyonwrite.insert.split.size")," ",(0,a.kt)("br",null),"\nInsert Write Parallelism. Number of inserts grouped for a single partition. Writing out 100MB files, with atleast 1kb records, means 100K records per file. Default is to overprovision to 500K. To improve insert latency, tune this to match the number of records in a single file. Setting this to a low number, will result in small files (particularly when compactionSmallFileSize is 0)"),(0,a.kt)("h4",{id:"autotuneinsertsplitstrue"},"autoTuneInsertSplits(true)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.copyonwrite.insert.auto.split")," ",(0,a.kt)("br",null),"\nShould hudi dynamically compute the insertSplitSize based on the last 24 commit's metadata. Turned on by default. "),(0,a.kt)("h4",{id:"approxrecordsizesize--1024"},"approxRecordSize(size = 1024)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.copyonwrite.record.size.estimate")," ",(0,a.kt)("br",null),"\nThe average record size. If specified, hudi will use this and not compute dynamically based on the last 24 commit's metadata. No value set as default. This is critical in computing the insert parallelism and bin-packing inserts into small files. See above."),(0,a.kt)("h4",{id:"withinlinecompactioninlinecompaction--false"},"withInlineCompaction(inlineCompaction = false)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.compact.inline")," ",(0,a.kt)("br",null),"\nWhen set to true, compaction is triggered by the ingestion itself, right after a commit/deltacommit action as part of insert/upsert/bulk_insert"),(0,a.kt)("h4",{id:"withmaxnumdeltacommitsbeforecompactionmaxnumdeltacommitsbeforecompaction--10"},"withMaxNumDeltaCommitsBeforeCompaction(maxNumDeltaCommitsBeforeCompaction = 10)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.compact.inline.max.delta.commits")," ",(0,a.kt)("br",null),"\nNumber of max delta commits to keep before triggering an inline compaction"),(0,a.kt)("h4",{id:"withcompactionlazyblockreadenabledtrue"},"withCompactionLazyBlockReadEnabled(true)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.compaction.lazy.block.read")," ",(0,a.kt)("br",null),"\nWhen a CompactedLogScanner merges all log files, this config helps to choose whether the logblocks should be read lazily or not. Choose true to use I/O intensive lazy block reading (low memory usage) or false for Memory intensive immediate block read (high memory usage)"),(0,a.kt)("h4",{id:"withcompactionreverselogreadenabledfalse"},"withCompactionReverseLogReadEnabled(false)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.compaction.reverse.log.read")," ",(0,a.kt)("br",null),"\nHoodieLogFormatReader reads a logfile in the forward direction starting from pos=0 to pos=file_length. If this config is set to true, the Reader reads the logfile in reverse direction, from pos=file_length to pos=0"),(0,a.kt)("h4",{id:"withcleanerparallelismcleanerparallelism--200"},"withCleanerParallelism(cleanerParallelism = 200)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.cleaner.parallelism")," ",(0,a.kt)("br",null),"\nIncrease this if cleaning becomes slow."),(0,a.kt)("h4",{id:"withcompactionstrategycompactionstrategy--orgapachehudiiocompactstrategylogfilesizebasedcompactionstrategy"},"withCompactionStrategy(compactionStrategy = org.apache.hudi.io.compact.strategy.LogFileSizeBasedCompactionStrategy)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.compaction.strategy")," ",(0,a.kt)("br",null),"\nCompaction strategy decides which file groups are picked up for compaction during each compaction run. By default. Hudi picks the log file with most accumulated unmerged data"),(0,a.kt)("h4",{id:"withtargetiopercompactioninmbtargetiopercompactioninmb--500000"},"withTargetIOPerCompactionInMB(targetIOPerCompactionInMB = 500000)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.compaction.target.io")," ",(0,a.kt)("br",null),"\nAmount of MBs to spend during compaction run for the LogFileSizeBasedCompactionStrategy. This value helps bound ingestion latency while compaction is run inline mode."),(0,a.kt)("h4",{id:"withtargetpartitionsperdaybasedcompactiontargetpartitionspercompaction--10"},"withTargetPartitionsPerDayBasedCompaction(targetPartitionsPerCompaction = 10)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.compaction.daybased.target")," ",(0,a.kt)("br",null),"\nUsed by org.apache.hudi.io.compact.strategy.DayBasedCompactionStrategy to denote the number of latest partitions to compact during a compaction run.    "),(0,a.kt)("h4",{id:"withpayloadclasspayloadclassname--orgapachehudicommonmodelhoodieavropayload"},"withPayloadClass(payloadClassName = org.apache.hudi.common.model.HoodieAvroPayload)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.compaction.payload.class")," ",(0,a.kt)("br",null),"\nThis needs to be same as class used during insert/upserts. Just like writing, compaction also uses the record payload class to merge records in the log against each other, merge again with the base file and produce the final record to be written after compaction."),(0,a.kt)("h3",{id:"metrics-configs"},"Metrics configs"),(0,a.kt)("p",null,"Enables reporting on Hudi metrics.\n",(0,a.kt)("a",{parentName:"p",href:"#withMetricsConfig"},"withMetricsConfig")," (HoodieMetricsConfig) ",(0,a.kt)("br",null),"\nHudi publishes metrics on every commit, clean, rollback etc. The following sections list the supported reporters."),(0,a.kt)("h4",{id:"graphite"},"GRAPHITE"),(0,a.kt)("h5",{id:"onmetricson--false"},"on(metricsOn = false)"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.on")," ",(0,a.kt)("br",null),"\nTurn on/off metrics reporting. off by default."),(0,a.kt)("h5",{id:"withreportertypereportertype--graphite"},"withReporterType(reporterType = GRAPHITE)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.reporter.type")," ",(0,a.kt)("br",null),"\nType of metrics reporter."),(0,a.kt)("h5",{id:"tographitehosthost--localhost"},"toGraphiteHost(host = localhost)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.graphite.host")," ",(0,a.kt)("br",null),"\nGraphite host to connect to"),(0,a.kt)("h5",{id:"ongraphiteportport--4756"},"onGraphitePort(port = 4756)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.graphite.port")," ",(0,a.kt)("br",null),"\nGraphite port to connect to"),(0,a.kt)("h5",{id:"useprefixprefix--"},'usePrefix(prefix = "")'),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.graphite.metric.prefix")," ",(0,a.kt)("br",null),"\nStandard prefix applied to all metrics. This helps to add datacenter, environment information for e.g"),(0,a.kt)("h4",{id:"jmx"},"JMX"),(0,a.kt)("h5",{id:"onmetricson--false-1"},"on(metricsOn = false)"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.on")," ",(0,a.kt)("br",null),"\nTurn on/off metrics reporting. off by default."),(0,a.kt)("h5",{id:"withreportertypereportertype--jmx"},"withReporterType(reporterType = JMX)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.reporter.type")," ",(0,a.kt)("br",null),"\nType of metrics reporter."),(0,a.kt)("h5",{id:"tojmxhosthost--localhost"},"toJmxHost(host = localhost)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.jmx.host")," ",(0,a.kt)("br",null),"\nJmx host to connect to"),(0,a.kt)("h5",{id:"onjmxportport--1000-5000"},"onJmxPort(port = 1000-5000)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.jmx.port")," ",(0,a.kt)("br",null),"\nJmx port to connect to"),(0,a.kt)("h4",{id:"datadog"},"DATADOG"),(0,a.kt)("h5",{id:"onmetricson--false-2"},"on(metricsOn = false)"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.on")," ",(0,a.kt)("br",null),"\nTurn on/off metrics reporting. off by default."),(0,a.kt)("h5",{id:"withreportertypereportertype--datadog"},"withReporterType(reporterType = DATADOG)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.reporter.type")," ",(0,a.kt)("br",null),"\nType of metrics reporter."),(0,a.kt)("h5",{id:"withdatadogreportperiodsecondsperiod--30"},"withDatadogReportPeriodSeconds(period = 30)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.datadog.report.period.seconds")," ",(0,a.kt)("br",null),"\nDatadog report period in seconds. Default to 30."),(0,a.kt)("h5",{id:"withdatadogapisiteapisite"},"withDatadogApiSite(apiSite)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.datadog.api.site")," ",(0,a.kt)("br",null),"\nDatadog API site: EU or US"),(0,a.kt)("h5",{id:"withdatadogapikeyapikey"},"withDatadogApiKey(apiKey)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.datadog.api.key")," ",(0,a.kt)("br",null),"\nDatadog API key"),(0,a.kt)("h5",{id:"withdatadogapikeyskipvalidationskip--false"},"withDatadogApiKeySkipValidation(skip = false)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.datadog.api.key.skip.validation")," ",(0,a.kt)("br",null),"\nBefore sending metrics via Datadog API, whether to skip validating Datadog API key or not. Default to false."),(0,a.kt)("h5",{id:"withdatadogapikeysupplierapikeysupplier"},"withDatadogApiKeySupplier(apiKeySupplier)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.datadog.api.key.supplier")," ",(0,a.kt)("br",null),"\nDatadog API key supplier to supply the API key at runtime. This will take effect if ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.datadog.api.key")," is not set."),(0,a.kt)("h5",{id:"withdatadogapitimeoutsecondstimeout--3"},"withDatadogApiTimeoutSeconds(timeout = 3)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.datadog.metric.prefix")," ",(0,a.kt)("br",null),"\nDatadog API timeout in seconds. Default to 3."),(0,a.kt)("h5",{id:"withdatadogprefixprefix"},"withDatadogPrefix(prefix)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.datadog.metric.prefix")," ",(0,a.kt)("br",null),"\nDatadog metric prefix to be prepended to each metric name with a dot as delimiter. For example, if it is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"foo"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"foo.")," will be prepended."),(0,a.kt)("h5",{id:"withdatadoghosthost"},"withDatadogHost(host)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.datadog.metric.host")," ",(0,a.kt)("br",null),"\nDatadog metric host to be sent along with metrics data."),(0,a.kt)("h5",{id:"withdatadogtagstags"},"withDatadogTags(tags)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.datadog.metric.tags")," ",(0,a.kt)("br",null),"\nDatadog metric tags (comma-delimited) to be sent along with metrics data."),(0,a.kt)("h4",{id:"user-defined-reporter"},"USER DEFINED REPORTER"),(0,a.kt)("h5",{id:"onmetricson--false-3"},"on(metricsOn = false)"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.on")," ",(0,a.kt)("br",null),"\nTurn on/off metrics reporting. off by default."),(0,a.kt)("h5",{id:"withreporterclassclassname--"},'withReporterClass(className = "")'),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.metrics.reporter.class")," ",(0,a.kt)("br",null),"\nUser-defined class used to report metrics, must be a subclass of AbstractUserDefinedMetricsReporter."),(0,a.kt)("h3",{id:"memory-configs"},"Memory configs"),(0,a.kt)("p",null,"Controls memory usage for compaction and merges, performed internally by Hudi\n",(0,a.kt)("a",{parentName:"p",href:"#withMemoryConfig"},"withMemoryConfig")," (HoodieMemoryConfig) ",(0,a.kt)("br",null),"\nMemory related configs"),(0,a.kt)("h4",{id:"withmaxmemoryfractionperpartitionmergemaxmemoryfractionperpartitionmerge--06"},"withMaxMemoryFractionPerPartitionMerge(maxMemoryFractionPerPartitionMerge = 0.6)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.memory.merge.fraction")," ",(0,a.kt)("br",null),"\nThis fraction is multiplied with the user memory fraction (1 - spark.memory.fraction) to get a final fraction of heap space to use during merge "),(0,a.kt)("h4",{id:"withmaxmemorysizepercompactioninbytesmaxmemorysizepercompactioninbytes--1gb"},"withMaxMemorySizePerCompactionInBytes(maxMemorySizePerCompactionInBytes = 1GB)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.memory.compaction.fraction")," ",(0,a.kt)("br",null),"\nHoodieCompactedLogScanner reads logblocks, converts records to HoodieRecords and then merges these log blocks and records. At any point, the number of entries in a log block can be less than or equal to the number of entries in the corresponding parquet file. This can lead to OOM in the Scanner. Hence, a spillable map helps alleviate the memory pressure. Use this config to set the max allowable inMemory footprint of the spillable map."),(0,a.kt)("h4",{id:"withwritestatusfailurefractionfailurefraction--01"},"withWriteStatusFailureFraction(failureFraction = 0.1)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.memory.writestatus.failure.fraction")," ",(0,a.kt)("br",null),"\nThis property controls what fraction of the failed record, exceptions we report back to driver"),(0,a.kt)("h3",{id:"write-commit-callback-configs"},"Write commit callback configs"),(0,a.kt)("p",null,"Controls callback behavior on write commit. Exception will be thrown if user enabled the callback service and errors occurred during the process of callback. Currently support HTTP, Kafka type.\n",(0,a.kt)("a",{parentName:"p",href:"#withCallbackConfig"},"withCallbackConfig")," (HoodieWriteCommitCallbackConfig) ",(0,a.kt)("br",null),"\nCallback related configs"),(0,a.kt)("h5",{id:"writecommitcallbackoncallbackon--false"},"writeCommitCallbackOn(callbackOn = false)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.write.commit.callback.on")," ",(0,a.kt)("br",null),"\nTurn callback on/off. off by default."),(0,a.kt)("h5",{id:"withcallbackclasscallbackclass"},"withCallbackClass(callbackClass)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.write.commit.callback.class")," ",(0,a.kt)("br",null),"\nFull path of callback class and must be a subclass of HoodieWriteCommitCallback class, org.apache.hudi.callback.impl.HoodieWriteCommitHttpCallback by default"),(0,a.kt)("h4",{id:"http-callback"},"HTTP CALLBACK"),(0,a.kt)("p",null,"Callback via HTTP, User does not need to specify this way explicitly, it is the default type."),(0,a.kt)("h5",{id:"withcallbackhttpurlurl"},"withCallbackHttpUrl(url)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.write.commit.callback.http.url")," ",(0,a.kt)("br",null),"\nCallback host to be sent along with callback messages"),(0,a.kt)("h5",{id:"withcallbackhttptimeoutsecondstimeoutseconds--3"},"withCallbackHttpTimeoutSeconds(timeoutSeconds = 3)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.write.commit.callback.http.timeout.seconds")," ",(0,a.kt)("br",null),"\nCallback timeout in seconds. 3 by default"),(0,a.kt)("h5",{id:"withcallbackhttpapikeyapikey"},"withCallbackHttpApiKey(apiKey)"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.write.commit.callback.http.api.key")," ",(0,a.kt)("br",null),"\nHttp callback API key. hudi_write_commit_http_callback by default"),(0,a.kt)("h4",{id:"kafka-callback"},"KAFKA CALLBACK"),(0,a.kt)("p",null,"To use kafka callback, User should set ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.write.commit.callback.class")," = ",(0,a.kt)("inlineCode",{parentName:"p"},"org.apache.hudi.utilities.callback.kafka.HoodieWriteCommitKafkaCallback")),(0,a.kt)("h5",{id:"callback_kafka_bootstrap_servers"},"CALLBACK_KAFKA_BOOTSTRAP_SERVERS"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.write.commit.callback.kafka.bootstrap.servers")," ",(0,a.kt)("br",null),"\nBootstrap servers of kafka callback cluster"),(0,a.kt)("h5",{id:"callback_kafka_topic"},"CALLBACK_KAFKA_TOPIC"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.write.commit.callback.kafka.topic")," ",(0,a.kt)("br",null),"\nKafka topic to be sent along with callback messages"),(0,a.kt)("h5",{id:"callback_kafka_partition"},"CALLBACK_KAFKA_PARTITION"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.write.commit.callback.kafka.partition")," ",(0,a.kt)("br",null),"\npartition of ",(0,a.kt)("inlineCode",{parentName:"p"},"CALLBACK_KAFKA_TOPIC"),", 0 by default"),(0,a.kt)("h5",{id:"callback_kafka_acks"},"CALLBACK_KAFKA_ACKS"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.write.commit.callback.kafka.acks")," ",(0,a.kt)("br",null),"\nkafka acks level, ",(0,a.kt)("inlineCode",{parentName:"p"},"all")," by default"),(0,a.kt)("h5",{id:"callback_kafka_retries"},"CALLBACK_KAFKA_RETRIES"),(0,a.kt)("p",null,"Property: ",(0,a.kt)("inlineCode",{parentName:"p"},"hoodie.write.commit.callback.kafka.retries")," ",(0,a.kt)("br",null),"\nTimes to retry. 3 by default"))}m.isMDXComponent=!0}}]);