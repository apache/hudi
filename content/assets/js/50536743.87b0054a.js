"use strict";(self.webpackChunkhudi=self.webpackChunkhudi||[]).push([[43078],{11470:(e,t,n)=>{n.d(t,{A:()=>v});var r=n(96540),a=n(34164),i=n(23104),s=n(56347),l=n(205),o=n(57485),d=n(31682),c=n(70679);function u(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)(()=>{const e=t??function(e){return u(e).map(({props:{value:e,label:t,attributes:n,default:r}})=>({value:e,label:t,attributes:n,default:r}))}(n);return function(e){const t=(0,d.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function p({value:e,tabValues:t}){return t.some(t=>t.value===e)}function b({queryString:e=!1,groupId:t}){const n=(0,s.W6)(),a=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,o.aZ)(a),(0,r.useCallback)(e=>{if(!a)return;const t=new URLSearchParams(n.location.search);t.set(a,e),n.replace({...n.location,search:t.toString()})},[a,n])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=h(e),[s,o]=(0,r.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find(e=>e.default)??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i})),[d,u]=b({queryString:n,groupId:a}),[m,x]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,a]=(0,c.Dv)(t);return[n,(0,r.useCallback)(e=>{t&&a.set(e)},[t,a])]}({groupId:a}),f=(()=>{const e=d??m;return p({value:e,tabValues:i})?e:null})();(0,l.A)(()=>{f&&o(f)},[f]);return{selectedValue:s,selectValue:(0,r.useCallback)(e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),x(e)},[u,x,i]),tabValues:i}}var x=n(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(74848);function j({className:e,block:t,selectedValue:n,selectValue:r,tabValues:s}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),d=e=>{const t=e.currentTarget,a=l.indexOf(t),i=s[a].value;i!==n&&(o(t),r(i))},c=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},e),children:s.map(({value:e,label:t,attributes:r})=>(0,g.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{l.push(e)},onKeyDown:c,onClick:d,...r,className:(0,a.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":n===e}),children:t??e},e))})}function y({lazy:e,children:t,selectedValue:n}){const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===n);return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))})}function _(e){const t=m(e);return(0,g.jsxs)("div",{className:(0,a.A)("tabs-container",f.tabList),children:[(0,g.jsx)(j,{...t,...e}),(0,g.jsx)(y,{...t,...e})]})}function v(e){const t=(0,x.A)();return(0,g.jsx)(_,{...e,children:u(e.children)},String(t))}},19365:(e,t,n)=>{n.d(t,{A:()=>s});n(96540);var r=n(34164);const a={tabItem:"tabItem_Ymn6"};var i=n(74848);function s({children:e,hidden:t,className:n}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,n),hidden:t,children:e})}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var r=n(96540);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}},37593:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"python-rust-quick-start-guide","title":"Python/Rust Quick Start","description":"This guide will help you get started with Hudi-rs, the native Rust implementation for Apache Hudi with Python bindings. Learn how to install, set up, and perform basic operations using both Python and Rust interfaces.","source":"@site/docs/python-rust-quick-start-guide.md","sourceDirName":".","slug":"/python-rust-quick-start-guide","permalink":"/docs/next/python-rust-quick-start-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/hudi/tree/asf-site/website/docs/python-rust-quick-start-guide.md","tags":[],"version":"current","frontMatter":{"title":"Python/Rust Quick Start","toc":true,"last_modified_at":"2024-11-28T04:53:57.000Z"},"sidebar":"docs","previous":{"title":"Flink Quick Start","permalink":"/docs/next/flink-quick-start-guide"},"next":{"title":"Docker Demo","permalink":"/docs/next/docker_demo"}}');var a=n(74848),i=n(28453);n(11470),n(19365);const s={title:"Python/Rust Quick Start",toc:!0,last_modified_at:new Date("2024-11-28T04:53:57.000Z")},l=void 0,o={},d=[{value:"Installation",id:"installation",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Snapshot Query",id:"snapshot-query",level:3},{value:"Python",id:"python",level:4},{value:"Rust",id:"rust",level:4},{value:"Python",id:"python-1",level:4},{value:"Rust",id:"rust-1",level:4},{value:"Time-Travel Query",id:"time-travel-query",level:3},{value:"Python",id:"python-2",level:4},{value:"Rust",id:"rust-2",level:4},{value:"Incremental Query",id:"incremental-query",level:3},{value:"Python",id:"python-3",level:4},{value:"Rust",id:"rust-3",level:4},{value:"Query Engine Integration",id:"query-engine-integration",level:2},{value:"Table API",id:"table-api",level:3},{value:"File Group API",id:"file-group-api",level:3},{value:"Apache DataFusion",id:"apache-datafusion",level:3},{value:"Other Integrations",id:"other-integrations",level:3},{value:"Work with cloud storage",id:"work-with-cloud-storage",level:3},{value:"Python",id:"python-4",level:4},{value:"Rust",id:"rust-4",level:4},{value:"Contributing",id:"contributing",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["This guide will help you get started with ",(0,a.jsx)(t.a,{href:"https://github.com/apache/hudi-rs",children:"Hudi-rs"}),", the native Rust implementation for Apache Hudi with Python bindings. Learn how to install, set up, and perform basic operations using both Python and Rust interfaces."]}),"\n",(0,a.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# Python\npip install hudi\n\n# Rust\ncargo add hudi\n"})}),"\n",(0,a.jsx)(t.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["[!NOTE]\nThese examples expect a Hudi table exists at ",(0,a.jsx)(t.code,{children:"/tmp/trips_table"}),", created using\nthe ",(0,a.jsx)(t.a,{href:"/docs/quick-start-guide",children:"quick start guide"}),"."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"snapshot-query",children:"Snapshot Query"}),"\n",(0,a.jsx)(t.p,{children:"Snapshot query reads the latest version of the data from the table. The table API also accepts partition filters."}),"\n",(0,a.jsx)(t.h4,{id:"python",children:"Python"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from hudi import HudiTableBuilder\nimport pyarrow as pa\n\nhudi_table = HudiTableBuilder.from_base_uri("/tmp/trips_table").build()\nbatches = hudi_table.read_snapshot(filters=[("city", "=", "san_francisco")])\n\n# convert to PyArrow table\narrow_table = pa.Table.from_batches(batches)\nresult = arrow_table.select(["rider", "city", "ts", "fare"])\nprint(result)\n'})}),"\n",(0,a.jsx)(t.h4,{id:"rust",children:"Rust"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'use hudi::error::Result;\nuse hudi::table::builder::TableBuilder as HudiTableBuilder;\nuse arrow::compute::concat_batches;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let hudi_table = HudiTableBuilder::from_base_uri("/tmp/trips_table").build().await?;\n    let batches = hudi_table.read_snapshot(&[("city", "=", "san_francisco")]).await?;\n    let batch = concat_batches(&batches[0].schema(), &batches)?;\n    let columns = vec!["rider", "city", "ts", "fare"];\n    for col_name in columns {\n        let idx = batch.schema().index_of(col_name).unwrap();\n        println!("{}: {}", col_name, batch.column(idx));\n    }\n    Ok(())\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["To run read-optimized (RO) query on Merge-on-Read (MOR) tables, set ",(0,a.jsx)(t.code,{children:"hoodie.read.use.read_optimized.mode"})," when creating the table."]}),"\n",(0,a.jsx)(t.h4,{id:"python-1",children:"Python"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'hudi_table = (\n    HudiTableBuilder\n    .from_base_uri("/tmp/trips_table")\n    .with_option("hoodie.read.use.read_optimized.mode", "true")\n    .build()\n)\n'})}),"\n",(0,a.jsx)(t.h4,{id:"rust-1",children:"Rust"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'let hudi_table = \n    HudiTableBuilder::from_base_uri("/tmp/trips_table")\n    .with_option("hoodie.read.use.read_optimized.mode", "true")\n    .build().await?;\n'})}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"[!NOTE]\nCurrently reading MOR tables is limited to tables with Parquet data blocks."}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"time-travel-query",children:"Time-Travel Query"}),"\n",(0,a.jsx)(t.p,{children:"Time-travel query reads the data at a specific timestamp from the table. The table API also accepts partition filters."}),"\n",(0,a.jsx)(t.h4,{id:"python-2",children:"Python"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'batches = (\n    hudi_table\n    .read_snapshot_as_of("20241231123456789", filters=[("city", "=", "san_francisco")])\n)\n'})}),"\n",(0,a.jsx)(t.h4,{id:"rust-2",children:"Rust"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'let batches = \n    hudi_table\n    .read_snapshot_as_of("20241231123456789", &[("city", "=", "san_francisco")]).await?;\n'})}),"\n",(0,a.jsx)(t.h3,{id:"incremental-query",children:"Incremental Query"}),"\n",(0,a.jsx)(t.p,{children:"Incremental query reads the changed data from the table for a given time range."}),"\n",(0,a.jsx)(t.h4,{id:"python-3",children:"Python"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"# read the records between t1 (exclusive) and t2 (inclusive)\nbatches = hudi_table.read_incremental_records(t1, t2)\n\n# read the records after t1\nbatches = hudi_table.read_incremental_records(t1)\n"})}),"\n",(0,a.jsx)(t.h4,{id:"rust-3",children:"Rust"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:"// read the records between t1 (exclusive) and t2 (inclusive)\nlet batches = hudi_table.read_incremental_records(t1, Some(t2)).await?;\n\n// read the records after t1\nlet batches = hudi_table.read_incremental_records(t1, None).await?;\n"})}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["[!NOTE]\nCurrently the only supported format for the timestamp arguments is Hudi Timeline format: ",(0,a.jsx)(t.code,{children:"yyyyMMddHHmmssSSS"})," or ",(0,a.jsx)(t.code,{children:"yyyyMMddHHmmss"}),"."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"query-engine-integration",children:"Query Engine Integration"}),"\n",(0,a.jsx)(t.p,{children:"Hudi-rs provides APIs to support integration with query engines. The sections below highlight some commonly used APIs."}),"\n",(0,a.jsx)(t.h3,{id:"table-api",children:"Table API"}),"\n",(0,a.jsxs)(t.p,{children:["Create a Hudi table instance using its constructor or the ",(0,a.jsx)(t.code,{children:"TableBuilder"})," API."]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Stage"}),(0,a.jsx)(t.th,{children:"API"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Query planning"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"get_file_slices()"})}),(0,a.jsx)(t.td,{children:"For snapshot query, get a list of file slices."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"get_file_slices_splits()"})}),(0,a.jsx)(t.td,{children:"For snapshot query, get a list of file slices in splits."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"get_file_slices_as_of()"})}),(0,a.jsx)(t.td,{children:"For time-travel query, get a list of file slices at a given time."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"get_file_slices_splits_as_of()"})}),(0,a.jsx)(t.td,{children:"For time-travel query, get a list of file slices in splits at a given time."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"get_file_slices_between()"})}),(0,a.jsx)(t.td,{children:"For incremental query, get a list of changed file slices between a time range."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Query execution"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"create_file_group_reader_with_options()"})}),(0,a.jsx)(t.td,{children:"Create a file group reader instance with the table instance's configs."})]})]})]}),"\n",(0,a.jsx)(t.h3,{id:"file-group-api",children:"File Group API"}),"\n",(0,a.jsxs)(t.p,{children:["Create a Hudi file group reader instance using its constructor or the Hudi table API ",(0,a.jsx)(t.code,{children:"create_file_group_reader_with_options()"}),"."]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Stage"}),(0,a.jsx)(t.th,{children:"API"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsx)(t.tbody,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Query execution"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"read_file_slice()"})}),(0,a.jsx)(t.td,{children:"Read records from a given file slice; based on the configs, read records from only base file, or from base file and log files, and merge records based on the configured strategy."})]})})]}),"\n",(0,a.jsx)(t.h3,{id:"apache-datafusion",children:"Apache DataFusion"}),"\n",(0,a.jsxs)(t.p,{children:["Enabling the ",(0,a.jsx)(t.code,{children:"hudi"})," crate with ",(0,a.jsx)(t.code,{children:"datafusion"})," feature will provide a ",(0,a.jsx)(t.a,{href:"https://datafusion.apache.org/",children:"DataFusion"}),"\nextension to query Hudi tables."]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"Add crate hudi with datafusion feature to your application to query a Hudi table."}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"cargo new my_project --bin && cd my_project\ncargo add tokio@1 datafusion@43\ncargo add hudi --features datafusion\n"})}),(0,a.jsxs)(t.p,{children:["Update ",(0,a.jsx)(t.code,{children:"src/main.rs"})," with the code snippet below then ",(0,a.jsx)(t.code,{children:"cargo run"}),"."]})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'use std::sync::Arc;\n\nuse datafusion::error::Result;\nuse datafusion::prelude::{DataFrame, SessionContext};\nuse hudi::HudiDataSource;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let ctx = SessionContext::new();\n    let hudi = HudiDataSource::new_with_options(\n        "/tmp/trips_table",\n        [("hoodie.read.input.partitions", "5")]).await?;\n    ctx.register_table("trips_table", Arc::new(hudi))?;\n    let df: DataFrame = ctx.sql("SELECT * from trips_table where city = \'san_francisco\'").await?;\n    df.show().await?;\n    Ok(())\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"other-integrations",children:"Other Integrations"}),"\n",(0,a.jsx)(t.p,{children:"Hudi is also integrated with"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://www.getdaft.io/projects/docs/en/stable/integrations/hudi/",children:"Daft"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://docs.ray.io/en/latest/data/api/doc/ray.data.read_hudi.html#ray.data.read_hudi",children:"Ray"})}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"work-with-cloud-storage",children:"Work with cloud storage"}),"\n",(0,a.jsxs)(t.p,{children:["Ensure cloud storage credentials are set properly as environment variables, e.g., ",(0,a.jsx)(t.code,{children:"AWS_*"}),", ",(0,a.jsx)(t.code,{children:"AZURE_*"}),", or ",(0,a.jsx)(t.code,{children:"GOOGLE_*"}),".\nRelevant storage environment variables will then be picked up. The target table's base uri with schemes such\nas ",(0,a.jsx)(t.code,{children:"s3://"}),", ",(0,a.jsx)(t.code,{children:"az://"}),", or ",(0,a.jsx)(t.code,{children:"gs://"})," will be processed accordingly."]}),"\n",(0,a.jsx)(t.p,{children:"Alternatively, you can pass the storage configuration as options via Table APIs."}),"\n",(0,a.jsx)(t.h4,{id:"python-4",children:"Python"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from hudi import HudiTableBuilder\n\nhudi_table = (\n    HudiTableBuilder\n    .from_base_uri("s3://bucket/trips_table")\n    .with_option("aws_region", "us-west-2")\n    .build()\n)\n'})}),"\n",(0,a.jsx)(t.h4,{id:"rust-4",children:"Rust"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'use hudi::table::builder::TableBuilder as HudiTableBuilder;\n\nasync fn main() -> Result<()> {\n    let hudi_table = \n        HudiTableBuilder::from_base_uri("s3://bucket/trips_table")\n        .with_option("aws_region", "us-west-2")\n        .build().await?;\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"contributing",children:"Contributing"}),"\n",(0,a.jsxs)(t.p,{children:["Check out the ",(0,a.jsx)(t.a,{href:"https://github.com/apache/hudi-rs/blob/main/CONTRIBUTING.md",children:"contributing guide"})," for all the details about making contributions to the project."]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);