"use strict";(self.webpackChunkhudi=self.webpackChunkhudi||[]).push([[90717],{85148:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"sql_ddl","title":"SQL DDL","description":"This page describes support for creating and altering tables using SQL across various engines.","source":"@site/docs/sql_ddl.md","sourceDirName":".","slug":"/sql_ddl","permalink":"/docs/next/sql_ddl","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/hudi/tree/asf-site/website/docs/sql_ddl.md","tags":[],"version":"current","frontMatter":{"title":"SQL DDL","summary":"In this page, we discuss using SQL DDL commands with Hudi","toc":true,"last_modified_at":null},"sidebar":"docs","previous":{"title":"Using Kafka Connect","permalink":"/docs/next/ingestion_kafka_connect"},"next":{"title":"SQL DML","permalink":"/docs/next/sql_dml"}}');var r=t(74848),a=t(28453);t(11470),t(19365);const s={title:"SQL DDL",summary:"In this page, we discuss using SQL DDL commands with Hudi",toc:!0,last_modified_at:null},d=void 0,l={},o=[{value:"Spark SQL",id:"spark-sql",level:2},{value:"Create table",id:"create-table",level:3},{value:"Create non-partitioned table",id:"create-non-partitioned-table",level:3},{value:"Create partitioned table",id:"create-partitioned-table",level:3},{value:"Create table with record keys and ordering fields",id:"create-table-with-record-keys-and-ordering-fields",level:3},{value:"Create table with merge modes",id:"create-table-with-record-merge-mode",level:3},{value:"Create table from an external location",id:"create-table-from-an-external-location",level:3},{value:"Create Table As Select (CTAS)",id:"create-table-as-select-ctas",level:3},{value:"Create Index",id:"create-index",level:3},{value:"Create Expression Index",id:"create-expression-index",level:3},{value:"Create Partition Stats Index",id:"create-partition-stats-index",level:3},{value:"Create Secondary Index",id:"create-secondary-index",level:3},{value:"Create Bloom Filter Index",id:"create-bloom-filter-index",level:3},{value:"Limitations",id:"limitations",level:3},{value:"Setting Hudi configs",id:"setting-hudi-configs",level:3},{value:"Using set command",id:"using-set-command",level:4},{value:"Using table properties",id:"using-table-properties",level:4},{value:"Table Properties",id:"table-properties",level:3},{value:"Passing Lock Providers for Concurrent Writers",id:"passing-lock-providers-for-concurrent-writers",level:4},{value:"Enabling Column Stats / Record Level Index for the table",id:"enabling-column-stats--record-level-index-for-the-table",level:4},{value:"Spark Alter Table",id:"spark-alter-table",level:3},{value:"Modifying Table Properties",id:"modifying-table-properties",level:3},{value:"Alter config options",id:"alter-config-options",level:3},{value:"Show and drop partitions",id:"show-and-drop-partitions",level:3},{value:"Show and drop index",id:"show-and-drop-index",level:3},{value:"Show create table",id:"show-create-table",level:3},{value:"Caveats",id:"caveats",level:3},{value:"Flink SQL",id:"flink-sql",level:2},{value:"Create Catalog",id:"create-catalog",level:3},{value:"Options",id:"options",level:4},{value:"Create Table",id:"create-table-1",level:3},{value:"Create non-partitioned table",id:"create-non-partitioned-table-1",level:3},{value:"Create partitioned table",id:"create-partitioned-table-1",level:3},{value:"Create table with record keys and ordering fields",id:"create-table-with-record-keys-and-ordering-fields-1",level:3},{value:"Create Table in Non-Blocking Concurrency Control Mode",id:"create-table-in-non-blocking-concurrency-control-mode",level:3},{value:"Alter Table",id:"alter-table",level:3},{value:"Setting Hudi configs",id:"setting-hudi-configs-1",level:3},{value:"Using table options",id:"using-table-options",level:4},{value:"Supported Types",id:"supported-types",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This page describes support for creating and altering tables using SQL across various engines."}),"\n",(0,r.jsx)(n.h2,{id:"spark-sql",children:"Spark SQL"}),"\n",(0,r.jsx)(n.h3,{id:"create-table",children:"Create table"}),"\n",(0,r.jsx)(n.p,{children:"You can create tables using standard CREATE TABLE syntax, which supports partitioning and passing table properties."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE [IF NOT EXISTS] [db_name.]table_name\n  [(col_name data_type [COMMENT col_comment], ...)]\n  [COMMENT table_comment]\n  [PARTITIONED BY (col_name, ...)]\n  [ROW FORMAT row_format]\n  [STORED AS file_format]\n  [LOCATION path]\n  [TBLPROPERTIES (property_name=property_value, ...)]\n  [AS select_statement];\n"})}),"\n",(0,r.jsxs)(n.admonition,{title:"NOTE:",type:"note",children:[(0,r.jsxs)(n.p,{children:["For users running this tutorial locally and have a Spark-Hive(HMS) integration in their environment: If you use\n",(0,r.jsx)(n.code,{children:"default"})," database or if you don't provide ",(0,r.jsx)(n.code,{children:"[LOCATION path]"})," with the DDL statement, Spark will return\n",(0,r.jsx)(n.code,{children:"java.io.IOException: Mkdirs failed to create file:/user/hive/warehouse/hudi_table/.hoodie"})," error.\nTo get around this, you can follow either of the two options mentioned below:"]}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a database i.e. ",(0,r.jsx)(n.code,{children:"CREATE DATABASE hudidb;"})," and use it i.e. ",(0,r.jsx)(n.code,{children:"USE hudidb;"})," before running the DDL statement."]}),"\n",(0,r.jsxs)(n.li,{children:["Or provide a path using ",(0,r.jsx)(n.code,{children:"LOCATION"})," keyword to persist the data with the DDL statement."]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"create-non-partitioned-table",children:"Create non-partitioned table"}),"\n",(0,r.jsx)(n.p,{children:"Creating a non-partitioned table is as simple as creating a regular table."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- create a Hudi table\nCREATE TABLE IF NOT EXISTS hudi_table (\n  id INT,\n  name STRING,\n  price DOUBLE\n) USING hudi;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-partitioned-table",children:"Create partitioned table"}),"\n",(0,r.jsxs)(n.p,{children:["A partitioned table can be created by adding a ",(0,r.jsx)(n.code,{children:"partitioned by"})," clause. Partitioning helps to organize the data into multiple folders\nbased on the partition columns. It can also help speed up queries and index lookups by limiting the amount of metadata, index and data scanned."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS hudi_table_partitioned (\n  id BIGINT,\n  name STRING,\n  dt STRING,\n  hh STRING\n) USING hudi\nTBLPROPERTIES (\n  type = 'cow'\n)\nPARTITIONED BY (dt);\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You can also create a table partitioned by multiple fields by supplying comma-separated field names.\nWhen creating a table partitioned by multiple fields, ensure that you specify the columns in the ",(0,r.jsx)(n.code,{children:"PARTITIONED BY"})," clause\nin the same order as they appear in the ",(0,r.jsx)(n.code,{children:"CREATE TABLE"})," schema. For example, for the above table, the partition fields\nshould be specified as ",(0,r.jsx)(n.code,{children:"PARTITIONED BY (dt, hh)"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"create-table-with-record-keys-and-ordering-fields",children:"Create table with record keys and ordering fields"}),"\n",(0,r.jsxs)(n.p,{children:["As discussed ",(0,r.jsx)(n.a,{href:"/docs/quick-start-guide#keys",children:"here"}),", tables track each record in the table using a record key. Hudi auto-generated a highly compressed\nkey for each new record in the examples so far. If you want to use an existing field as the key, you can set the ",(0,r.jsx)(n.code,{children:"primaryKey"})," option.\nTypically, this is also accompanied by configuring a ",(0,r.jsx)(n.code,{children:"preCombineField"})," option to deal with out-of-order data and potential\nduplicate records with the same key in the incoming writes."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"You can choose multiple fields as primary keys for a given table on a need basis. For eg, \"primaryKey = 'id, name'\", and\nthis materializes a composite key of the two fields, which can be useful for exploring the table."})}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example of creating a table using both options. Typically, a field that denotes the time of the event or\nfact, e.g., order creation time, event generation time etc., is used as the ",(0,r.jsx)(n.em,{children:"preCombineField"}),". Hudi resolves multiple versions\nof the same record by ordering based on this field when queries are run on the table."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS hudi_table_keyed (\n  id INT,\n  name STRING,\n  price DOUBLE,\n  ts BIGINT\n) USING hudi\nTBLPROPERTIES (\n  type = 'cow',\n  primaryKey = 'id',\n  preCombineField = 'ts'\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-table-with-record-merge-mode",children:"Create table with merge modes"}),"\n",(0,r.jsxs)(n.p,{children:["Hudi supports different ",(0,r.jsx)(n.a,{href:"/docs/next/record_merger",children:"record merge modes"})," to handle merge of incoming records with existing\nrecords. To create a table with specific record merge mode, you can set ",(0,r.jsx)(n.code,{children:"recordMergeMode"})," option."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS hudi_table_merge_mode (\n  id INT,\n  name STRING,\n  ts LONG,\n  price DOUBLE\n) USING hudi\nTBLPROPERTIES (\n  type = 'mor',\n  primaryKey = 'id',\n  precombineField = 'ts',\n  recordMergeMode = 'EVENT_TIME_ORDERING'\n)\nLOCATION 'file:///tmp/hudi_table_merge_mode/';\n"})}),"\n",(0,r.jsxs)(n.p,{children:["With ",(0,r.jsx)(n.code,{children:"EVENT_TIME_ORDERING"}),", the record with the larger event time (",(0,r.jsx)(n.code,{children:"precombineField"}),") overwrites the record with the\nsmaller event time on the same key, regardless of transaction's commit time. Users can set ",(0,r.jsx)(n.code,{children:"CUSTOM"})," mode to provide their own\nmerge logic. With ",(0,r.jsx)(n.code,{children:"CUSTOM"})," merge mode, you can provide a custom class that implements the merge logic. The interfaces\nto implement is explained in detail ",(0,r.jsx)(n.a,{href:"/docs/next/record_merger#custom",children:"here"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS hudi_table_merge_mode_custom (\n  id INT,\n  name STRING,\n  ts LONG,\n  price DOUBLE\n) USING hudi\nTBLPROPERTIES (\n  type = 'mor',\n  primaryKey = 'id',\n  precombineField = 'ts',\n  recordMergeMode = 'CUSTOM',\n  'hoodie.record.merge.strategy.id' = '<unique-uuid>'\n)\nLOCATION 'file:///tmp/hudi_table_merge_mode_custom/';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-table-from-an-external-location",children:"Create table from an external location"}),"\n",(0,r.jsxs)(n.p,{children:["Often, Hudi tables are created from streaming writers like the ",(0,r.jsx)(n.a,{href:"/docs/hoodie_streaming_ingestion#hudi-streamer",children:"streamer tool"}),", which\nmay later need some SQL statements to run on them. You can create an External table using the ",(0,r.jsx)(n.code,{children:"location"})," statement."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE hudi_table_external\nUSING hudi\nLOCATION 'file:///tmp/hudi_table/';\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"You don't need to specify the schema and any properties except the partitioned columns if they exist. Hudi can automatically\nrecognize the schema and configurations."})}),"\n",(0,r.jsx)(n.h3,{id:"create-table-as-select-ctas",children:"Create Table As Select (CTAS)"}),"\n",(0,r.jsxs)(n.p,{children:["Hudi supports CTAS(Create table as select) to support initial loads into Hudi tables. To ensure this is done efficiently,\neven for large loads, CTAS uses ",(0,r.jsx)(n.strong,{children:"bulk insert"})," as the write operation"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"# create managed parquet table\nCREATE TABLE parquet_table\nUSING parquet\nLOCATION 'file:///tmp/parquet_dataset/';\n\n# CTAS by loading data into Hudi table\nCREATE TABLE hudi_table_ctas\nUSING hudi\nTBLPROPERTIES (\n  type = 'cow',\n  preCombineField = 'ts'\n)\nPARTITIONED BY (dt)\nAS SELECT * FROM parquet_table;\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can create a non-partitioned table as well"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"# create managed parquet table\nCREATE TABLE parquet_table\nUSING parquet\nLOCATION 'file:///tmp/parquet_dataset/';\n\n# CTAS by loading data into Hudi table\nCREATE TABLE hudi_table_ctas\nUSING hudi\nTBLPROPERTIES (\n  type = 'cow',\n  preCombineField = 'ts'\n)\nAS SELECT * FROM parquet_table;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you prefer explicitly setting the record keys, you can do so by setting ",(0,r.jsx)(n.code,{children:"primaryKey"})," config in table properties."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE hudi_table_ctas\nUSING hudi\nTBLPROPERTIES (\n  type = 'cow',\n  primaryKey = 'id'\n)\nPARTITIONED BY (dt)\nAS\nSELECT 1 AS id, 'a1' AS name, 10 AS price, 1000 AS dt;\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can also use CTAS to copy data across external locations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"# create managed parquet table\nCREATE TABLE parquet_table\nUSING parquet\nLOCATION 'file:///tmp/parquet_dataset/*.parquet';\n\n# CTAS by loading data into hudi table\nCREATE TABLE hudi_table_ctas\nUSING hudi\nLOCATION 'file:///tmp/hudi/hudi_tbl/'\nTBLPROPERTIES (\n  type = 'cow'\n)\nAS SELECT * FROM parquet_table;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-index",children:"Create Index"}),"\n",(0,r.jsxs)(n.p,{children:["Hudi supports creating and dropping different types of indexes on a table. For more information on different\ntype of indexes please refer ",(0,r.jsx)(n.a,{href:"/docs/next/indexes#multi-modal-indexing",children:"multi-modal indexing"}),". Secondary\nindex, expression index and record indexes can be created using SQL create index command."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create Index\nCREATE INDEX [IF NOT EXISTS] index_name ON [TABLE] table_name \n[USING index_type] \n(column_name1 [OPTIONS(key1=value1, key2=value2, ...)], column_name2 [OPTIONS(key1=value1, key2=value2, ...)], ...) \n[OPTIONS (key1=value1, key2=value2, ...)]\n\n-- Record index syntax\nCREATE INDEX indexName ON tableIdentifier (primaryKey1 [, primayKey2 ...]);\n\n-- Secondary Index Syntax\nCREATE INDEX indexName ON tableIdentifier (nonPrimaryKey);\n\n-- Expression Index Syntax\nCREATE INDEX indexName ON tableIdentifier USING column_stats(col) OPTIONS(expr='expr_val', format='format_val');\nCREATE INDEX indexName ON tableIdentifier USING bloom_filters(col) OPTIONS(expr='expr_val');\n\n-- Drop Index\nDROP INDEX [IF EXISTS] index_name ON [TABLE] table_name\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"index_name"})," is the name of the index to be created or dropped."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"table_name"})," is the name of the table on which the index is created or dropped."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"index_type"})," is the type of the index to be created. Currently, only ",(0,r.jsx)(n.code,{children:"column_stats"})," and ",(0,r.jsx)(n.code,{children:"bloom_filters"})," is supported.\nIf the ",(0,r.jsx)(n.code,{children:"using .."})," clause is omitted, a secondary record index is created."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"column_name"})," is the name of the column on which the index is created."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Both index and column on which the index is created can be qualified with some options in the form of key-value pairs."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create a table with primary key\nCREATE TABLE hudi_indexed_table (\n    ts BIGINT,\n    uuid STRING,\n    rider STRING,\n    driver STRING,\n    fare DOUBLE,\n    city STRING\n) USING HUDI\noptions(\n    primaryKey ='uuid',\n    hoodie.write.record.merge.mode = \"COMMIT_TIME_ORDERING\"\n)\nPARTITIONED BY (city);\n\n-- Add some data.\nINSERT INTO hudi_indexed_table\nVALUES\n ...\n\n-- Create bloom filter expression index on driver column\nCREATE INDEX idx_bloom_driver ON hudi_indexed_table USING bloom_filters(driver) OPTIONS(expr='identity');\n-- It would show bloom filter expression index\nSHOW INDEXES FROM hudi_indexed_table;\n-- Query on driver column would prune the data using the idx_bloom_driver index\nSELECT uuid, rider FROM hudi_indexed_table WHERE driver = 'driver-S';\n\n-- Create column stat expression index on ts column\nCREATE INDEX idx_column_ts ON hudi_indexed_table USING column_stats(ts) OPTIONS(expr='from_unixtime', format = 'yyyy-MM-dd');\n-- Shows both expression indexes\nSHOW INDEXES FROM hudi_indexed_table;\n-- Query on ts column would prune the data using the idx_column_ts index\nSELECT * FROM hudi_indexed_table WHERE from_unixtime(ts, 'yyyy-MM-dd') = '2023-09-24';\n\n-- Create secondary index on rider column\nCREATE INDEX record_index ON hudi_indexed_table (uuid);\nCREATE INDEX idx_rider ON hudi_indexed_table (rider);\nSET hoodie.metadata.record.index.enable=true;\n-- Expression index and secondary index should show up\nSHOW INDEXES FROM hudi_indexed_table;\n-- Query on rider column would leverage the secondary index idx_rider\nSELECT * FROM hudi_indexed_table WHERE rider = 'rider-E';\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-expression-index",children:"Create Expression Index"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.a,{href:"https://github.com/apache/hudi/blob/00ece7bce0a4a8d0019721a28049723821e01842/rfc/rfc-63/rfc-63.md",children:"expression index"})," is an index on a function of a column.\nIt is a new addition to Hudi's ",(0,r.jsx)(n.a,{href:"https://hudi.apache.org/blog/2022/05/17/Introducing-Multi-Modal-Index-for-the-Lakehouse-in-Apache-Hudi",children:"multi-modal indexing"}),"\nsubsystem. Expression indexes can be used to implement logical partitioning of a table, by creating ",(0,r.jsx)(n.code,{children:"column_stats"})," indexes\non an expression of a column. For e.g. an expression index extracting a date from a timestamp field, can effectively implement\ndate based partitioning, provide same benefits to queries, even if the physical layout is different."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create an expression index on the column `ts` (unix epoch) of the table `hudi_table` using the function `from_unixtime` with the format `yyyy-MM-dd`\nCREATE INDEX IF NOT EXISTS ts_datestr ON hudi_table \n  USING column_stats(ts) \n  OPTIONS(expr='from_unixtime', format='yyyy-MM-dd');\n-- Create a expression index on the column `ts` (timestamp in yyyy-MM-dd HH:mm:ss) of the table `hudi_table` using the function `hour`\nCREATE INDEX ts_hour ON hudi_table \n  USING column_stats(ts) \n  options(expr='hour');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"expr"})," option is required for creating expression index, and it should be a valid Spark SQL function. Please check the syntax\nfor the above functions in the ",(0,r.jsx)(n.a,{href:"https://spark.apache.org/docs/latest/sql-ref-functions.html",children:"Spark SQL documentation"})," and provide the options accordingly. For example,\nthe ",(0,r.jsx)(n.code,{children:"format"})," option is required for ",(0,r.jsx)(n.code,{children:"from_unixtime"})," function."]}),"\n",(0,r.jsx)(n.p,{children:"Some useful functions that are supported are listed below."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"identity"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"from_unixtime"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"date_format"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"to_date"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"to_timestamp"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"year"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"month"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"day"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"hour"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"lower"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"upper"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"substring"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"regexp_extract"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"regexp_replace"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"concat"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"length"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Note that, only functions that take a single column as input are supported currently and UDFs are not supported."}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Full example of creating and using expression index"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE hudi_table_expr_index (\n    ts STRING,\n    uuid STRING,\n    rider STRING,\n    driver STRING,\n    fare DOUBLE,\n    city STRING\n) USING HUDI\ntblproperties (primaryKey = 'uuid')\nPARTITIONED BY (city)\nlocation 'file:///tmp/hudi_table_expr_index';\n\n-- Query with hour function filter but no index yet --\nspark-sql> SELECT city, fare, rider, driver FROM  hudi_table_expr_index WHERE  city NOT IN ('chennai') AND hour(ts) > 12;\nsan_francisco\t93.5\trider-E\tdriver-O\nsan_francisco\t33.9\trider-D\tdriver-L\nsao_paulo\t43.4\trider-G\tdriver-Q\nTime taken: 0.208 seconds, Fetched 3 row(s)\n\nspark-sql> EXPLAIN COST SELECT city, fare, rider, driver FROM  hudi_table_expr_index WHERE  city NOT IN ('chennai') AND hour(ts) > 12;\n== Optimized Logical Plan ==\nProject [city#3465, fare#3464, rider#3462, driver#3463], Statistics(sizeInBytes=899.5 KiB)\n+- Filter ((isnotnull(city#3465) AND isnotnull(ts#3460)) AND (NOT (city#3465 = chennai) AND (hour(cast(ts#3460 as timestamp), Some(Asia/Kolkata)) > 12))), Statistics(sizeInBytes=2.5 MiB)\n   +- Relation default.hudi_table_expr_index[_hoodie_commit_time#3455,_hoodie_commit_seqno#3456,_hoodie_record_key#3457,_hoodie_partition_path#3458,_hoodie_file_name#3459,ts#3460,uuid#3461,rider#3462,driver#3463,fare#3464,city#3465] parquet, Statistics(sizeInBytes=2.5 MiB)\n\n== Physical Plan ==\n*(1) Project [city#3465, fare#3464, rider#3462, driver#3463]\n+- *(1) Filter (isnotnull(ts#3460) AND (hour(cast(ts#3460 as timestamp), Some(Asia/Kolkata)) > 12))\n   +- *(1) ColumnarToRow\n      +- FileScan parquet default.hudi_table_expr_index[ts#3460,rider#3462,driver#3463,fare#3464,city#3465] Batched: true, DataFilters: [isnotnull(ts#3460), (hour(cast(ts#3460 as timestamp), Some(Asia/Kolkata)) > 12)], Format: Parquet, Location: HoodieFileIndex(1 paths)[file:/tmp/hudi_table_expr_index], PartitionFilters: [isnotnull(city#3465), NOT (city#3465 = chennai)], PushedFilters: [IsNotNull(ts)], ReadSchema: struct<ts:string,rider:string,driver:string,fare:double>\n      \n     \n-- create the expression index --\nCREATE INDEX ts_hour ON hudi_table_expr_index USING column_stats(ts) options(expr='hour');\n\n-- query after creating the index --\nspark-sql> SELECT city, fare, rider, driver FROM  hudi_table_expr_index WHERE  city NOT IN ('chennai') AND hour(ts) > 12;\nsan_francisco\t93.5\trider-E\tdriver-O\nsan_francisco\t33.9\trider-D\tdriver-L\nsao_paulo\t43.4\trider-G\tdriver-Q\nTime taken: 0.202 seconds, Fetched 3 row(s)\nspark-sql> EXPLAIN COST SELECT city, fare, rider, driver FROM  hudi_table_expr_index WHERE  city NOT IN ('chennai') AND hour(ts) > 12;\n== Optimized Logical Plan ==\nProject [city#2970, fare#2969, rider#2967, driver#2968], Statistics(sizeInBytes=449.8 KiB)\n+- Filter ((isnotnull(city#2970) AND isnotnull(ts#2965)) AND (NOT (city#2970 = chennai) AND (hour(cast(ts#2965 as timestamp), Some(Asia/Kolkata)) > 12))), Statistics(sizeInBytes=1278.3 KiB)\n   +- Relation default.hudi_table_expr_index[_hoodie_commit_time#2960,_hoodie_commit_seqno#2961,_hoodie_record_key#2962,_hoodie_partition_path#2963,_hoodie_file_name#2964,ts#2965,uuid#2966,rider#2967,driver#2968,fare#2969,city#2970] parquet, Statistics(sizeInBytes=1278.3 KiB)\n\n== Physical Plan ==\n*(1) Project [city#2970, fare#2969, rider#2967, driver#2968]\n+- *(1) Filter (isnotnull(ts#2965) AND (hour(cast(ts#2965 as timestamp), Some(Asia/Kolkata)) > 12))\n   +- *(1) ColumnarToRow\n      +- FileScan parquet default.hudi_table_expr_index[ts#2965,rider#2967,driver#2968,fare#2969,city#2970] Batched: true, DataFilters: [isnotnull(ts#2965), (hour(cast(ts#2965 as timestamp), Some(Asia/Kolkata)) > 12)], Format: Parquet, Location: HoodieFileIndex(1 paths)[file:/tmp/hudi_table_expr_index], PartitionFilters: [isnotnull(city#2970), NOT (city#2970 = chennai)], PushedFilters: [IsNotNull(ts)], ReadSchema: struct<ts:string,rider:string,driver:string,fare:double>\n      \n"})})]}),"\n",(0,r.jsx)(n.h3,{id:"create-partition-stats-index",children:"Create Partition Stats Index"}),"\n",(0,r.jsxs)(n.p,{children:["Partition stats index is similar to column stats, in the sense that it tracks - ",(0,r.jsx)(n.code,{children:"min, max, null, count, .."})," statistics on columns in the\ntable, useful in query planning. The key difference being, while ",(0,r.jsx)(n.code,{children:"column_stats"})," tracks statistics about files, the partition_stats index\ntracks aggregated statistics at the storage partition path level, to help more efficiently skip entire folder paths during query planning\nand execution."]}),"\n",(0,r.jsxs)(n.p,{children:["To enable partition stats index, simply set ",(0,r.jsx)(n.code,{children:"hoodie.metadata.index.partition.stats.enable = 'true'"})," in create table options."]}),"\n",(0,r.jsx)(n.h3,{id:"create-secondary-index",children:"Create Secondary Index"}),"\n",(0,r.jsx)(n.p,{children:"Secondary indexes are record level indexes built on any column in the table. It supports multiple records having the same\nsecondary column value efficiently and is built on top of the existing record level index built on the table's record key.\nSecondary indexes are hash based indexes that offer horizontally scalable write performance by splitting key space into shards\nby hashing, as well as fast lookups by employing row-based file formats."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"DROP TABLE IF EXISTS hudi_table;\n-- Let us create a table with multiple partition fields, and enable record index and partition stats index \nCREATE TABLE hudi_table (\n    ts BIGINT,\n    id STRING,\n    rider STRING,\n    driver STRING,\n    fare DOUBLE,\n    city STRING,\n    state STRING\n) USING hudi\n OPTIONS(\n    primaryKey ='id',\n    hoodie.metadata.record.index.enable = 'true', -- enable record index\n    hoodie.metadata.index.partition.stats.enable = 'true', -- enable partition stats index\n    hoodie.metadata.index.column.stats.enable = 'true', -- enable column stats\n    hoodie.metadata.index.column.stats.column.list = 'rider', -- create column stats index on rider column\n    hoodie.write.record.merge.mode = \"COMMIT_TIME_ORDERING\" -- enable commit time ordering, required for secondary index\n)\nPARTITIONED BY (city, state)\nLOCATION 'file:///tmp/hudi_test_table';\n\nINSERT INTO hudi_table VALUES (1695159649,'trip1','rider-A','driver-K',19.10,'san_francisco','california');\nINSERT INTO hudi_table VALUES (1695091554,'trip2','rider-C','driver-M',27.70,'sunnyvale','california');\nINSERT INTO hudi_table VALUES (1695332066,'trip3','rider-E','driver-O',93.50,'austin','texas');\nINSERT INTO hudi_table VALUES (1695516137,'trip4','rider-F','driver-P',34.15,'houston','texas');\n    \n-- simple partition predicate --\nselect * from hudi_table where city = 'sunnyvale';\n20240710215107477\t20240710215107477_0_0\ttrip2\tcity=sunnyvale/state=california\t1dcb14a9-bc4a-4eac-aab5-015f2254b7ec-0_0-40-75_20240710215107477.parquet\t1695091554\ttrip2\trider-C\tdriver-M\t27.7\tsunnyvale\tcalifornia\nTime taken: 0.58 seconds, Fetched 1 row(s)\n\n-- simple partition predicate on other partition field --\nselect * from hudi_table where state = 'texas';\n20240710215119846\t20240710215119846_0_0\ttrip4\tcity=houston/state=texas\t08c6ed2c-a87b-4798-8f70-6d8b16cb1932-0_0-74-133_20240710215119846.parquet\t1695516137\ttrip4\trider-F\tdriver-P\t34.15\thouston\ttexas\n20240710215110584\t20240710215110584_0_0\ttrip3\tcity=austin/state=texas\t0ab2243c-cc08-4da3-8302-4ce0b4c47a08-0_0-57-104_20240710215110584.parquet\t1695332066\ttrip3\trider-E\tdriver-O\t93.5\taustin\ttexas\nTime taken: 0.124 seconds, Fetched 2 row(s)\n\n-- predicate on a column for which partition stats are present --\nselect id, rider, city, state from hudi_table where rider > 'rider-D';\ntrip4\trider-F\thouston\ttexas\ntrip3\trider-E\taustin\ttexas\nTime taken: 0.703 seconds, Fetched 2 row(s)\n      \n-- record key predicate --\nSELECT id, rider, driver FROM hudi_table WHERE id = 'trip1';\ntrip1\trider-A\tdriver-K\nTime taken: 0.368 seconds, Fetched 1 row(s)\n      \n-- create secondary index on driver --\nCREATE INDEX driver_idx ON hudi_table (driver);\n\n-- secondary key predicate --\nSELECT id, driver, city, state FROM hudi_table WHERE driver IN ('driver-K', 'driver-M');\ntrip1\tdriver-K\tsan_francisco\tcalifornia\ntrip2\tdriver-M\tsunnyvale\tcalifornia\nTime taken: 0.83 seconds, Fetched 2 row(s)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-bloom-filter-index",children:"Create Bloom Filter Index"}),"\n",(0,r.jsx)(n.p,{children:"Bloom filter indexes store a bloom filter per file, on the column or column expression being index. It can be very\neffective in skipping files that don't contain a high cardinality column value e.g. uuids."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE INDEX idx_bloom_driver ON hudi_indexed_table USING bloom_filters(driver) OPTIONS(expr='identity');\nCREATE INDEX idx_bloom_rider ON hudi_indexed_table USING bloom_filters(rider) OPTIONS(expr='lower');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"limitations",children:"Limitations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Unlike column stats, partition stats index is not created automatically for all columns. Users must specify list of\ncolumns for which they want to create partition stats index."}),"\n",(0,r.jsxs)(n.li,{children:["Predicate on internal meta fields such as ",(0,r.jsx)(n.code,{children:"_hoodie_record_key"})," or ",(0,r.jsx)(n.code,{children:"_hoodie_partition_path"})," cannot be used for data\nskipping. Queries with such predicates cannot leverage the indexes."]}),"\n",(0,r.jsx)(n.li,{children:"Secondary index is not supported for nested fields."}),"\n",(0,r.jsx)(n.li,{children:"Secondary index can be created only if record index is available in the table"}),"\n",(0,r.jsx)(n.li,{children:"Secondary index can only be used for tables using OverwriteWithLatestAvroPayload payload or COMMIT_TIME_ORDERING merge mode"}),"\n",(0,r.jsxs)(n.li,{children:["Column stats Expression Index can not be created using ",(0,r.jsx)(n.code,{children:"identity"})," expression with SQL. Users can leverage column stat index using Datasource instead."]}),"\n",(0,r.jsx)(n.li,{children:"Index update can fail with schema evolution."}),"\n",(0,r.jsxs)(n.li,{children:["Only one index can be created at a time using ",(0,r.jsx)(n.a,{href:"/docs/next/metadata_indexing",children:"async indexer"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"setting-hudi-configs",children:"Setting Hudi configs"}),"\n",(0,r.jsx)(n.p,{children:"There are different ways you can pass the configs for a given hudi table."}),"\n",(0,r.jsx)(n.h4,{id:"using-set-command",children:"Using set command"}),"\n",(0,r.jsxs)(n.p,{children:["You can use the ",(0,r.jsx)(n.strong,{children:"set"})," command to set any of Hudi's write configs. This will apply to operations across the whole spark session."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"set hoodie.insert.shuffle.parallelism = 100;\nset hoodie.upsert.shuffle.parallelism = 100;\nset hoodie.delete.shuffle.parallelism = 100;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"using-table-properties",children:"Using table properties"}),"\n",(0,r.jsx)(n.p,{children:"You can also configure table options when creating a table. This will be applied only for the table and override any SET command values."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS tableName (\n  colName1 colType1,\n  colName2 colType2,\n  ...\n) USING hudi\nTBLPROPERTIES (\n  primaryKey = '${colName1}',\n  type = 'cow',\n  ${hoodie.config.key1} = '${hoodie.config.value1}',\n  ${hoodie.config.key2} = '${hoodie.config.value2}',\n  ....\n);\n\ne.g.\nCREATE TABLE IF NOT EXISTS hudi_table (\n  id BIGINT,\n  name STRING,\n  price DOUBLE\n) USING hudi\nTBLPROPERTIES (\n  primaryKey = 'id',\n  type = 'cow',\n  hoodie.cleaner.fileversions.retained = '20',\n  hoodie.keep.max.commits = '20'\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"table-properties",children:"Table Properties"}),"\n",(0,r.jsx)(n.p,{children:"Users can set table properties while creating a table. The important table properties are discussed below."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter Name"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"type"}),(0,r.jsx)(n.td,{children:"cow"}),(0,r.jsxs)(n.td,{children:["The table type to create. ",(0,r.jsx)(n.code,{children:"type = 'cow'"})," creates a COPY-ON-WRITE table, while ",(0,r.jsx)(n.code,{children:"type = 'mor'"})," creates a MERGE-ON-READ table. Same as ",(0,r.jsx)(n.code,{children:"hoodie.datasource.write.table.type"}),". More details can be found ",(0,r.jsx)(n.a,{href:"/docs/table_types",children:"here"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"primaryKey"}),(0,r.jsx)(n.td,{children:"uuid"}),(0,r.jsxs)(n.td,{children:["The primary key field names of the table separated by commas. Same as ",(0,r.jsx)(n.code,{children:"hoodie.datasource.write.recordkey.field"}),". If this config is ignored, hudi will auto-generate primary keys. If explicitly set, primary key generation will honor user configuration."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"preCombineField"}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["The pre-combine field of the table. It is used for resolving the final version of the record among multiple versions. Generally, ",(0,r.jsx)(n.code,{children:"event time"})," or another similar column will be used for ordering purposes. Hudi will be able to handle out-of-order data using the preCombine field value."]})]})]})]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"primaryKey"}),", ",(0,r.jsx)(n.code,{children:"preCombineField"}),", and ",(0,r.jsx)(n.code,{children:"type"})," and other properties are case-sensitive."]})}),"\n",(0,r.jsx)(n.h4,{id:"passing-lock-providers-for-concurrent-writers",children:"Passing Lock Providers for Concurrent Writers"}),"\n",(0,r.jsxs)(n.p,{children:["Hudi requires a lock provider to support concurrent writers or asynchronous table services when using OCC\nand ",(0,r.jsx)(n.a,{href:"/docs/next/concurrency_control#non-blocking-concurrency-control-mode-experimental",children:"NBCC"})," (Non-Blocking Concurrency Control)\nconcurrency mode. For NBCC mode, locking is only used to write the commit metadata file in the timeline. Writes are\nserialized by completion time. Users can pass these table properties into ",(0,r.jsx)(n.em,{children:"TBLPROPERTIES"})," as well. Below is an example\nfor a Zookeeper based configuration."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Properties to use Lock configurations to support Multi Writers\nTBLPROPERTIES(\n  hoodie.write.lock.zookeeper.url = "zookeeper",\n  hoodie.write.lock.zookeeper.port = "2181",\n  hoodie.write.lock.zookeeper.lock_key = "tableName",\n  hoodie.write.lock.provider = "org.apache.hudi.client.transaction.lock.ZookeeperBasedLockProvider",\n  hoodie.write.concurrency.mode = "optimistic_concurrency_control",\n  hoodie.write.lock.zookeeper.base_path = "/tableName"\n)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"enabling-column-stats--record-level-index-for-the-table",children:"Enabling Column Stats / Record Level Index for the table"}),"\n",(0,r.jsx)(n.p,{children:"Hudi provides the ability to leverage rich metadata and index about the table, speed up DMLs and queries.\nFor e.g: collection of column statistics can be enabled to perform quick data skipping or a record-level index can be used to perform fast updates or point lookups\nusing the following table properties."}),"\n",(0,r.jsxs)(n.p,{children:["For more, see ",(0,r.jsx)("a",{href:"/docs/configurations/#Metadata-Configs",children:"Metadata Configurations"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"TBLPROPERTIES(\n  'hoodie.metadata.index.column.stats.enable' = 'true'\n  'hoodie.metadata.record.index.enable' = 'true' \n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"spark-alter-table",children:"Spark Alter Table"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Alter table name\nALTER TABLE oldTableName RENAME TO newTableName;\n\n-- Alter table add columns\nALTER TABLE tableIdentifier ADD COLUMNS(colAndType [, colAndType]);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"--rename to:\nALTER TABLE hudi_table RENAME TO hudi_table_renamed;\n\n--add column:\nALTER TABLE hudi_table ADD COLUMNS(remark STRING);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modifying-table-properties",children:"Modifying Table Properties"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- alter table ... set|unset\nALTER TABLE tableIdentifier SET|UNSET TBLPROPERTIES (table_property = 'property_value');\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE hudi_table SET TBLPROPERTIES (hoodie.keep.max.commits = '10');\nALTER TABLE hudi_table SET TBLPROPERTIES (\"note\" = \"don't drop this table\");\n\nALTER TABLE hudi_table UNSET TBLPROPERTIES IF EXISTS (hoodie.keep.max.commits);\nALTER TABLE hudi_table UNSET TBLPROPERTIES IF EXISTS ('note');\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Currently, trying to change the column type may throw an error ",(0,r.jsx)(n.code,{children:"ALTER TABLE CHANGE COLUMN is not supported for changing column colName with oldColType to colName with newColType."}),", due to an ",(0,r.jsx)(n.a,{href:"https://issues.apache.org/jira/browse/SPARK-21823",children:"open SPARK issue"})]})}),"\n",(0,r.jsx)(n.h3,{id:"alter-config-options",children:"Alter config options"}),"\n",(0,r.jsxs)(n.p,{children:["You can also alter the write config for a table by the ",(0,r.jsx)(n.strong,{children:"ALTER TABLE SET SERDEPROPERTIES"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- alter table ... set|unset\nALTER TABLE tableName SET SERDEPROPERTIES ('property' = 'property_value');\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:" ALTER TABLE hudi_table SET SERDEPROPERTIES ('key1' = 'value1');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"show-and-drop-partitions",children:"Show and drop partitions"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Show partitions\nSHOW PARTITIONS tableIdentifier;\n\n-- Drop partition\nALTER TABLE tableIdentifier DROP PARTITION ( partition_col_name = partition_col_val [ , ... ] );\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"--Show partition:\nSHOW PARTITIONS hudi_table;\n\n--Drop partition\uff1a\nALTER TABLE hudi_table DROP PARTITION (dt='2021-12-09', hh='10');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"show-and-drop-index",children:"Show and drop index"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Show Indexes\nSHOW INDEXES FROM tableIdentifier;\n\n-- Drop partition\nDROP INDEX indexIdentifier ON tableIdentifier;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Show indexes\nSHOW INDEXES FROM hudi_indexed_table;\n\n-- Drop Index\nDROP INDEX record_index ON hudi_indexed_table;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"show-create-table",children:"Show create table"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Syntax"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SHOW CREATE TABLE tableIdentifier;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Examples"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SHOW CREATE TABLE hudi_table;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"caveats",children:"Caveats"}),"\n",(0,r.jsx)(n.p,{children:"Hudi currently has the following limitations when using Spark SQL, to create/alter tables."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ALTER TABLE ... RENAME TO ..."})," is not supported when using AWS Glue Data Catalog as hive metastore as Glue itself does\nnot support table renames."]}),"\n",(0,r.jsxs)(n.li,{children:["A new Hudi table created by Spark SQL will by default set ",(0,r.jsx)(n.code,{children:"hoodie.datasource.write.hive_style_partitioning=true"}),", for ease\nof use. This can be overridden using table properties."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"flink-sql",children:"Flink SQL"}),"\n",(0,r.jsx)(n.h3,{id:"create-catalog",children:"Create Catalog"}),"\n",(0,r.jsxs)(n.p,{children:["The catalog helps to manage the SQL tables, the table can be shared among sessions if the catalog persists the table definitions.\nFor ",(0,r.jsx)(n.code,{children:"hms"})," mode, the catalog also supplements the hive syncing options."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE CATALOG hoodie_catalog\n  WITH (\n    'type'='hudi',\n    'catalog.path' = '${catalog default root path}',\n    'hive.conf.dir' = '${directory where hive-site.xml is located}',\n    'mode'='hms' -- supports 'dfs' mode that uses the DFS backend for table DDLs persistence\n  );\n"})}),"\n",(0,r.jsx)(n.h4,{id:"options",children:"Options"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Option Name"}),(0,r.jsx)(n.th,{children:"Required"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Remarks"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"catalog.path"})}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"--"}),(0,r.jsxs)(n.td,{children:["Default path for the catalog's table storage, the path is used to infer the table path automatically, the default table path: ",(0,r.jsx)(n.code,{children:"${catalog.path}/${db_name}/${table_name}"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"default-database"})}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"default"}),(0,r.jsx)(n.td,{children:"default database name"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"hive.conf.dir"})}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"--"}),(0,r.jsxs)(n.td,{children:["The directory where hive-site.xml is located, only valid in ",(0,r.jsx)(n.code,{children:"hms"})," mode"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"mode"})}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"dfs"}),(0,r.jsxs)(n.td,{children:["Supports ",(0,r.jsx)(n.code,{children:"hms"})," mode that uses HMS to persist the table options"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"table.external"})}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsxs)(n.td,{children:["Whether to create the external table, only valid in ",(0,r.jsx)(n.code,{children:"hms"})," mode"]})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"create-table-1",children:"Create Table"}),"\n",(0,r.jsx)(n.p,{children:"You can create tables using standard FLINK SQL CREATE TABLE syntax, which supports partitioning and passing Flink options using WITH."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE [IF NOT EXISTS] [catalog_name.][db_name.]table_name\n  (\n    { <physical_column_definition> \n    [ <table_constraint> ][ , ...n]\n  )\n  [COMMENT table_comment]\n  [PARTITIONED BY (partition_column_name1, partition_column_name2, ...)]\n  WITH (key1=val1, key2=val2, ...)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-non-partitioned-table-1",children:"Create non-partitioned table"}),"\n",(0,r.jsx)(n.p,{children:"Creating a non-partitioned table is as simple as creating a regular table."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- create a Hudi table\nCREATE TABLE hudi_table(\n  id BIGINT,\n  name STRING,\n  price DOUBLE\n)\nWITH (\n'connector' = 'hudi',\n'path' = 'file:///tmp/hudi_table',\n'table.type' = 'MERGE_ON_READ'\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-partitioned-table-1",children:"Create partitioned table"}),"\n",(0,r.jsx)(n.p,{children:"The following is an example of creating a Flink partitioned table."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE hudi_table(\n  id BIGINT,\n  name STRING,\n  dt STRING,\n  hh STRING\n)\nPARTITIONED BY (`dt`)\nWITH (\n'connector' = 'hudi',\n'path' = 'file:///tmp/hudi_table',\n'table.type' = 'MERGE_ON_READ'\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-table-with-record-keys-and-ordering-fields-1",children:"Create table with record keys and ordering fields"}),"\n",(0,r.jsx)(n.p,{children:"The following is an example of creating a Flink table with record key and ordering field similarly to spark."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE hudi_table(\n  id BIGINT PRIMARY KEY NOT ENFORCED,\n  name STRING,\n  price DOUBLE,\n  ts BIGINT\n)\nPARTITIONED BY (`dt`)\nWITH (\n'connector' = 'hudi',\n'path' = 'file:///tmp/hudi_table',\n'table.type' = 'MERGE_ON_READ',\n'precombine.field' = 'ts'\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-table-in-non-blocking-concurrency-control-mode",children:"Create Table in Non-Blocking Concurrency Control Mode"}),"\n",(0,r.jsxs)(n.p,{children:["The following is an example of creating a Flink table in ",(0,r.jsx)(n.a,{href:"/docs/next/concurrency_control#non-blocking-concurrency-control",children:"Non-Blocking Concurrency Control mode"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- This is a datagen source that can generate records continuously\nCREATE TABLE sourceT (\n  uuid VARCHAR(20),\n  name VARCHAR(10),\n  age INT,\n  ts TIMESTAMP(3),\n  `partition` AS 'par1'\n) WITH (\n  'connector' = 'datagen',\n  'rows-per-second' = '200'\n);\n\n-- pipeline1: by default, enable the compaction and cleaning services\nCREATE TABLE t1 (\n  uuid VARCHAR(20),\n  name VARCHAR(10),\n  age INT,\n  ts TIMESTAMP(3),\n  `partition` VARCHAR(20)\n) WITH (\n  'connector' = 'hudi',\n  'path' = '/tmp/hudi-demo/t1',\n  'table.type' = 'MERGE_ON_READ',\n  'index.type' = 'BUCKET',\n  'hoodie.write.concurrency.mode' = 'NON_BLOCKING_CONCURRENCY_CONTROL',\n  'write.tasks' = '2'\n);\n\n-- pipeline2: disable the compaction and cleaning services manually\nCREATE TABLE t1_2 (\n  uuid VARCHAR(20),\n  name VARCHAR(10),\n  age INT,\n  ts TIMESTAMP(3),\n  `partition` VARCHAR(20)\n) WITH (\n  'connector' = 'hudi',\n  'path' = '/tmp/hudi-demo/t1',\n  'table.type' = 'MERGE_ON_READ',\n  'index.type' = 'BUCKET',\n  'hoodie.write.concurrency.mode' = 'NON_BLOCKING_CONCURRENCY_CONTROL',\n  'write.tasks' = '2',\n  'compaction.schedule.enabled' = 'false',\n  'compaction.async.enabled' = 'false',\n  'clean.async.enabled' = 'false'\n);\n\n-- Submit the pipelines\nINSERT INTO t1\nSELECT * FROM sourceT;\n\nINSERT INTO t1_2\nSELECT * FROM sourceT;\n\nSELECT * FROM t1 LIMIT 20;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"alter-table",children:"Alter Table"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE tableA RENAME TO tableB;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"setting-hudi-configs-1",children:"Setting Hudi configs"}),"\n",(0,r.jsx)(n.h4,{id:"using-table-options",children:"Using table options"}),"\n",(0,r.jsxs)(n.p,{children:["You can configure hoodie configs in table options when creating a table. You can refer Flink specific hoodie configs ",(0,r.jsx)(n.a,{href:"/docs/next/configurations#FLINK_SQL",children:"here"}),"\nThese configs will be applied to all the operations on that table."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS tableName (\n  colName1 colType1 PRIMARY KEY NOT ENFORCED,\n  colName2 colType2,\n  ...\n)\nWITH (\n  'connector' = 'hudi',\n  'path' = '${path}',\n  ${hoodie.config.key1} = '${hoodie.config.value1}',\n  ${hoodie.config.key2} = '${hoodie.config.value2}',\n  ....\n);\n\ne.g.\nCREATE TABLE hudi_table(\n  id BIGINT PRIMARY KEY NOT ENFORCED,\n  name STRING,\n  price DOUBLE,\n  ts BIGINT\n)\nPARTITIONED BY (`dt`)\nWITH (\n'connector' = 'hudi',\n'path' = 'file:///tmp/hudi_table',\n'table.type' = 'MERGE_ON_READ',\n'precombine.field' = 'ts',\n'hoodie.cleaner.fileversions.retained' = '20',\n'hoodie.keep.max.commits' = '20',\n'hoodie.datasource.write.hive_style_partitioning' = 'true'\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"supported-types",children:"Supported Types"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Spark"}),(0,r.jsx)(n.th,{children:"Hudi"}),(0,r.jsx)(n.th,{children:"Notes"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"byte"}),(0,r.jsx)(n.td,{children:"int"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"short"}),(0,r.jsx)(n.td,{children:"int"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"integer"}),(0,r.jsx)(n.td,{children:"int"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"long"}),(0,r.jsx)(n.td,{children:"long"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"date"}),(0,r.jsx)(n.td,{children:"date"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"timestamp"}),(0,r.jsx)(n.td,{children:"timestamp"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"decimal"}),(0,r.jsx)(n.td,{children:"decimal"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"binary"}),(0,r.jsx)(n.td,{children:"bytes"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"array"}),(0,r.jsx)(n.td,{children:"array"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"map"}),(0,r.jsx)(n.td,{children:"map"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"struct"}),(0,r.jsx)(n.td,{children:"struct"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"char"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"not supported"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"varchar"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"not supported"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"numeric"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"not supported"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"not supported"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"object"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"not supported"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var i=t(34164);const r={tabItem:"tabItem_Ymn6"};var a=t(74848);function s(e){let{children:n,hidden:t,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,s),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>y});var i=t(96540),r=t(34164),a=t(23104),s=t(56347),d=t(205),l=t(57485),o=t(31682),c=t(70679);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,o.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:t}=e;const r=(0,s.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(a),(0,i.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=u(e),[s,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[o,h]=x({queryString:t,groupId:r}),[m,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,c.Dv)(t);return[r,(0,i.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),j=(()=>{const e=o??m;return p({value:e,tabValues:a})?e:null})();(0,d.A)((()=>{j&&l(j)}),[j]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),b(e)}),[h,b,a]),tabValues:a}}var b=t(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var T=t(74848);function f(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:d}=e;const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,a.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),r=d[t].value;r!==i&&(o(n),s(r))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,T.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:d.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,T.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>l.push(e),onKeyDown:h,onClick:c,...a,className:(0,r.A)("tabs__item",j.tabItem,a?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function E(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,T.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function g(e){const n=m(e);return(0,T.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,T.jsx)(f,{...n,...e}),(0,T.jsx)(E,{...n,...e})]})}function y(e){const n=(0,b.A)();return(0,T.jsx)(g,{...e,children:h(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var i=t(96540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);