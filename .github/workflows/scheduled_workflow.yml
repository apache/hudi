# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Scheduled Workflow

on:
  schedule:
    # Runs every 5 minutes
    - cron: '*/5 * * * *'

permissions:
  statuses: write
  pull-requests: write
  issues: read

jobs:
  process-new-and-updated-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Process new and updated PRs
        # We have to run any actions that require write permissions here
        # since the workflow triggered by events from a PR in a fork
        # (not apache/hudi but other_owner/hudi) does not run on a
        # GITHUB_TOKEN with write permissions (this is prohibited by
        # Apache).
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // Cron schedule may not be reliable so giving buffer time to avoid missing recent PRs
            const since = new Date(new Date().getTime() - (900 * 1000)).toISOString();
            const query = `repo:${context.repo.owner}/${context.repo.repo} type:pr state:open updated:>=${since}`;
            const openPrs = await github.paginate(github.rest.search.issuesAndPullRequests, {
              q: query,
              sort: 'updated',
              order: 'desc',
              per_page: 100
            });
            
            const { labelDocsPr, labelPrWithSize } = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/labeler.js`);
            const checkAzureCiAndCreateCommitStatus = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/azure_ci.js`);
            
            console.log(`Number of PRs to process: ${openPrs.length}`);
            
            for (const pr of openPrs) {
              console.log(`*** Processing PR: ${pr.title}, URL: ${pr.html_url}`);
            
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
            
              const targetBase = pullRequest.base.ref;
              console.log(`Target base branch: ${targetBase}`);
            
              // Label docs PR (targeting "asf-site" branch)
              if (targetBase === 'asf-site') {
                await labelDocsPr({
                  github,
                  context,
                  prNumber: pr.number
                });
              }
            
              // Label PR size
              await labelPrWithSize({
                github,
                context,
                prNumber: pr.number,
                prData: pullRequest
              });
            
              // Check Azure CI and create commit status (targeting "master", "release*", or "branch-0.x" branch)
              const targetBaseRegex = /^(master|release.*|branch-0\.x)$/;
              if (targetBaseRegex.test(targetBase)
                && !pr.body.includes('HOTFIX: SKIP AZURE CI')) {
                const latestCommitHash = pullRequest.head.sha;
            
                // Create commit status based on Azure CI report to PR
                await checkAzureCiAndCreateCommitStatus({
                  github,
                  context,
                  prNumber: pr.number,
                  latestCommitHash: latestCommitHash
                });
              }
            }
