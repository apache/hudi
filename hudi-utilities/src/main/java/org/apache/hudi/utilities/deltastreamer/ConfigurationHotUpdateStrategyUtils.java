/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.hudi.utilities.deltastreamer;

import org.apache.hudi.common.config.TypedProperties;
import org.apache.hudi.common.util.Option;
import org.apache.hudi.common.util.ReflectionUtils;
import org.apache.hudi.common.util.StringUtils;
import org.apache.hudi.exception.HoodieException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class ConfigurationHotUpdateStrategyUtils {
  private static final Logger LOG = LoggerFactory.getLogger(ConfigurationHotUpdateStrategyUtils.class);

  /**
   * Create a ConfigurationHotUpdateStrategy class via reflection,
   * <br>
   * if the class name of ConfigurationHotUpdateStrategy is configured through the {@link HoodieDeltaStreamer.Config#configHotUpdateStrategyClass}.
   */
  public static Option<ConfigurationHotUpdateStrategy> createConfigurationHotUpdateStrategy(String configHotUpdateStrategyClass,
                                                                                            HoodieDeltaStreamer.Config cfg,
                                                                                            TypedProperties properties)
      throws HoodieException {
    try {
      return StringUtils.isNullOrEmpty(configHotUpdateStrategyClass)
          ? Option.empty() :
          Option.of((ConfigurationHotUpdateStrategy) ReflectionUtils.loadClass(configHotUpdateStrategyClass, cfg, properties));
    } catch (Throwable e) {
      throw new HoodieException("Could not create ConfigurationHotUpdateStrategy class " + configHotUpdateStrategyClass, e);
    }
  }

  /**
   * merge newProps to propsToUpdated.
   * @param propsToUpdate the old properties to be updated in place
   * @param newProps the new properties generated by user
   * @return true if propsToUpdated updated
   */
  public static boolean mergeProperties(final TypedProperties propsToUpdate, final TypedProperties newProps) {
    boolean updated = false;
    for (Map.Entry entry : newProps.entrySet()) {
      // new property or property updated
      if (!propsToUpdate.containsKey(entry.getKey())
          || !propsToUpdate.get(entry.getKey()).equals(entry.getValue())) {
        LOG.info("update property [{}] from [{}] to [{}]", entry.getKey(),
            propsToUpdate.getProperty((String) entry.getKey(), ""), entry.getValue());
        propsToUpdate.put(entry.getKey(), entry.getValue());
        updated = true;
      }
    }
    // property removed
    Set<Object> keysToRemove = new HashSet<>(propsToUpdate.keySet());
    keysToRemove.removeAll(newProps.keySet());
    for (Object key : keysToRemove) {
      LOG.info("delete property [{}]", key);
      propsToUpdate.remove(key);
      updated = true;
    }
    return updated;
  }
}
