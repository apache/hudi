/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hudi.metaserver.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-07-21")
public class ThriftHoodieMetaServer {

  public interface Iface {

    public void create_database(java.lang.String db) throws org.apache.thrift.TException;

    public void create_table(Table table) throws org.apache.thrift.TException;

    public Table get_table(java.lang.String db, java.lang.String tb) throws org.apache.thrift.TException;

    public java.util.List<THoodieInstant> list_instants(java.lang.String db, java.lang.String tb, int num) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer get_instant_meta(java.lang.String db, java.lang.String tb, THoodieInstant instant) throws org.apache.thrift.TException;

    public java.lang.String create_new_instant_time(java.lang.String db, java.lang.String tb) throws org.apache.thrift.TException;

    public HoodieInstantChangeResult create_new_instant_with_time(java.lang.String db, java.lang.String tb, THoodieInstant instant, java.nio.ByteBuffer content) throws org.apache.thrift.TException;

    public HoodieInstantChangeResult transition_instant_state(java.lang.String db, java.lang.String tb, THoodieInstant fromInstant, THoodieInstant toInstant, java.nio.ByteBuffer metadata) throws org.apache.thrift.TException;

    public HoodieInstantChangeResult delete_instant(java.lang.String db, java.lang.String tb, THoodieInstant instant) throws org.apache.thrift.TException;

    public java.nio.ByteBuffer list_files_in_partition(java.lang.String db, java.lang.String tb, java.lang.String partition, java.lang.String timestamp) throws org.apache.thrift.TException;

    public java.util.List<java.lang.String> list_all_partitions(java.lang.String db, java.lang.String tb) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void create_database(java.lang.String db, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void create_table(Table table, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void get_table(java.lang.String db, java.lang.String tb, org.apache.thrift.async.AsyncMethodCallback<Table> resultHandler) throws org.apache.thrift.TException;

    public void list_instants(java.lang.String db, java.lang.String tb, int num, org.apache.thrift.async.AsyncMethodCallback<java.util.List<THoodieInstant>> resultHandler) throws org.apache.thrift.TException;

    public void get_instant_meta(java.lang.String db, java.lang.String tb, THoodieInstant instant, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

    public void create_new_instant_time(java.lang.String db, java.lang.String tb, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void create_new_instant_with_time(java.lang.String db, java.lang.String tb, THoodieInstant instant, java.nio.ByteBuffer content, org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> resultHandler) throws org.apache.thrift.TException;

    public void transition_instant_state(java.lang.String db, java.lang.String tb, THoodieInstant fromInstant, THoodieInstant toInstant, java.nio.ByteBuffer metadata, org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> resultHandler) throws org.apache.thrift.TException;

    public void delete_instant(java.lang.String db, java.lang.String tb, THoodieInstant instant, org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> resultHandler) throws org.apache.thrift.TException;

    public void list_files_in_partition(java.lang.String db, java.lang.String tb, java.lang.String partition, java.lang.String timestamp, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException;

    public void list_all_partitions(java.lang.String db, java.lang.String tb, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void create_database(java.lang.String db) throws org.apache.thrift.TException
    {
      send_create_database(db);
      recv_create_database();
    }

    public void send_create_database(java.lang.String db) throws org.apache.thrift.TException
    {
      create_database_args args = new create_database_args();
      args.setDb(db);
      sendBase("create_database", args);
    }

    public void recv_create_database() throws org.apache.thrift.TException
    {
      create_database_result result = new create_database_result();
      receiveBase(result, "create_database");
      return;
    }

    public void create_table(Table table) throws org.apache.thrift.TException
    {
      send_create_table(table);
      recv_create_table();
    }

    public void send_create_table(Table table) throws org.apache.thrift.TException
    {
      create_table_args args = new create_table_args();
      args.setTable(table);
      sendBase("create_table", args);
    }

    public void recv_create_table() throws org.apache.thrift.TException
    {
      create_table_result result = new create_table_result();
      receiveBase(result, "create_table");
      return;
    }

    public Table get_table(java.lang.String db, java.lang.String tb) throws org.apache.thrift.TException
    {
      send_get_table(db, tb);
      return recv_get_table();
    }

    public void send_get_table(java.lang.String db, java.lang.String tb) throws org.apache.thrift.TException
    {
      get_table_args args = new get_table_args();
      args.setDb(db);
      args.setTb(tb);
      sendBase("get_table", args);
    }

    public Table recv_get_table() throws org.apache.thrift.TException
    {
      get_table_result result = new get_table_result();
      receiveBase(result, "get_table");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_table failed: unknown result");
    }

    public java.util.List<THoodieInstant> list_instants(java.lang.String db, java.lang.String tb, int num) throws org.apache.thrift.TException
    {
      send_list_instants(db, tb, num);
      return recv_list_instants();
    }

    public void send_list_instants(java.lang.String db, java.lang.String tb, int num) throws org.apache.thrift.TException
    {
      list_instants_args args = new list_instants_args();
      args.setDb(db);
      args.setTb(tb);
      args.setNum(num);
      sendBase("list_instants", args);
    }

    public java.util.List<THoodieInstant> recv_list_instants() throws org.apache.thrift.TException
    {
      list_instants_result result = new list_instants_result();
      receiveBase(result, "list_instants");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "list_instants failed: unknown result");
    }

    public java.nio.ByteBuffer get_instant_meta(java.lang.String db, java.lang.String tb, THoodieInstant instant) throws org.apache.thrift.TException
    {
      send_get_instant_meta(db, tb, instant);
      return recv_get_instant_meta();
    }

    public void send_get_instant_meta(java.lang.String db, java.lang.String tb, THoodieInstant instant) throws org.apache.thrift.TException
    {
      get_instant_meta_args args = new get_instant_meta_args();
      args.setDb(db);
      args.setTb(tb);
      args.setInstant(instant);
      sendBase("get_instant_meta", args);
    }

    public java.nio.ByteBuffer recv_get_instant_meta() throws org.apache.thrift.TException
    {
      get_instant_meta_result result = new get_instant_meta_result();
      receiveBase(result, "get_instant_meta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_instant_meta failed: unknown result");
    }

    public java.lang.String create_new_instant_time(java.lang.String db, java.lang.String tb) throws org.apache.thrift.TException
    {
      send_create_new_instant_time(db, tb);
      return recv_create_new_instant_time();
    }

    public void send_create_new_instant_time(java.lang.String db, java.lang.String tb) throws org.apache.thrift.TException
    {
      create_new_instant_time_args args = new create_new_instant_time_args();
      args.setDb(db);
      args.setTb(tb);
      sendBase("create_new_instant_time", args);
    }

    public java.lang.String recv_create_new_instant_time() throws org.apache.thrift.TException
    {
      create_new_instant_time_result result = new create_new_instant_time_result();
      receiveBase(result, "create_new_instant_time");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_new_instant_time failed: unknown result");
    }

    public HoodieInstantChangeResult create_new_instant_with_time(java.lang.String db, java.lang.String tb, THoodieInstant instant, java.nio.ByteBuffer content) throws org.apache.thrift.TException
    {
      send_create_new_instant_with_time(db, tb, instant, content);
      return recv_create_new_instant_with_time();
    }

    public void send_create_new_instant_with_time(java.lang.String db, java.lang.String tb, THoodieInstant instant, java.nio.ByteBuffer content) throws org.apache.thrift.TException
    {
      create_new_instant_with_time_args args = new create_new_instant_with_time_args();
      args.setDb(db);
      args.setTb(tb);
      args.setInstant(instant);
      args.setContent(content);
      sendBase("create_new_instant_with_time", args);
    }

    public HoodieInstantChangeResult recv_create_new_instant_with_time() throws org.apache.thrift.TException
    {
      create_new_instant_with_time_result result = new create_new_instant_with_time_result();
      receiveBase(result, "create_new_instant_with_time");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_new_instant_with_time failed: unknown result");
    }

    public HoodieInstantChangeResult transition_instant_state(java.lang.String db, java.lang.String tb, THoodieInstant fromInstant, THoodieInstant toInstant, java.nio.ByteBuffer metadata) throws org.apache.thrift.TException
    {
      send_transition_instant_state(db, tb, fromInstant, toInstant, metadata);
      return recv_transition_instant_state();
    }

    public void send_transition_instant_state(java.lang.String db, java.lang.String tb, THoodieInstant fromInstant, THoodieInstant toInstant, java.nio.ByteBuffer metadata) throws org.apache.thrift.TException
    {
      transition_instant_state_args args = new transition_instant_state_args();
      args.setDb(db);
      args.setTb(tb);
      args.setFromInstant(fromInstant);
      args.setToInstant(toInstant);
      args.setMetadata(metadata);
      sendBase("transition_instant_state", args);
    }

    public HoodieInstantChangeResult recv_transition_instant_state() throws org.apache.thrift.TException
    {
      transition_instant_state_result result = new transition_instant_state_result();
      receiveBase(result, "transition_instant_state");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "transition_instant_state failed: unknown result");
    }

    public HoodieInstantChangeResult delete_instant(java.lang.String db, java.lang.String tb, THoodieInstant instant) throws org.apache.thrift.TException
    {
      send_delete_instant(db, tb, instant);
      return recv_delete_instant();
    }

    public void send_delete_instant(java.lang.String db, java.lang.String tb, THoodieInstant instant) throws org.apache.thrift.TException
    {
      delete_instant_args args = new delete_instant_args();
      args.setDb(db);
      args.setTb(tb);
      args.setInstant(instant);
      sendBase("delete_instant", args);
    }

    public HoodieInstantChangeResult recv_delete_instant() throws org.apache.thrift.TException
    {
      delete_instant_result result = new delete_instant_result();
      receiveBase(result, "delete_instant");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delete_instant failed: unknown result");
    }

    public java.nio.ByteBuffer list_files_in_partition(java.lang.String db, java.lang.String tb, java.lang.String partition, java.lang.String timestamp) throws org.apache.thrift.TException
    {
      send_list_files_in_partition(db, tb, partition, timestamp);
      return recv_list_files_in_partition();
    }

    public void send_list_files_in_partition(java.lang.String db, java.lang.String tb, java.lang.String partition, java.lang.String timestamp) throws org.apache.thrift.TException
    {
      list_files_in_partition_args args = new list_files_in_partition_args();
      args.setDb(db);
      args.setTb(tb);
      args.setPartition(partition);
      args.setTimestamp(timestamp);
      sendBase("list_files_in_partition", args);
    }

    public java.nio.ByteBuffer recv_list_files_in_partition() throws org.apache.thrift.TException
    {
      list_files_in_partition_result result = new list_files_in_partition_result();
      receiveBase(result, "list_files_in_partition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "list_files_in_partition failed: unknown result");
    }

    public java.util.List<java.lang.String> list_all_partitions(java.lang.String db, java.lang.String tb) throws org.apache.thrift.TException
    {
      send_list_all_partitions(db, tb);
      return recv_list_all_partitions();
    }

    public void send_list_all_partitions(java.lang.String db, java.lang.String tb) throws org.apache.thrift.TException
    {
      list_all_partitions_args args = new list_all_partitions_args();
      args.setDb(db);
      args.setTb(tb);
      sendBase("list_all_partitions", args);
    }

    public java.util.List<java.lang.String> recv_list_all_partitions() throws org.apache.thrift.TException
    {
      list_all_partitions_result result = new list_all_partitions_result();
      receiveBase(result, "list_all_partitions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "list_all_partitions failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void create_database(java.lang.String db, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_database_call method_call = new create_database_call(db, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_database_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String db;
      public create_database_call(java.lang.String db, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_database", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_database_args args = new create_database_args();
        args.setDb(db);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void create_table(Table table, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_table_call method_call = new create_table_call(table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_table_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private Table table;
      public create_table_call(Table table, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_table", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_table_args args = new create_table_args();
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void get_table(java.lang.String db, java.lang.String tb, org.apache.thrift.async.AsyncMethodCallback<Table> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_table_call method_call = new get_table_call(db, tb, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_table_call extends org.apache.thrift.async.TAsyncMethodCall<Table> {
      private java.lang.String db;
      private java.lang.String tb;
      public get_table_call(java.lang.String db, java.lang.String tb, org.apache.thrift.async.AsyncMethodCallback<Table> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.tb = tb;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_table", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_table_args args = new get_table_args();
        args.setDb(db);
        args.setTb(tb);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Table getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_table();
      }
    }

    public void list_instants(java.lang.String db, java.lang.String tb, int num, org.apache.thrift.async.AsyncMethodCallback<java.util.List<THoodieInstant>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      list_instants_call method_call = new list_instants_call(db, tb, num, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class list_instants_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<THoodieInstant>> {
      private java.lang.String db;
      private java.lang.String tb;
      private int num;
      public list_instants_call(java.lang.String db, java.lang.String tb, int num, org.apache.thrift.async.AsyncMethodCallback<java.util.List<THoodieInstant>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.tb = tb;
        this.num = num;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("list_instants", org.apache.thrift.protocol.TMessageType.CALL, 0));
        list_instants_args args = new list_instants_args();
        args.setDb(db);
        args.setTb(tb);
        args.setNum(num);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<THoodieInstant> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_list_instants();
      }
    }

    public void get_instant_meta(java.lang.String db, java.lang.String tb, THoodieInstant instant, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_instant_meta_call method_call = new get_instant_meta_call(db, tb, instant, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_instant_meta_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private java.lang.String db;
      private java.lang.String tb;
      private THoodieInstant instant;
      public get_instant_meta_call(java.lang.String db, java.lang.String tb, THoodieInstant instant, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.tb = tb;
        this.instant = instant;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_instant_meta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_instant_meta_args args = new get_instant_meta_args();
        args.setDb(db);
        args.setTb(tb);
        args.setInstant(instant);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_instant_meta();
      }
    }

    public void create_new_instant_time(java.lang.String db, java.lang.String tb, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_new_instant_time_call method_call = new create_new_instant_time_call(db, tb, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_new_instant_time_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String db;
      private java.lang.String tb;
      public create_new_instant_time_call(java.lang.String db, java.lang.String tb, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.tb = tb;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_new_instant_time", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_new_instant_time_args args = new create_new_instant_time_args();
        args.setDb(db);
        args.setTb(tb);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_new_instant_time();
      }
    }

    public void create_new_instant_with_time(java.lang.String db, java.lang.String tb, THoodieInstant instant, java.nio.ByteBuffer content, org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_new_instant_with_time_call method_call = new create_new_instant_with_time_call(db, tb, instant, content, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_new_instant_with_time_call extends org.apache.thrift.async.TAsyncMethodCall<HoodieInstantChangeResult> {
      private java.lang.String db;
      private java.lang.String tb;
      private THoodieInstant instant;
      private java.nio.ByteBuffer content;
      public create_new_instant_with_time_call(java.lang.String db, java.lang.String tb, THoodieInstant instant, java.nio.ByteBuffer content, org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.tb = tb;
        this.instant = instant;
        this.content = content;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_new_instant_with_time", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_new_instant_with_time_args args = new create_new_instant_with_time_args();
        args.setDb(db);
        args.setTb(tb);
        args.setInstant(instant);
        args.setContent(content);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HoodieInstantChangeResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_new_instant_with_time();
      }
    }

    public void transition_instant_state(java.lang.String db, java.lang.String tb, THoodieInstant fromInstant, THoodieInstant toInstant, java.nio.ByteBuffer metadata, org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      transition_instant_state_call method_call = new transition_instant_state_call(db, tb, fromInstant, toInstant, metadata, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class transition_instant_state_call extends org.apache.thrift.async.TAsyncMethodCall<HoodieInstantChangeResult> {
      private java.lang.String db;
      private java.lang.String tb;
      private THoodieInstant fromInstant;
      private THoodieInstant toInstant;
      private java.nio.ByteBuffer metadata;
      public transition_instant_state_call(java.lang.String db, java.lang.String tb, THoodieInstant fromInstant, THoodieInstant toInstant, java.nio.ByteBuffer metadata, org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.tb = tb;
        this.fromInstant = fromInstant;
        this.toInstant = toInstant;
        this.metadata = metadata;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transition_instant_state", org.apache.thrift.protocol.TMessageType.CALL, 0));
        transition_instant_state_args args = new transition_instant_state_args();
        args.setDb(db);
        args.setTb(tb);
        args.setFromInstant(fromInstant);
        args.setToInstant(toInstant);
        args.setMetadata(metadata);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HoodieInstantChangeResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_transition_instant_state();
      }
    }

    public void delete_instant(java.lang.String db, java.lang.String tb, THoodieInstant instant, org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delete_instant_call method_call = new delete_instant_call(db, tb, instant, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delete_instant_call extends org.apache.thrift.async.TAsyncMethodCall<HoodieInstantChangeResult> {
      private java.lang.String db;
      private java.lang.String tb;
      private THoodieInstant instant;
      public delete_instant_call(java.lang.String db, java.lang.String tb, THoodieInstant instant, org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.tb = tb;
        this.instant = instant;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delete_instant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delete_instant_args args = new delete_instant_args();
        args.setDb(db);
        args.setTb(tb);
        args.setInstant(instant);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HoodieInstantChangeResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delete_instant();
      }
    }

    public void list_files_in_partition(java.lang.String db, java.lang.String tb, java.lang.String partition, java.lang.String timestamp, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      list_files_in_partition_call method_call = new list_files_in_partition_call(db, tb, partition, timestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class list_files_in_partition_call extends org.apache.thrift.async.TAsyncMethodCall<java.nio.ByteBuffer> {
      private java.lang.String db;
      private java.lang.String tb;
      private java.lang.String partition;
      private java.lang.String timestamp;
      public list_files_in_partition_call(java.lang.String db, java.lang.String tb, java.lang.String partition, java.lang.String timestamp, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.tb = tb;
        this.partition = partition;
        this.timestamp = timestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("list_files_in_partition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        list_files_in_partition_args args = new list_files_in_partition_args();
        args.setDb(db);
        args.setTb(tb);
        args.setPartition(partition);
        args.setTimestamp(timestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.nio.ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_list_files_in_partition();
      }
    }

    public void list_all_partitions(java.lang.String db, java.lang.String tb, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      list_all_partitions_call method_call = new list_all_partitions_call(db, tb, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class list_all_partitions_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String db;
      private java.lang.String tb;
      public list_all_partitions_call(java.lang.String db, java.lang.String tb, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.db = db;
        this.tb = tb;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("list_all_partitions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        list_all_partitions_args args = new list_all_partitions_args();
        args.setDb(db);
        args.setTb(tb);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_list_all_partitions();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("create_database", new create_database());
      processMap.put("create_table", new create_table());
      processMap.put("get_table", new get_table());
      processMap.put("list_instants", new list_instants());
      processMap.put("get_instant_meta", new get_instant_meta());
      processMap.put("create_new_instant_time", new create_new_instant_time());
      processMap.put("create_new_instant_with_time", new create_new_instant_with_time());
      processMap.put("transition_instant_state", new transition_instant_state());
      processMap.put("delete_instant", new delete_instant());
      processMap.put("list_files_in_partition", new list_files_in_partition());
      processMap.put("list_all_partitions", new list_all_partitions());
      return processMap;
    }

    public static class create_database<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_database_args> {
      public create_database() {
        super("create_database");
      }

      public create_database_args getEmptyArgsInstance() {
        return new create_database_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public create_database_result getResult(I iface, create_database_args args) throws org.apache.thrift.TException {
        create_database_result result = new create_database_result();
        iface.create_database(args.db);
        return result;
      }
    }

    public static class create_table<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_table_args> {
      public create_table() {
        super("create_table");
      }

      public create_table_args getEmptyArgsInstance() {
        return new create_table_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public create_table_result getResult(I iface, create_table_args args) throws org.apache.thrift.TException {
        create_table_result result = new create_table_result();
        iface.create_table(args.table);
        return result;
      }
    }

    public static class get_table<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_table_args> {
      public get_table() {
        super("get_table");
      }

      public get_table_args getEmptyArgsInstance() {
        return new get_table_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public get_table_result getResult(I iface, get_table_args args) throws org.apache.thrift.TException {
        get_table_result result = new get_table_result();
        result.success = iface.get_table(args.db, args.tb);
        return result;
      }
    }

    public static class list_instants<I extends Iface> extends org.apache.thrift.ProcessFunction<I, list_instants_args> {
      public list_instants() {
        super("list_instants");
      }

      public list_instants_args getEmptyArgsInstance() {
        return new list_instants_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public list_instants_result getResult(I iface, list_instants_args args) throws org.apache.thrift.TException {
        list_instants_result result = new list_instants_result();
        result.success = iface.list_instants(args.db, args.tb, args.num);
        return result;
      }
    }

    public static class get_instant_meta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_instant_meta_args> {
      public get_instant_meta() {
        super("get_instant_meta");
      }

      public get_instant_meta_args getEmptyArgsInstance() {
        return new get_instant_meta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public get_instant_meta_result getResult(I iface, get_instant_meta_args args) throws org.apache.thrift.TException {
        get_instant_meta_result result = new get_instant_meta_result();
        result.success = iface.get_instant_meta(args.db, args.tb, args.instant);
        return result;
      }
    }

    public static class create_new_instant_time<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_new_instant_time_args> {
      public create_new_instant_time() {
        super("create_new_instant_time");
      }

      public create_new_instant_time_args getEmptyArgsInstance() {
        return new create_new_instant_time_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public create_new_instant_time_result getResult(I iface, create_new_instant_time_args args) throws org.apache.thrift.TException {
        create_new_instant_time_result result = new create_new_instant_time_result();
        result.success = iface.create_new_instant_time(args.db, args.tb);
        return result;
      }
    }

    public static class create_new_instant_with_time<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_new_instant_with_time_args> {
      public create_new_instant_with_time() {
        super("create_new_instant_with_time");
      }

      public create_new_instant_with_time_args getEmptyArgsInstance() {
        return new create_new_instant_with_time_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public create_new_instant_with_time_result getResult(I iface, create_new_instant_with_time_args args) throws org.apache.thrift.TException {
        create_new_instant_with_time_result result = new create_new_instant_with_time_result();
        result.success = iface.create_new_instant_with_time(args.db, args.tb, args.instant, args.content);
        return result;
      }
    }

    public static class transition_instant_state<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transition_instant_state_args> {
      public transition_instant_state() {
        super("transition_instant_state");
      }

      public transition_instant_state_args getEmptyArgsInstance() {
        return new transition_instant_state_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public transition_instant_state_result getResult(I iface, transition_instant_state_args args) throws org.apache.thrift.TException {
        transition_instant_state_result result = new transition_instant_state_result();
        result.success = iface.transition_instant_state(args.db, args.tb, args.fromInstant, args.toInstant, args.metadata);
        return result;
      }
    }

    public static class delete_instant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delete_instant_args> {
      public delete_instant() {
        super("delete_instant");
      }

      public delete_instant_args getEmptyArgsInstance() {
        return new delete_instant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public delete_instant_result getResult(I iface, delete_instant_args args) throws org.apache.thrift.TException {
        delete_instant_result result = new delete_instant_result();
        result.success = iface.delete_instant(args.db, args.tb, args.instant);
        return result;
      }
    }

    public static class list_files_in_partition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, list_files_in_partition_args> {
      public list_files_in_partition() {
        super("list_files_in_partition");
      }

      public list_files_in_partition_args getEmptyArgsInstance() {
        return new list_files_in_partition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public list_files_in_partition_result getResult(I iface, list_files_in_partition_args args) throws org.apache.thrift.TException {
        list_files_in_partition_result result = new list_files_in_partition_result();
        result.success = iface.list_files_in_partition(args.db, args.tb, args.partition, args.timestamp);
        return result;
      }
    }

    public static class list_all_partitions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, list_all_partitions_args> {
      public list_all_partitions() {
        super("list_all_partitions");
      }

      public list_all_partitions_args getEmptyArgsInstance() {
        return new list_all_partitions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public list_all_partitions_result getResult(I iface, list_all_partitions_args args) throws org.apache.thrift.TException {
        list_all_partitions_result result = new list_all_partitions_result();
        result.success = iface.list_all_partitions(args.db, args.tb);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("create_database", new create_database());
      processMap.put("create_table", new create_table());
      processMap.put("get_table", new get_table());
      processMap.put("list_instants", new list_instants());
      processMap.put("get_instant_meta", new get_instant_meta());
      processMap.put("create_new_instant_time", new create_new_instant_time());
      processMap.put("create_new_instant_with_time", new create_new_instant_with_time());
      processMap.put("transition_instant_state", new transition_instant_state());
      processMap.put("delete_instant", new delete_instant());
      processMap.put("list_files_in_partition", new list_files_in_partition());
      processMap.put("list_all_partitions", new list_all_partitions());
      return processMap;
    }

    public static class create_database<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, create_database_args, Void> {
      public create_database() {
        super("create_database");
      }

      public create_database_args getEmptyArgsInstance() {
        return new create_database_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            create_database_result result = new create_database_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            create_database_result result = new create_database_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, create_database_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.create_database(args.db,resultHandler);
      }
    }

    public static class create_table<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, create_table_args, Void> {
      public create_table() {
        super("create_table");
      }

      public create_table_args getEmptyArgsInstance() {
        return new create_table_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            create_table_result result = new create_table_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            create_table_result result = new create_table_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, create_table_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.create_table(args.table,resultHandler);
      }
    }

    public static class get_table<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_table_args, Table> {
      public get_table() {
        super("get_table");
      }

      public get_table_args getEmptyArgsInstance() {
        return new get_table_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Table> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Table>() { 
          public void onComplete(Table o) {
            get_table_result result = new get_table_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            get_table_result result = new get_table_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_table_args args, org.apache.thrift.async.AsyncMethodCallback<Table> resultHandler) throws org.apache.thrift.TException {
        iface.get_table(args.db, args.tb,resultHandler);
      }
    }

    public static class list_instants<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, list_instants_args, java.util.List<THoodieInstant>> {
      public list_instants() {
        super("list_instants");
      }

      public list_instants_args getEmptyArgsInstance() {
        return new list_instants_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<THoodieInstant>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<THoodieInstant>>() { 
          public void onComplete(java.util.List<THoodieInstant> o) {
            list_instants_result result = new list_instants_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            list_instants_result result = new list_instants_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, list_instants_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<THoodieInstant>> resultHandler) throws org.apache.thrift.TException {
        iface.list_instants(args.db, args.tb, args.num,resultHandler);
      }
    }

    public static class get_instant_meta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_instant_meta_args, java.nio.ByteBuffer> {
      public get_instant_meta() {
        super("get_instant_meta");
      }

      public get_instant_meta_args getEmptyArgsInstance() {
        return new get_instant_meta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          public void onComplete(java.nio.ByteBuffer o) {
            get_instant_meta_result result = new get_instant_meta_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            get_instant_meta_result result = new get_instant_meta_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_instant_meta_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.get_instant_meta(args.db, args.tb, args.instant,resultHandler);
      }
    }

    public static class create_new_instant_time<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, create_new_instant_time_args, java.lang.String> {
      public create_new_instant_time() {
        super("create_new_instant_time");
      }

      public create_new_instant_time_args getEmptyArgsInstance() {
        return new create_new_instant_time_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            create_new_instant_time_result result = new create_new_instant_time_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            create_new_instant_time_result result = new create_new_instant_time_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, create_new_instant_time_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.create_new_instant_time(args.db, args.tb,resultHandler);
      }
    }

    public static class create_new_instant_with_time<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, create_new_instant_with_time_args, HoodieInstantChangeResult> {
      public create_new_instant_with_time() {
        super("create_new_instant_with_time");
      }

      public create_new_instant_with_time_args getEmptyArgsInstance() {
        return new create_new_instant_with_time_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult>() { 
          public void onComplete(HoodieInstantChangeResult o) {
            create_new_instant_with_time_result result = new create_new_instant_with_time_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            create_new_instant_with_time_result result = new create_new_instant_with_time_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, create_new_instant_with_time_args args, org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> resultHandler) throws org.apache.thrift.TException {
        iface.create_new_instant_with_time(args.db, args.tb, args.instant, args.content,resultHandler);
      }
    }

    public static class transition_instant_state<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, transition_instant_state_args, HoodieInstantChangeResult> {
      public transition_instant_state() {
        super("transition_instant_state");
      }

      public transition_instant_state_args getEmptyArgsInstance() {
        return new transition_instant_state_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult>() { 
          public void onComplete(HoodieInstantChangeResult o) {
            transition_instant_state_result result = new transition_instant_state_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            transition_instant_state_result result = new transition_instant_state_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, transition_instant_state_args args, org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> resultHandler) throws org.apache.thrift.TException {
        iface.transition_instant_state(args.db, args.tb, args.fromInstant, args.toInstant, args.metadata,resultHandler);
      }
    }

    public static class delete_instant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delete_instant_args, HoodieInstantChangeResult> {
      public delete_instant() {
        super("delete_instant");
      }

      public delete_instant_args getEmptyArgsInstance() {
        return new delete_instant_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult>() { 
          public void onComplete(HoodieInstantChangeResult o) {
            delete_instant_result result = new delete_instant_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            delete_instant_result result = new delete_instant_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delete_instant_args args, org.apache.thrift.async.AsyncMethodCallback<HoodieInstantChangeResult> resultHandler) throws org.apache.thrift.TException {
        iface.delete_instant(args.db, args.tb, args.instant,resultHandler);
      }
    }

    public static class list_files_in_partition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, list_files_in_partition_args, java.nio.ByteBuffer> {
      public list_files_in_partition() {
        super("list_files_in_partition");
      }

      public list_files_in_partition_args getEmptyArgsInstance() {
        return new list_files_in_partition_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer>() { 
          public void onComplete(java.nio.ByteBuffer o) {
            list_files_in_partition_result result = new list_files_in_partition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            list_files_in_partition_result result = new list_files_in_partition_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, list_files_in_partition_args args, org.apache.thrift.async.AsyncMethodCallback<java.nio.ByteBuffer> resultHandler) throws org.apache.thrift.TException {
        iface.list_files_in_partition(args.db, args.tb, args.partition, args.timestamp,resultHandler);
      }
    }

    public static class list_all_partitions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, list_all_partitions_args, java.util.List<java.lang.String>> {
      public list_all_partitions() {
        super("list_all_partitions");
      }

      public list_all_partitions_args getEmptyArgsInstance() {
        return new list_all_partitions_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            list_all_partitions_result result = new list_all_partitions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            list_all_partitions_result result = new list_all_partitions_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, list_all_partitions_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.list_all_partitions(args.db, args.tb,resultHandler);
      }
    }

  }

  public static class create_database_args implements org.apache.thrift.TBase<create_database_args, create_database_args._Fields>, java.io.Serializable, Cloneable, Comparable<create_database_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_database_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new create_database_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new create_database_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String db; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_database_args.class, metaDataMap);
    }

    public create_database_args() {
    }

    public create_database_args(
      java.lang.String db)
    {
      this();
      this.db = db;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_database_args(create_database_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
    }

    public create_database_args deepCopy() {
      return new create_database_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDb() {
      return this.db;
    }

    public create_database_args setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof create_database_args)
        return this.equals((create_database_args)that);
      return false;
    }

    public boolean equals(create_database_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
      if (isSetDb())
        hashCode = hashCode * 8191 + db.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(create_database_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("create_database_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_database_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_database_argsStandardScheme getScheme() {
        return new create_database_argsStandardScheme();
      }
    }

    private static class create_database_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<create_database_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_database_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.db = iprot.readString();
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_database_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_database_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_database_argsTupleScheme getScheme() {
        return new create_database_argsTupleScheme();
      }
    }

    private static class create_database_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<create_database_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_database_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDb()) {
          oprot.writeString(struct.db);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_database_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.db = iprot.readString();
          struct.setDbIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class create_database_result implements org.apache.thrift.TBase<create_database_result, create_database_result._Fields>, java.io.Serializable, Cloneable, Comparable<create_database_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_database_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new create_database_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new create_database_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_database_result.class, metaDataMap);
    }

    public create_database_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_database_result(create_database_result other) {
    }

    public create_database_result deepCopy() {
      return new create_database_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof create_database_result)
        return this.equals((create_database_result)that);
      return false;
    }

    public boolean equals(create_database_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(create_database_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("create_database_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_database_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_database_resultStandardScheme getScheme() {
        return new create_database_resultStandardScheme();
      }
    }

    private static class create_database_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<create_database_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_database_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_database_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_database_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_database_resultTupleScheme getScheme() {
        return new create_database_resultTupleScheme();
      }
    }

    private static class create_database_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<create_database_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_database_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_database_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class create_table_args implements org.apache.thrift.TBase<create_table_args, create_table_args._Fields>, java.io.Serializable, Cloneable, Comparable<create_table_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_table_args");

    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new create_table_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new create_table_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Table table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE((short)1, "table");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Table.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_table_args.class, metaDataMap);
    }

    public create_table_args() {
    }

    public create_table_args(
      Table table)
    {
      this();
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_table_args(create_table_args other) {
      if (other.isSetTable()) {
        this.table = new Table(other.table);
      }
    }

    public create_table_args deepCopy() {
      return new create_table_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Table getTable() {
      return this.table;
    }

    public create_table_args setTable(@org.apache.thrift.annotation.Nullable Table table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((Table)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof create_table_args)
        return this.equals((create_table_args)that);
      return false;
    }

    public boolean equals(create_table_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(create_table_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("create_table_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (table != null) {
        table.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_table_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_table_argsStandardScheme getScheme() {
        return new create_table_argsStandardScheme();
      }
    }

    private static class create_table_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<create_table_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_table_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.table = new Table();
                struct.table.read(iprot);
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_table_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          struct.table.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_table_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_table_argsTupleScheme getScheme() {
        return new create_table_argsTupleScheme();
      }
    }

    private static class create_table_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<create_table_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_table_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTable()) {
          struct.table.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_table_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.table = new Table();
          struct.table.read(iprot);
          struct.setTableIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class create_table_result implements org.apache.thrift.TBase<create_table_result, create_table_result._Fields>, java.io.Serializable, Cloneable, Comparable<create_table_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_table_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new create_table_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new create_table_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_table_result.class, metaDataMap);
    }

    public create_table_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_table_result(create_table_result other) {
    }

    public create_table_result deepCopy() {
      return new create_table_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof create_table_result)
        return this.equals((create_table_result)that);
      return false;
    }

    public boolean equals(create_table_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(create_table_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("create_table_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_table_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_table_resultStandardScheme getScheme() {
        return new create_table_resultStandardScheme();
      }
    }

    private static class create_table_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<create_table_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_table_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_table_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_table_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_table_resultTupleScheme getScheme() {
        return new create_table_resultTupleScheme();
      }
    }

    private static class create_table_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<create_table_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_table_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_table_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class get_table_args implements org.apache.thrift.TBase<get_table_args, get_table_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_table_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_table_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TB_FIELD_DESC = new org.apache.thrift.protocol.TField("tb", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new get_table_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new get_table_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String tb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TB((short)2, "tb");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TB
            return TB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TB, new org.apache.thrift.meta_data.FieldMetaData("tb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_table_args.class, metaDataMap);
    }

    public get_table_args() {
    }

    public get_table_args(
      java.lang.String db,
      java.lang.String tb)
    {
      this();
      this.db = db;
      this.tb = tb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_args(get_table_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTb()) {
        this.tb = other.tb;
      }
    }

    public get_table_args deepCopy() {
      return new get_table_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.tb = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDb() {
      return this.db;
    }

    public get_table_args setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTb() {
      return this.tb;
    }

    public get_table_args setTb(@org.apache.thrift.annotation.Nullable java.lang.String tb) {
      this.tb = tb;
      return this;
    }

    public void unsetTb() {
      this.tb = null;
    }

    /** Returns true if field tb is set (has been assigned a value) and false otherwise */
    public boolean isSetTb() {
      return this.tb != null;
    }

    public void setTbIsSet(boolean value) {
      if (!value) {
        this.tb = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((java.lang.String)value);
        }
        break;

      case TB:
        if (value == null) {
          unsetTb();
        } else {
          setTb((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TB:
        return getTb();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TB:
        return isSetTb();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_args)
        return this.equals((get_table_args)that);
      return false;
    }

    public boolean equals(get_table_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tb = true && this.isSetTb();
      boolean that_present_tb = true && that.isSetTb();
      if (this_present_tb || that_present_tb) {
        if (!(this_present_tb && that_present_tb))
          return false;
        if (!this.tb.equals(that.tb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
      if (isSetDb())
        hashCode = hashCode * 8191 + db.hashCode();

      hashCode = hashCode * 8191 + ((isSetTb()) ? 131071 : 524287);
      if (isSetTb())
        hashCode = hashCode * 8191 + tb.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(get_table_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTb()).compareTo(other.isSetTb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb, other.tb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("get_table_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tb:");
      if (this.tb == null) {
        sb.append("null");
      } else {
        sb.append(this.tb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_table_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public get_table_argsStandardScheme getScheme() {
        return new get_table_argsStandardScheme();
      }
    }

    private static class get_table_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<get_table_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.db = iprot.readString();
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tb = iprot.readString();
                struct.setTbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
        if (struct.tb != null) {
          oprot.writeFieldBegin(TB_FIELD_DESC);
          oprot.writeString(struct.tb);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_table_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public get_table_argsTupleScheme getScheme() {
        return new get_table_argsTupleScheme();
      }
    }

    private static class get_table_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<get_table_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_table_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTb()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDb()) {
          oprot.writeString(struct.db);
        }
        if (struct.isSetTb()) {
          oprot.writeString(struct.tb);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_table_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.db = iprot.readString();
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tb = iprot.readString();
          struct.setTbIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class get_table_result implements org.apache.thrift.TBase<get_table_result, get_table_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_table_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_table_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new get_table_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new get_table_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Table success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Table.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_table_result.class, metaDataMap);
    }

    public get_table_result() {
    }

    public get_table_result(
      Table success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_result(get_table_result other) {
      if (other.isSetSuccess()) {
        this.success = new Table(other.success);
      }
    }

    public get_table_result deepCopy() {
      return new get_table_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Table getSuccess() {
      return this.success;
    }

    public get_table_result setSuccess(@org.apache.thrift.annotation.Nullable Table success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Table)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_result)
        return this.equals((get_table_result)that);
      return false;
    }

    public boolean equals(get_table_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(get_table_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("get_table_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_table_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public get_table_resultStandardScheme getScheme() {
        return new get_table_resultStandardScheme();
      }
    }

    private static class get_table_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<get_table_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_table_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Table();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_table_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_table_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public get_table_resultTupleScheme getScheme() {
        return new get_table_resultTupleScheme();
      }
    }

    private static class get_table_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<get_table_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_table_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_table_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Table();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class list_instants_args implements org.apache.thrift.TBase<list_instants_args, list_instants_args._Fields>, java.io.Serializable, Cloneable, Comparable<list_instants_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_instants_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TB_FIELD_DESC = new org.apache.thrift.protocol.TField("tb", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new list_instants_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new list_instants_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String tb; // required
    public int num; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TB((short)2, "tb"),
      NUM((short)3, "num");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TB
            return TB;
          case 3: // NUM
            return NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TB, new org.apache.thrift.meta_data.FieldMetaData("tb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_instants_args.class, metaDataMap);
    }

    public list_instants_args() {
    }

    public list_instants_args(
      java.lang.String db,
      java.lang.String tb,
      int num)
    {
      this();
      this.db = db;
      this.tb = tb;
      this.num = num;
      setNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_instants_args(list_instants_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTb()) {
        this.tb = other.tb;
      }
      this.num = other.num;
    }

    public list_instants_args deepCopy() {
      return new list_instants_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.tb = null;
      setNumIsSet(false);
      this.num = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDb() {
      return this.db;
    }

    public list_instants_args setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTb() {
      return this.tb;
    }

    public list_instants_args setTb(@org.apache.thrift.annotation.Nullable java.lang.String tb) {
      this.tb = tb;
      return this;
    }

    public void unsetTb() {
      this.tb = null;
    }

    /** Returns true if field tb is set (has been assigned a value) and false otherwise */
    public boolean isSetTb() {
      return this.tb != null;
    }

    public void setTbIsSet(boolean value) {
      if (!value) {
        this.tb = null;
      }
    }

    public int getNum() {
      return this.num;
    }

    public list_instants_args setNum(int num) {
      this.num = num;
      setNumIsSet(true);
      return this;
    }

    public void unsetNum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    public void setNumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((java.lang.String)value);
        }
        break;

      case TB:
        if (value == null) {
          unsetTb();
        } else {
          setTb((java.lang.String)value);
        }
        break;

      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TB:
        return getTb();

      case NUM:
        return getNum();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TB:
        return isSetTb();
      case NUM:
        return isSetNum();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof list_instants_args)
        return this.equals((list_instants_args)that);
      return false;
    }

    public boolean equals(list_instants_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tb = true && this.isSetTb();
      boolean that_present_tb = true && that.isSetTb();
      if (this_present_tb || that_present_tb) {
        if (!(this_present_tb && that_present_tb))
          return false;
        if (!this.tb.equals(that.tb))
          return false;
      }

      boolean this_present_num = true;
      boolean that_present_num = true;
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (this.num != that.num)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
      if (isSetDb())
        hashCode = hashCode * 8191 + db.hashCode();

      hashCode = hashCode * 8191 + ((isSetTb()) ? 131071 : 524287);
      if (isSetTb())
        hashCode = hashCode * 8191 + tb.hashCode();

      hashCode = hashCode * 8191 + num;

      return hashCode;
    }

    @Override
    public int compareTo(list_instants_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTb()).compareTo(other.isSetTb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb, other.tb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("list_instants_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tb:");
      if (this.tb == null) {
        sb.append("null");
      } else {
        sb.append(this.tb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("num:");
      sb.append(this.num);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_instants_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_instants_argsStandardScheme getScheme() {
        return new list_instants_argsStandardScheme();
      }
    }

    private static class list_instants_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<list_instants_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_instants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.db = iprot.readString();
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tb = iprot.readString();
                struct.setTbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num = iprot.readI32();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_instants_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
        if (struct.tb != null) {
          oprot.writeFieldBegin(TB_FIELD_DESC);
          oprot.writeString(struct.tb);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_instants_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_instants_argsTupleScheme getScheme() {
        return new list_instants_argsTupleScheme();
      }
    }

    private static class list_instants_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<list_instants_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_instants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTb()) {
          optionals.set(1);
        }
        if (struct.isSetNum()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDb()) {
          oprot.writeString(struct.db);
        }
        if (struct.isSetTb()) {
          oprot.writeString(struct.tb);
        }
        if (struct.isSetNum()) {
          oprot.writeI32(struct.num);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_instants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.db = iprot.readString();
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tb = iprot.readString();
          struct.setTbIsSet(true);
        }
        if (incoming.get(2)) {
          struct.num = iprot.readI32();
          struct.setNumIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class list_instants_result implements org.apache.thrift.TBase<list_instants_result, list_instants_result._Fields>, java.io.Serializable, Cloneable, Comparable<list_instants_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_instants_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new list_instants_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new list_instants_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<THoodieInstant> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THoodieInstant.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_instants_result.class, metaDataMap);
    }

    public list_instants_result() {
    }

    public list_instants_result(
      java.util.List<THoodieInstant> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_instants_result(list_instants_result other) {
      if (other.isSetSuccess()) {
        java.util.List<THoodieInstant> __this__success = new java.util.ArrayList<THoodieInstant>(other.success.size());
        for (THoodieInstant other_element : other.success) {
          __this__success.add(new THoodieInstant(other_element));
        }
        this.success = __this__success;
      }
    }

    public list_instants_result deepCopy() {
      return new list_instants_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<THoodieInstant> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(THoodieInstant elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<THoodieInstant>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<THoodieInstant> getSuccess() {
      return this.success;
    }

    public list_instants_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<THoodieInstant> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<THoodieInstant>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof list_instants_result)
        return this.equals((list_instants_result)that);
      return false;
    }

    public boolean equals(list_instants_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(list_instants_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("list_instants_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_instants_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_instants_resultStandardScheme getScheme() {
        return new list_instants_resultStandardScheme();
      }
    }

    private static class list_instants_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<list_instants_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_instants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<THoodieInstant>(_list18.size);
                  @org.apache.thrift.annotation.Nullable THoodieInstant _elem19;
                  for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                  {
                    _elem19 = new THoodieInstant();
                    _elem19.read(iprot);
                    struct.success.add(_elem19);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_instants_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (THoodieInstant _iter21 : struct.success)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_instants_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_instants_resultTupleScheme getScheme() {
        return new list_instants_resultTupleScheme();
      }
    }

    private static class list_instants_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<list_instants_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_instants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (THoodieInstant _iter22 : struct.success)
            {
              _iter22.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_instants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<THoodieInstant>(_list23.size);
            @org.apache.thrift.annotation.Nullable THoodieInstant _elem24;
            for (int _i25 = 0; _i25 < _list23.size; ++_i25)
            {
              _elem24 = new THoodieInstant();
              _elem24.read(iprot);
              struct.success.add(_elem24);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class get_instant_meta_args implements org.apache.thrift.TBase<get_instant_meta_args, get_instant_meta_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_instant_meta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_instant_meta_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TB_FIELD_DESC = new org.apache.thrift.protocol.TField("tb", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INSTANT_FIELD_DESC = new org.apache.thrift.protocol.TField("instant", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new get_instant_meta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new get_instant_meta_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String tb; // required
    public @org.apache.thrift.annotation.Nullable THoodieInstant instant; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TB((short)2, "tb"),
      INSTANT((short)3, "instant");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TB
            return TB;
          case 3: // INSTANT
            return INSTANT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TB, new org.apache.thrift.meta_data.FieldMetaData("tb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INSTANT, new org.apache.thrift.meta_data.FieldMetaData("instant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THoodieInstant.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_instant_meta_args.class, metaDataMap);
    }

    public get_instant_meta_args() {
    }

    public get_instant_meta_args(
      java.lang.String db,
      java.lang.String tb,
      THoodieInstant instant)
    {
      this();
      this.db = db;
      this.tb = tb;
      this.instant = instant;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_instant_meta_args(get_instant_meta_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTb()) {
        this.tb = other.tb;
      }
      if (other.isSetInstant()) {
        this.instant = new THoodieInstant(other.instant);
      }
    }

    public get_instant_meta_args deepCopy() {
      return new get_instant_meta_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.tb = null;
      this.instant = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDb() {
      return this.db;
    }

    public get_instant_meta_args setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTb() {
      return this.tb;
    }

    public get_instant_meta_args setTb(@org.apache.thrift.annotation.Nullable java.lang.String tb) {
      this.tb = tb;
      return this;
    }

    public void unsetTb() {
      this.tb = null;
    }

    /** Returns true if field tb is set (has been assigned a value) and false otherwise */
    public boolean isSetTb() {
      return this.tb != null;
    }

    public void setTbIsSet(boolean value) {
      if (!value) {
        this.tb = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public THoodieInstant getInstant() {
      return this.instant;
    }

    public get_instant_meta_args setInstant(@org.apache.thrift.annotation.Nullable THoodieInstant instant) {
      this.instant = instant;
      return this;
    }

    public void unsetInstant() {
      this.instant = null;
    }

    /** Returns true if field instant is set (has been assigned a value) and false otherwise */
    public boolean isSetInstant() {
      return this.instant != null;
    }

    public void setInstantIsSet(boolean value) {
      if (!value) {
        this.instant = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((java.lang.String)value);
        }
        break;

      case TB:
        if (value == null) {
          unsetTb();
        } else {
          setTb((java.lang.String)value);
        }
        break;

      case INSTANT:
        if (value == null) {
          unsetInstant();
        } else {
          setInstant((THoodieInstant)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TB:
        return getTb();

      case INSTANT:
        return getInstant();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TB:
        return isSetTb();
      case INSTANT:
        return isSetInstant();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof get_instant_meta_args)
        return this.equals((get_instant_meta_args)that);
      return false;
    }

    public boolean equals(get_instant_meta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tb = true && this.isSetTb();
      boolean that_present_tb = true && that.isSetTb();
      if (this_present_tb || that_present_tb) {
        if (!(this_present_tb && that_present_tb))
          return false;
        if (!this.tb.equals(that.tb))
          return false;
      }

      boolean this_present_instant = true && this.isSetInstant();
      boolean that_present_instant = true && that.isSetInstant();
      if (this_present_instant || that_present_instant) {
        if (!(this_present_instant && that_present_instant))
          return false;
        if (!this.instant.equals(that.instant))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
      if (isSetDb())
        hashCode = hashCode * 8191 + db.hashCode();

      hashCode = hashCode * 8191 + ((isSetTb()) ? 131071 : 524287);
      if (isSetTb())
        hashCode = hashCode * 8191 + tb.hashCode();

      hashCode = hashCode * 8191 + ((isSetInstant()) ? 131071 : 524287);
      if (isSetInstant())
        hashCode = hashCode * 8191 + instant.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(get_instant_meta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTb()).compareTo(other.isSetTb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb, other.tb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInstant()).compareTo(other.isSetInstant());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstant()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instant, other.instant);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("get_instant_meta_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tb:");
      if (this.tb == null) {
        sb.append("null");
      } else {
        sb.append(this.tb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("instant:");
      if (this.instant == null) {
        sb.append("null");
      } else {
        sb.append(this.instant);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (instant != null) {
        instant.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_instant_meta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public get_instant_meta_argsStandardScheme getScheme() {
        return new get_instant_meta_argsStandardScheme();
      }
    }

    private static class get_instant_meta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<get_instant_meta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_instant_meta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.db = iprot.readString();
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tb = iprot.readString();
                struct.setTbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INSTANT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.instant = new THoodieInstant();
                struct.instant.read(iprot);
                struct.setInstantIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_instant_meta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
        if (struct.tb != null) {
          oprot.writeFieldBegin(TB_FIELD_DESC);
          oprot.writeString(struct.tb);
          oprot.writeFieldEnd();
        }
        if (struct.instant != null) {
          oprot.writeFieldBegin(INSTANT_FIELD_DESC);
          struct.instant.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_instant_meta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public get_instant_meta_argsTupleScheme getScheme() {
        return new get_instant_meta_argsTupleScheme();
      }
    }

    private static class get_instant_meta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<get_instant_meta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_instant_meta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTb()) {
          optionals.set(1);
        }
        if (struct.isSetInstant()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDb()) {
          oprot.writeString(struct.db);
        }
        if (struct.isSetTb()) {
          oprot.writeString(struct.tb);
        }
        if (struct.isSetInstant()) {
          struct.instant.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_instant_meta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.db = iprot.readString();
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tb = iprot.readString();
          struct.setTbIsSet(true);
        }
        if (incoming.get(2)) {
          struct.instant = new THoodieInstant();
          struct.instant.read(iprot);
          struct.setInstantIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class get_instant_meta_result implements org.apache.thrift.TBase<get_instant_meta_result, get_instant_meta_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_instant_meta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_instant_meta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new get_instant_meta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new get_instant_meta_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_instant_meta_result.class, metaDataMap);
    }

    public get_instant_meta_result() {
    }

    public get_instant_meta_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_instant_meta_result(get_instant_meta_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public get_instant_meta_result deepCopy() {
      return new get_instant_meta_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public get_instant_meta_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public get_instant_meta_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof get_instant_meta_result)
        return this.equals((get_instant_meta_result)that);
      return false;
    }

    public boolean equals(get_instant_meta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(get_instant_meta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("get_instant_meta_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_instant_meta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public get_instant_meta_resultStandardScheme getScheme() {
        return new get_instant_meta_resultStandardScheme();
      }
    }

    private static class get_instant_meta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<get_instant_meta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_instant_meta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_instant_meta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_instant_meta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public get_instant_meta_resultTupleScheme getScheme() {
        return new get_instant_meta_resultTupleScheme();
      }
    }

    private static class get_instant_meta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<get_instant_meta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_instant_meta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_instant_meta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class create_new_instant_time_args implements org.apache.thrift.TBase<create_new_instant_time_args, create_new_instant_time_args._Fields>, java.io.Serializable, Cloneable, Comparable<create_new_instant_time_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_new_instant_time_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TB_FIELD_DESC = new org.apache.thrift.protocol.TField("tb", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new create_new_instant_time_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new create_new_instant_time_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String tb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TB((short)2, "tb");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TB
            return TB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TB, new org.apache.thrift.meta_data.FieldMetaData("tb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_new_instant_time_args.class, metaDataMap);
    }

    public create_new_instant_time_args() {
    }

    public create_new_instant_time_args(
      java.lang.String db,
      java.lang.String tb)
    {
      this();
      this.db = db;
      this.tb = tb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_new_instant_time_args(create_new_instant_time_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTb()) {
        this.tb = other.tb;
      }
    }

    public create_new_instant_time_args deepCopy() {
      return new create_new_instant_time_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.tb = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDb() {
      return this.db;
    }

    public create_new_instant_time_args setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTb() {
      return this.tb;
    }

    public create_new_instant_time_args setTb(@org.apache.thrift.annotation.Nullable java.lang.String tb) {
      this.tb = tb;
      return this;
    }

    public void unsetTb() {
      this.tb = null;
    }

    /** Returns true if field tb is set (has been assigned a value) and false otherwise */
    public boolean isSetTb() {
      return this.tb != null;
    }

    public void setTbIsSet(boolean value) {
      if (!value) {
        this.tb = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((java.lang.String)value);
        }
        break;

      case TB:
        if (value == null) {
          unsetTb();
        } else {
          setTb((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TB:
        return getTb();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TB:
        return isSetTb();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof create_new_instant_time_args)
        return this.equals((create_new_instant_time_args)that);
      return false;
    }

    public boolean equals(create_new_instant_time_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tb = true && this.isSetTb();
      boolean that_present_tb = true && that.isSetTb();
      if (this_present_tb || that_present_tb) {
        if (!(this_present_tb && that_present_tb))
          return false;
        if (!this.tb.equals(that.tb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
      if (isSetDb())
        hashCode = hashCode * 8191 + db.hashCode();

      hashCode = hashCode * 8191 + ((isSetTb()) ? 131071 : 524287);
      if (isSetTb())
        hashCode = hashCode * 8191 + tb.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(create_new_instant_time_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTb()).compareTo(other.isSetTb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb, other.tb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("create_new_instant_time_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tb:");
      if (this.tb == null) {
        sb.append("null");
      } else {
        sb.append(this.tb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_new_instant_time_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_new_instant_time_argsStandardScheme getScheme() {
        return new create_new_instant_time_argsStandardScheme();
      }
    }

    private static class create_new_instant_time_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<create_new_instant_time_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_new_instant_time_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.db = iprot.readString();
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tb = iprot.readString();
                struct.setTbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_new_instant_time_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
        if (struct.tb != null) {
          oprot.writeFieldBegin(TB_FIELD_DESC);
          oprot.writeString(struct.tb);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_new_instant_time_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_new_instant_time_argsTupleScheme getScheme() {
        return new create_new_instant_time_argsTupleScheme();
      }
    }

    private static class create_new_instant_time_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<create_new_instant_time_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_new_instant_time_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTb()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDb()) {
          oprot.writeString(struct.db);
        }
        if (struct.isSetTb()) {
          oprot.writeString(struct.tb);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_new_instant_time_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.db = iprot.readString();
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tb = iprot.readString();
          struct.setTbIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class create_new_instant_time_result implements org.apache.thrift.TBase<create_new_instant_time_result, create_new_instant_time_result._Fields>, java.io.Serializable, Cloneable, Comparable<create_new_instant_time_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_new_instant_time_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new create_new_instant_time_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new create_new_instant_time_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_new_instant_time_result.class, metaDataMap);
    }

    public create_new_instant_time_result() {
    }

    public create_new_instant_time_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_new_instant_time_result(create_new_instant_time_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public create_new_instant_time_result deepCopy() {
      return new create_new_instant_time_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public create_new_instant_time_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof create_new_instant_time_result)
        return this.equals((create_new_instant_time_result)that);
      return false;
    }

    public boolean equals(create_new_instant_time_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(create_new_instant_time_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("create_new_instant_time_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_new_instant_time_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_new_instant_time_resultStandardScheme getScheme() {
        return new create_new_instant_time_resultStandardScheme();
      }
    }

    private static class create_new_instant_time_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<create_new_instant_time_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_new_instant_time_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_new_instant_time_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_new_instant_time_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_new_instant_time_resultTupleScheme getScheme() {
        return new create_new_instant_time_resultTupleScheme();
      }
    }

    private static class create_new_instant_time_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<create_new_instant_time_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_new_instant_time_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_new_instant_time_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class create_new_instant_with_time_args implements org.apache.thrift.TBase<create_new_instant_with_time_args, create_new_instant_with_time_args._Fields>, java.io.Serializable, Cloneable, Comparable<create_new_instant_with_time_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_new_instant_with_time_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TB_FIELD_DESC = new org.apache.thrift.protocol.TField("tb", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INSTANT_FIELD_DESC = new org.apache.thrift.protocol.TField("instant", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new create_new_instant_with_time_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new create_new_instant_with_time_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String tb; // required
    public @org.apache.thrift.annotation.Nullable THoodieInstant instant; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer content; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TB((short)2, "tb"),
      INSTANT((short)3, "instant"),
      CONTENT((short)4, "content");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TB
            return TB;
          case 3: // INSTANT
            return INSTANT;
          case 4: // CONTENT
            return CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TB, new org.apache.thrift.meta_data.FieldMetaData("tb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INSTANT, new org.apache.thrift.meta_data.FieldMetaData("instant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THoodieInstant.class)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_new_instant_with_time_args.class, metaDataMap);
    }

    public create_new_instant_with_time_args() {
    }

    public create_new_instant_with_time_args(
      java.lang.String db,
      java.lang.String tb,
      THoodieInstant instant,
      java.nio.ByteBuffer content)
    {
      this();
      this.db = db;
      this.tb = tb;
      this.instant = instant;
      this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_new_instant_with_time_args(create_new_instant_with_time_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTb()) {
        this.tb = other.tb;
      }
      if (other.isSetInstant()) {
        this.instant = new THoodieInstant(other.instant);
      }
      if (other.isSetContent()) {
        this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
      }
    }

    public create_new_instant_with_time_args deepCopy() {
      return new create_new_instant_with_time_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.tb = null;
      this.instant = null;
      this.content = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDb() {
      return this.db;
    }

    public create_new_instant_with_time_args setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTb() {
      return this.tb;
    }

    public create_new_instant_with_time_args setTb(@org.apache.thrift.annotation.Nullable java.lang.String tb) {
      this.tb = tb;
      return this;
    }

    public void unsetTb() {
      this.tb = null;
    }

    /** Returns true if field tb is set (has been assigned a value) and false otherwise */
    public boolean isSetTb() {
      return this.tb != null;
    }

    public void setTbIsSet(boolean value) {
      if (!value) {
        this.tb = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public THoodieInstant getInstant() {
      return this.instant;
    }

    public create_new_instant_with_time_args setInstant(@org.apache.thrift.annotation.Nullable THoodieInstant instant) {
      this.instant = instant;
      return this;
    }

    public void unsetInstant() {
      this.instant = null;
    }

    /** Returns true if field instant is set (has been assigned a value) and false otherwise */
    public boolean isSetInstant() {
      return this.instant != null;
    }

    public void setInstantIsSet(boolean value) {
      if (!value) {
        this.instant = null;
      }
    }

    public byte[] getContent() {
      setContent(org.apache.thrift.TBaseHelper.rightSize(content));
      return content == null ? null : content.array();
    }

    public java.nio.ByteBuffer bufferForContent() {
      return org.apache.thrift.TBaseHelper.copyBinary(content);
    }

    public create_new_instant_with_time_args setContent(byte[] content) {
      this.content = content == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(content.clone());
      return this;
    }

    public create_new_instant_with_time_args setContent(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer content) {
      this.content = org.apache.thrift.TBaseHelper.copyBinary(content);
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((java.lang.String)value);
        }
        break;

      case TB:
        if (value == null) {
          unsetTb();
        } else {
          setTb((java.lang.String)value);
        }
        break;

      case INSTANT:
        if (value == null) {
          unsetInstant();
        } else {
          setInstant((THoodieInstant)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          if (value instanceof byte[]) {
            setContent((byte[])value);
          } else {
            setContent((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TB:
        return getTb();

      case INSTANT:
        return getInstant();

      case CONTENT:
        return getContent();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TB:
        return isSetTb();
      case INSTANT:
        return isSetInstant();
      case CONTENT:
        return isSetContent();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof create_new_instant_with_time_args)
        return this.equals((create_new_instant_with_time_args)that);
      return false;
    }

    public boolean equals(create_new_instant_with_time_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tb = true && this.isSetTb();
      boolean that_present_tb = true && that.isSetTb();
      if (this_present_tb || that_present_tb) {
        if (!(this_present_tb && that_present_tb))
          return false;
        if (!this.tb.equals(that.tb))
          return false;
      }

      boolean this_present_instant = true && this.isSetInstant();
      boolean that_present_instant = true && that.isSetInstant();
      if (this_present_instant || that_present_instant) {
        if (!(this_present_instant && that_present_instant))
          return false;
        if (!this.instant.equals(that.instant))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
      if (isSetDb())
        hashCode = hashCode * 8191 + db.hashCode();

      hashCode = hashCode * 8191 + ((isSetTb()) ? 131071 : 524287);
      if (isSetTb())
        hashCode = hashCode * 8191 + tb.hashCode();

      hashCode = hashCode * 8191 + ((isSetInstant()) ? 131071 : 524287);
      if (isSetInstant())
        hashCode = hashCode * 8191 + instant.hashCode();

      hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
      if (isSetContent())
        hashCode = hashCode * 8191 + content.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(create_new_instant_with_time_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTb()).compareTo(other.isSetTb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb, other.tb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInstant()).compareTo(other.isSetInstant());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstant()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instant, other.instant);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("create_new_instant_with_time_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tb:");
      if (this.tb == null) {
        sb.append("null");
      } else {
        sb.append(this.tb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("instant:");
      if (this.instant == null) {
        sb.append("null");
      } else {
        sb.append(this.instant);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.content, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (instant != null) {
        instant.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_new_instant_with_time_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_new_instant_with_time_argsStandardScheme getScheme() {
        return new create_new_instant_with_time_argsStandardScheme();
      }
    }

    private static class create_new_instant_with_time_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<create_new_instant_with_time_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_new_instant_with_time_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.db = iprot.readString();
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tb = iprot.readString();
                struct.setTbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INSTANT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.instant = new THoodieInstant();
                struct.instant.read(iprot);
                struct.setInstantIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readBinary();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_new_instant_with_time_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
        if (struct.tb != null) {
          oprot.writeFieldBegin(TB_FIELD_DESC);
          oprot.writeString(struct.tb);
          oprot.writeFieldEnd();
        }
        if (struct.instant != null) {
          oprot.writeFieldBegin(INSTANT_FIELD_DESC);
          struct.instant.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeBinary(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_new_instant_with_time_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_new_instant_with_time_argsTupleScheme getScheme() {
        return new create_new_instant_with_time_argsTupleScheme();
      }
    }

    private static class create_new_instant_with_time_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<create_new_instant_with_time_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_new_instant_with_time_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTb()) {
          optionals.set(1);
        }
        if (struct.isSetInstant()) {
          optionals.set(2);
        }
        if (struct.isSetContent()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDb()) {
          oprot.writeString(struct.db);
        }
        if (struct.isSetTb()) {
          oprot.writeString(struct.tb);
        }
        if (struct.isSetInstant()) {
          struct.instant.write(oprot);
        }
        if (struct.isSetContent()) {
          oprot.writeBinary(struct.content);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_new_instant_with_time_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.db = iprot.readString();
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tb = iprot.readString();
          struct.setTbIsSet(true);
        }
        if (incoming.get(2)) {
          struct.instant = new THoodieInstant();
          struct.instant.read(iprot);
          struct.setInstantIsSet(true);
        }
        if (incoming.get(3)) {
          struct.content = iprot.readBinary();
          struct.setContentIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class create_new_instant_with_time_result implements org.apache.thrift.TBase<create_new_instant_with_time_result, create_new_instant_with_time_result._Fields>, java.io.Serializable, Cloneable, Comparable<create_new_instant_with_time_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_new_instant_with_time_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new create_new_instant_with_time_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new create_new_instant_with_time_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable HoodieInstantChangeResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HoodieInstantChangeResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_new_instant_with_time_result.class, metaDataMap);
    }

    public create_new_instant_with_time_result() {
    }

    public create_new_instant_with_time_result(
      HoodieInstantChangeResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_new_instant_with_time_result(create_new_instant_with_time_result other) {
      if (other.isSetSuccess()) {
        this.success = new HoodieInstantChangeResult(other.success);
      }
    }

    public create_new_instant_with_time_result deepCopy() {
      return new create_new_instant_with_time_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public HoodieInstantChangeResult getSuccess() {
      return this.success;
    }

    public create_new_instant_with_time_result setSuccess(@org.apache.thrift.annotation.Nullable HoodieInstantChangeResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HoodieInstantChangeResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof create_new_instant_with_time_result)
        return this.equals((create_new_instant_with_time_result)that);
      return false;
    }

    public boolean equals(create_new_instant_with_time_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(create_new_instant_with_time_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("create_new_instant_with_time_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_new_instant_with_time_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_new_instant_with_time_resultStandardScheme getScheme() {
        return new create_new_instant_with_time_resultStandardScheme();
      }
    }

    private static class create_new_instant_with_time_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<create_new_instant_with_time_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_new_instant_with_time_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HoodieInstantChangeResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_new_instant_with_time_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_new_instant_with_time_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_new_instant_with_time_resultTupleScheme getScheme() {
        return new create_new_instant_with_time_resultTupleScheme();
      }
    }

    private static class create_new_instant_with_time_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<create_new_instant_with_time_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_new_instant_with_time_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_new_instant_with_time_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HoodieInstantChangeResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class transition_instant_state_args implements org.apache.thrift.TBase<transition_instant_state_args, transition_instant_state_args._Fields>, java.io.Serializable, Cloneable, Comparable<transition_instant_state_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transition_instant_state_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TB_FIELD_DESC = new org.apache.thrift.protocol.TField("tb", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FROM_INSTANT_FIELD_DESC = new org.apache.thrift.protocol.TField("fromInstant", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TO_INSTANT_FIELD_DESC = new org.apache.thrift.protocol.TField("toInstant", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new transition_instant_state_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new transition_instant_state_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String tb; // required
    public @org.apache.thrift.annotation.Nullable THoodieInstant fromInstant; // required
    public @org.apache.thrift.annotation.Nullable THoodieInstant toInstant; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer metadata; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TB((short)2, "tb"),
      FROM_INSTANT((short)3, "fromInstant"),
      TO_INSTANT((short)4, "toInstant"),
      METADATA((short)5, "metadata");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TB
            return TB;
          case 3: // FROM_INSTANT
            return FROM_INSTANT;
          case 4: // TO_INSTANT
            return TO_INSTANT;
          case 5: // METADATA
            return METADATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TB, new org.apache.thrift.meta_data.FieldMetaData("tb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FROM_INSTANT, new org.apache.thrift.meta_data.FieldMetaData("fromInstant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THoodieInstant.class)));
      tmpMap.put(_Fields.TO_INSTANT, new org.apache.thrift.meta_data.FieldMetaData("toInstant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THoodieInstant.class)));
      tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transition_instant_state_args.class, metaDataMap);
    }

    public transition_instant_state_args() {
    }

    public transition_instant_state_args(
      java.lang.String db,
      java.lang.String tb,
      THoodieInstant fromInstant,
      THoodieInstant toInstant,
      java.nio.ByteBuffer metadata)
    {
      this();
      this.db = db;
      this.tb = tb;
      this.fromInstant = fromInstant;
      this.toInstant = toInstant;
      this.metadata = org.apache.thrift.TBaseHelper.copyBinary(metadata);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transition_instant_state_args(transition_instant_state_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTb()) {
        this.tb = other.tb;
      }
      if (other.isSetFromInstant()) {
        this.fromInstant = new THoodieInstant(other.fromInstant);
      }
      if (other.isSetToInstant()) {
        this.toInstant = new THoodieInstant(other.toInstant);
      }
      if (other.isSetMetadata()) {
        this.metadata = org.apache.thrift.TBaseHelper.copyBinary(other.metadata);
      }
    }

    public transition_instant_state_args deepCopy() {
      return new transition_instant_state_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.tb = null;
      this.fromInstant = null;
      this.toInstant = null;
      this.metadata = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDb() {
      return this.db;
    }

    public transition_instant_state_args setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTb() {
      return this.tb;
    }

    public transition_instant_state_args setTb(@org.apache.thrift.annotation.Nullable java.lang.String tb) {
      this.tb = tb;
      return this;
    }

    public void unsetTb() {
      this.tb = null;
    }

    /** Returns true if field tb is set (has been assigned a value) and false otherwise */
    public boolean isSetTb() {
      return this.tb != null;
    }

    public void setTbIsSet(boolean value) {
      if (!value) {
        this.tb = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public THoodieInstant getFromInstant() {
      return this.fromInstant;
    }

    public transition_instant_state_args setFromInstant(@org.apache.thrift.annotation.Nullable THoodieInstant fromInstant) {
      this.fromInstant = fromInstant;
      return this;
    }

    public void unsetFromInstant() {
      this.fromInstant = null;
    }

    /** Returns true if field fromInstant is set (has been assigned a value) and false otherwise */
    public boolean isSetFromInstant() {
      return this.fromInstant != null;
    }

    public void setFromInstantIsSet(boolean value) {
      if (!value) {
        this.fromInstant = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public THoodieInstant getToInstant() {
      return this.toInstant;
    }

    public transition_instant_state_args setToInstant(@org.apache.thrift.annotation.Nullable THoodieInstant toInstant) {
      this.toInstant = toInstant;
      return this;
    }

    public void unsetToInstant() {
      this.toInstant = null;
    }

    /** Returns true if field toInstant is set (has been assigned a value) and false otherwise */
    public boolean isSetToInstant() {
      return this.toInstant != null;
    }

    public void setToInstantIsSet(boolean value) {
      if (!value) {
        this.toInstant = null;
      }
    }

    public byte[] getMetadata() {
      setMetadata(org.apache.thrift.TBaseHelper.rightSize(metadata));
      return metadata == null ? null : metadata.array();
    }

    public java.nio.ByteBuffer bufferForMetadata() {
      return org.apache.thrift.TBaseHelper.copyBinary(metadata);
    }

    public transition_instant_state_args setMetadata(byte[] metadata) {
      this.metadata = metadata == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(metadata.clone());
      return this;
    }

    public transition_instant_state_args setMetadata(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer metadata) {
      this.metadata = org.apache.thrift.TBaseHelper.copyBinary(metadata);
      return this;
    }

    public void unsetMetadata() {
      this.metadata = null;
    }

    /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
    public boolean isSetMetadata() {
      return this.metadata != null;
    }

    public void setMetadataIsSet(boolean value) {
      if (!value) {
        this.metadata = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((java.lang.String)value);
        }
        break;

      case TB:
        if (value == null) {
          unsetTb();
        } else {
          setTb((java.lang.String)value);
        }
        break;

      case FROM_INSTANT:
        if (value == null) {
          unsetFromInstant();
        } else {
          setFromInstant((THoodieInstant)value);
        }
        break;

      case TO_INSTANT:
        if (value == null) {
          unsetToInstant();
        } else {
          setToInstant((THoodieInstant)value);
        }
        break;

      case METADATA:
        if (value == null) {
          unsetMetadata();
        } else {
          if (value instanceof byte[]) {
            setMetadata((byte[])value);
          } else {
            setMetadata((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TB:
        return getTb();

      case FROM_INSTANT:
        return getFromInstant();

      case TO_INSTANT:
        return getToInstant();

      case METADATA:
        return getMetadata();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TB:
        return isSetTb();
      case FROM_INSTANT:
        return isSetFromInstant();
      case TO_INSTANT:
        return isSetToInstant();
      case METADATA:
        return isSetMetadata();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof transition_instant_state_args)
        return this.equals((transition_instant_state_args)that);
      return false;
    }

    public boolean equals(transition_instant_state_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tb = true && this.isSetTb();
      boolean that_present_tb = true && that.isSetTb();
      if (this_present_tb || that_present_tb) {
        if (!(this_present_tb && that_present_tb))
          return false;
        if (!this.tb.equals(that.tb))
          return false;
      }

      boolean this_present_fromInstant = true && this.isSetFromInstant();
      boolean that_present_fromInstant = true && that.isSetFromInstant();
      if (this_present_fromInstant || that_present_fromInstant) {
        if (!(this_present_fromInstant && that_present_fromInstant))
          return false;
        if (!this.fromInstant.equals(that.fromInstant))
          return false;
      }

      boolean this_present_toInstant = true && this.isSetToInstant();
      boolean that_present_toInstant = true && that.isSetToInstant();
      if (this_present_toInstant || that_present_toInstant) {
        if (!(this_present_toInstant && that_present_toInstant))
          return false;
        if (!this.toInstant.equals(that.toInstant))
          return false;
      }

      boolean this_present_metadata = true && this.isSetMetadata();
      boolean that_present_metadata = true && that.isSetMetadata();
      if (this_present_metadata || that_present_metadata) {
        if (!(this_present_metadata && that_present_metadata))
          return false;
        if (!this.metadata.equals(that.metadata))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
      if (isSetDb())
        hashCode = hashCode * 8191 + db.hashCode();

      hashCode = hashCode * 8191 + ((isSetTb()) ? 131071 : 524287);
      if (isSetTb())
        hashCode = hashCode * 8191 + tb.hashCode();

      hashCode = hashCode * 8191 + ((isSetFromInstant()) ? 131071 : 524287);
      if (isSetFromInstant())
        hashCode = hashCode * 8191 + fromInstant.hashCode();

      hashCode = hashCode * 8191 + ((isSetToInstant()) ? 131071 : 524287);
      if (isSetToInstant())
        hashCode = hashCode * 8191 + toInstant.hashCode();

      hashCode = hashCode * 8191 + ((isSetMetadata()) ? 131071 : 524287);
      if (isSetMetadata())
        hashCode = hashCode * 8191 + metadata.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(transition_instant_state_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTb()).compareTo(other.isSetTb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb, other.tb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromInstant()).compareTo(other.isSetFromInstant());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromInstant()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromInstant, other.fromInstant);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetToInstant()).compareTo(other.isSetToInstant());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToInstant()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toInstant, other.toInstant);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetadata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("transition_instant_state_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tb:");
      if (this.tb == null) {
        sb.append("null");
      } else {
        sb.append(this.tb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromInstant:");
      if (this.fromInstant == null) {
        sb.append("null");
      } else {
        sb.append(this.fromInstant);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("toInstant:");
      if (this.toInstant == null) {
        sb.append("null");
      } else {
        sb.append(this.toInstant);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.metadata, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (fromInstant != null) {
        fromInstant.validate();
      }
      if (toInstant != null) {
        toInstant.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transition_instant_state_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public transition_instant_state_argsStandardScheme getScheme() {
        return new transition_instant_state_argsStandardScheme();
      }
    }

    private static class transition_instant_state_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<transition_instant_state_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transition_instant_state_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.db = iprot.readString();
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tb = iprot.readString();
                struct.setTbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FROM_INSTANT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fromInstant = new THoodieInstant();
                struct.fromInstant.read(iprot);
                struct.setFromInstantIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TO_INSTANT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.toInstant = new THoodieInstant();
                struct.toInstant.read(iprot);
                struct.setToInstantIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // METADATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.metadata = iprot.readBinary();
                struct.setMetadataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transition_instant_state_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
        if (struct.tb != null) {
          oprot.writeFieldBegin(TB_FIELD_DESC);
          oprot.writeString(struct.tb);
          oprot.writeFieldEnd();
        }
        if (struct.fromInstant != null) {
          oprot.writeFieldBegin(FROM_INSTANT_FIELD_DESC);
          struct.fromInstant.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.toInstant != null) {
          oprot.writeFieldBegin(TO_INSTANT_FIELD_DESC);
          struct.toInstant.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.metadata != null) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          oprot.writeBinary(struct.metadata);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transition_instant_state_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public transition_instant_state_argsTupleScheme getScheme() {
        return new transition_instant_state_argsTupleScheme();
      }
    }

    private static class transition_instant_state_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<transition_instant_state_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transition_instant_state_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTb()) {
          optionals.set(1);
        }
        if (struct.isSetFromInstant()) {
          optionals.set(2);
        }
        if (struct.isSetToInstant()) {
          optionals.set(3);
        }
        if (struct.isSetMetadata()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDb()) {
          oprot.writeString(struct.db);
        }
        if (struct.isSetTb()) {
          oprot.writeString(struct.tb);
        }
        if (struct.isSetFromInstant()) {
          struct.fromInstant.write(oprot);
        }
        if (struct.isSetToInstant()) {
          struct.toInstant.write(oprot);
        }
        if (struct.isSetMetadata()) {
          oprot.writeBinary(struct.metadata);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transition_instant_state_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.db = iprot.readString();
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tb = iprot.readString();
          struct.setTbIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fromInstant = new THoodieInstant();
          struct.fromInstant.read(iprot);
          struct.setFromInstantIsSet(true);
        }
        if (incoming.get(3)) {
          struct.toInstant = new THoodieInstant();
          struct.toInstant.read(iprot);
          struct.setToInstantIsSet(true);
        }
        if (incoming.get(4)) {
          struct.metadata = iprot.readBinary();
          struct.setMetadataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class transition_instant_state_result implements org.apache.thrift.TBase<transition_instant_state_result, transition_instant_state_result._Fields>, java.io.Serializable, Cloneable, Comparable<transition_instant_state_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transition_instant_state_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new transition_instant_state_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new transition_instant_state_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable HoodieInstantChangeResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HoodieInstantChangeResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transition_instant_state_result.class, metaDataMap);
    }

    public transition_instant_state_result() {
    }

    public transition_instant_state_result(
      HoodieInstantChangeResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transition_instant_state_result(transition_instant_state_result other) {
      if (other.isSetSuccess()) {
        this.success = new HoodieInstantChangeResult(other.success);
      }
    }

    public transition_instant_state_result deepCopy() {
      return new transition_instant_state_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public HoodieInstantChangeResult getSuccess() {
      return this.success;
    }

    public transition_instant_state_result setSuccess(@org.apache.thrift.annotation.Nullable HoodieInstantChangeResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HoodieInstantChangeResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof transition_instant_state_result)
        return this.equals((transition_instant_state_result)that);
      return false;
    }

    public boolean equals(transition_instant_state_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(transition_instant_state_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("transition_instant_state_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transition_instant_state_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public transition_instant_state_resultStandardScheme getScheme() {
        return new transition_instant_state_resultStandardScheme();
      }
    }

    private static class transition_instant_state_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<transition_instant_state_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transition_instant_state_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HoodieInstantChangeResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transition_instant_state_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transition_instant_state_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public transition_instant_state_resultTupleScheme getScheme() {
        return new transition_instant_state_resultTupleScheme();
      }
    }

    private static class transition_instant_state_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<transition_instant_state_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transition_instant_state_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transition_instant_state_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HoodieInstantChangeResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class delete_instant_args implements org.apache.thrift.TBase<delete_instant_args, delete_instant_args._Fields>, java.io.Serializable, Cloneable, Comparable<delete_instant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_instant_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TB_FIELD_DESC = new org.apache.thrift.protocol.TField("tb", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INSTANT_FIELD_DESC = new org.apache.thrift.protocol.TField("instant", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delete_instant_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delete_instant_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String tb; // required
    public @org.apache.thrift.annotation.Nullable THoodieInstant instant; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TB((short)2, "tb"),
      INSTANT((short)3, "instant");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TB
            return TB;
          case 3: // INSTANT
            return INSTANT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TB, new org.apache.thrift.meta_data.FieldMetaData("tb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INSTANT, new org.apache.thrift.meta_data.FieldMetaData("instant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THoodieInstant.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_instant_args.class, metaDataMap);
    }

    public delete_instant_args() {
    }

    public delete_instant_args(
      java.lang.String db,
      java.lang.String tb,
      THoodieInstant instant)
    {
      this();
      this.db = db;
      this.tb = tb;
      this.instant = instant;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_instant_args(delete_instant_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTb()) {
        this.tb = other.tb;
      }
      if (other.isSetInstant()) {
        this.instant = new THoodieInstant(other.instant);
      }
    }

    public delete_instant_args deepCopy() {
      return new delete_instant_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.tb = null;
      this.instant = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDb() {
      return this.db;
    }

    public delete_instant_args setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTb() {
      return this.tb;
    }

    public delete_instant_args setTb(@org.apache.thrift.annotation.Nullable java.lang.String tb) {
      this.tb = tb;
      return this;
    }

    public void unsetTb() {
      this.tb = null;
    }

    /** Returns true if field tb is set (has been assigned a value) and false otherwise */
    public boolean isSetTb() {
      return this.tb != null;
    }

    public void setTbIsSet(boolean value) {
      if (!value) {
        this.tb = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public THoodieInstant getInstant() {
      return this.instant;
    }

    public delete_instant_args setInstant(@org.apache.thrift.annotation.Nullable THoodieInstant instant) {
      this.instant = instant;
      return this;
    }

    public void unsetInstant() {
      this.instant = null;
    }

    /** Returns true if field instant is set (has been assigned a value) and false otherwise */
    public boolean isSetInstant() {
      return this.instant != null;
    }

    public void setInstantIsSet(boolean value) {
      if (!value) {
        this.instant = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((java.lang.String)value);
        }
        break;

      case TB:
        if (value == null) {
          unsetTb();
        } else {
          setTb((java.lang.String)value);
        }
        break;

      case INSTANT:
        if (value == null) {
          unsetInstant();
        } else {
          setInstant((THoodieInstant)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TB:
        return getTb();

      case INSTANT:
        return getInstant();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TB:
        return isSetTb();
      case INSTANT:
        return isSetInstant();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_instant_args)
        return this.equals((delete_instant_args)that);
      return false;
    }

    public boolean equals(delete_instant_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tb = true && this.isSetTb();
      boolean that_present_tb = true && that.isSetTb();
      if (this_present_tb || that_present_tb) {
        if (!(this_present_tb && that_present_tb))
          return false;
        if (!this.tb.equals(that.tb))
          return false;
      }

      boolean this_present_instant = true && this.isSetInstant();
      boolean that_present_instant = true && that.isSetInstant();
      if (this_present_instant || that_present_instant) {
        if (!(this_present_instant && that_present_instant))
          return false;
        if (!this.instant.equals(that.instant))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
      if (isSetDb())
        hashCode = hashCode * 8191 + db.hashCode();

      hashCode = hashCode * 8191 + ((isSetTb()) ? 131071 : 524287);
      if (isSetTb())
        hashCode = hashCode * 8191 + tb.hashCode();

      hashCode = hashCode * 8191 + ((isSetInstant()) ? 131071 : 524287);
      if (isSetInstant())
        hashCode = hashCode * 8191 + instant.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(delete_instant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTb()).compareTo(other.isSetTb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb, other.tb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInstant()).compareTo(other.isSetInstant());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstant()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instant, other.instant);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("delete_instant_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tb:");
      if (this.tb == null) {
        sb.append("null");
      } else {
        sb.append(this.tb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("instant:");
      if (this.instant == null) {
        sb.append("null");
      } else {
        sb.append(this.instant);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (instant != null) {
        instant.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_instant_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public delete_instant_argsStandardScheme getScheme() {
        return new delete_instant_argsStandardScheme();
      }
    }

    private static class delete_instant_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<delete_instant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_instant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.db = iprot.readString();
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tb = iprot.readString();
                struct.setTbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INSTANT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.instant = new THoodieInstant();
                struct.instant.read(iprot);
                struct.setInstantIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_instant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
        if (struct.tb != null) {
          oprot.writeFieldBegin(TB_FIELD_DESC);
          oprot.writeString(struct.tb);
          oprot.writeFieldEnd();
        }
        if (struct.instant != null) {
          oprot.writeFieldBegin(INSTANT_FIELD_DESC);
          struct.instant.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_instant_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public delete_instant_argsTupleScheme getScheme() {
        return new delete_instant_argsTupleScheme();
      }
    }

    private static class delete_instant_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<delete_instant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_instant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTb()) {
          optionals.set(1);
        }
        if (struct.isSetInstant()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDb()) {
          oprot.writeString(struct.db);
        }
        if (struct.isSetTb()) {
          oprot.writeString(struct.tb);
        }
        if (struct.isSetInstant()) {
          struct.instant.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_instant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.db = iprot.readString();
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tb = iprot.readString();
          struct.setTbIsSet(true);
        }
        if (incoming.get(2)) {
          struct.instant = new THoodieInstant();
          struct.instant.read(iprot);
          struct.setInstantIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class delete_instant_result implements org.apache.thrift.TBase<delete_instant_result, delete_instant_result._Fields>, java.io.Serializable, Cloneable, Comparable<delete_instant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delete_instant_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delete_instant_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delete_instant_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable HoodieInstantChangeResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HoodieInstantChangeResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delete_instant_result.class, metaDataMap);
    }

    public delete_instant_result() {
    }

    public delete_instant_result(
      HoodieInstantChangeResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delete_instant_result(delete_instant_result other) {
      if (other.isSetSuccess()) {
        this.success = new HoodieInstantChangeResult(other.success);
      }
    }

    public delete_instant_result deepCopy() {
      return new delete_instant_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public HoodieInstantChangeResult getSuccess() {
      return this.success;
    }

    public delete_instant_result setSuccess(@org.apache.thrift.annotation.Nullable HoodieInstantChangeResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HoodieInstantChangeResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof delete_instant_result)
        return this.equals((delete_instant_result)that);
      return false;
    }

    public boolean equals(delete_instant_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(delete_instant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("delete_instant_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delete_instant_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public delete_instant_resultStandardScheme getScheme() {
        return new delete_instant_resultStandardScheme();
      }
    }

    private static class delete_instant_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<delete_instant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delete_instant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HoodieInstantChangeResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delete_instant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delete_instant_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public delete_instant_resultTupleScheme getScheme() {
        return new delete_instant_resultTupleScheme();
      }
    }

    private static class delete_instant_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<delete_instant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delete_instant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delete_instant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HoodieInstantChangeResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class list_files_in_partition_args implements org.apache.thrift.TBase<list_files_in_partition_args, list_files_in_partition_args._Fields>, java.io.Serializable, Cloneable, Comparable<list_files_in_partition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_files_in_partition_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TB_FIELD_DESC = new org.apache.thrift.protocol.TField("tb", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("partition", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new list_files_in_partition_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new list_files_in_partition_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String tb; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String partition; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String timestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TB((short)2, "tb"),
      PARTITION((short)3, "partition"),
      TIMESTAMP((short)4, "timestamp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TB
            return TB;
          case 3: // PARTITION
            return PARTITION;
          case 4: // TIMESTAMP
            return TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TB, new org.apache.thrift.meta_data.FieldMetaData("tb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARTITION, new org.apache.thrift.meta_data.FieldMetaData("partition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_files_in_partition_args.class, metaDataMap);
    }

    public list_files_in_partition_args() {
    }

    public list_files_in_partition_args(
      java.lang.String db,
      java.lang.String tb,
      java.lang.String partition,
      java.lang.String timestamp)
    {
      this();
      this.db = db;
      this.tb = tb;
      this.partition = partition;
      this.timestamp = timestamp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_files_in_partition_args(list_files_in_partition_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTb()) {
        this.tb = other.tb;
      }
      if (other.isSetPartition()) {
        this.partition = other.partition;
      }
      if (other.isSetTimestamp()) {
        this.timestamp = other.timestamp;
      }
    }

    public list_files_in_partition_args deepCopy() {
      return new list_files_in_partition_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.tb = null;
      this.partition = null;
      this.timestamp = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDb() {
      return this.db;
    }

    public list_files_in_partition_args setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTb() {
      return this.tb;
    }

    public list_files_in_partition_args setTb(@org.apache.thrift.annotation.Nullable java.lang.String tb) {
      this.tb = tb;
      return this;
    }

    public void unsetTb() {
      this.tb = null;
    }

    /** Returns true if field tb is set (has been assigned a value) and false otherwise */
    public boolean isSetTb() {
      return this.tb != null;
    }

    public void setTbIsSet(boolean value) {
      if (!value) {
        this.tb = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPartition() {
      return this.partition;
    }

    public list_files_in_partition_args setPartition(@org.apache.thrift.annotation.Nullable java.lang.String partition) {
      this.partition = partition;
      return this;
    }

    public void unsetPartition() {
      this.partition = null;
    }

    /** Returns true if field partition is set (has been assigned a value) and false otherwise */
    public boolean isSetPartition() {
      return this.partition != null;
    }

    public void setPartitionIsSet(boolean value) {
      if (!value) {
        this.partition = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTimestamp() {
      return this.timestamp;
    }

    public list_files_in_partition_args setTimestamp(@org.apache.thrift.annotation.Nullable java.lang.String timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    public void unsetTimestamp() {
      this.timestamp = null;
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return this.timestamp != null;
    }

    public void setTimestampIsSet(boolean value) {
      if (!value) {
        this.timestamp = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((java.lang.String)value);
        }
        break;

      case TB:
        if (value == null) {
          unsetTb();
        } else {
          setTb((java.lang.String)value);
        }
        break;

      case PARTITION:
        if (value == null) {
          unsetPartition();
        } else {
          setPartition((java.lang.String)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TB:
        return getTb();

      case PARTITION:
        return getPartition();

      case TIMESTAMP:
        return getTimestamp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TB:
        return isSetTb();
      case PARTITION:
        return isSetPartition();
      case TIMESTAMP:
        return isSetTimestamp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof list_files_in_partition_args)
        return this.equals((list_files_in_partition_args)that);
      return false;
    }

    public boolean equals(list_files_in_partition_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tb = true && this.isSetTb();
      boolean that_present_tb = true && that.isSetTb();
      if (this_present_tb || that_present_tb) {
        if (!(this_present_tb && that_present_tb))
          return false;
        if (!this.tb.equals(that.tb))
          return false;
      }

      boolean this_present_partition = true && this.isSetPartition();
      boolean that_present_partition = true && that.isSetPartition();
      if (this_present_partition || that_present_partition) {
        if (!(this_present_partition && that_present_partition))
          return false;
        if (!this.partition.equals(that.partition))
          return false;
      }

      boolean this_present_timestamp = true && this.isSetTimestamp();
      boolean that_present_timestamp = true && that.isSetTimestamp();
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (!this.timestamp.equals(that.timestamp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
      if (isSetDb())
        hashCode = hashCode * 8191 + db.hashCode();

      hashCode = hashCode * 8191 + ((isSetTb()) ? 131071 : 524287);
      if (isSetTb())
        hashCode = hashCode * 8191 + tb.hashCode();

      hashCode = hashCode * 8191 + ((isSetPartition()) ? 131071 : 524287);
      if (isSetPartition())
        hashCode = hashCode * 8191 + partition.hashCode();

      hashCode = hashCode * 8191 + ((isSetTimestamp()) ? 131071 : 524287);
      if (isSetTimestamp())
        hashCode = hashCode * 8191 + timestamp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(list_files_in_partition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTb()).compareTo(other.isSetTb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb, other.tb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPartition()).compareTo(other.isSetPartition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition, other.partition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("list_files_in_partition_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tb:");
      if (this.tb == null) {
        sb.append("null");
      } else {
        sb.append(this.tb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partition:");
      if (this.partition == null) {
        sb.append("null");
      } else {
        sb.append(this.partition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_files_in_partition_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_files_in_partition_argsStandardScheme getScheme() {
        return new list_files_in_partition_argsStandardScheme();
      }
    }

    private static class list_files_in_partition_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<list_files_in_partition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_files_in_partition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.db = iprot.readString();
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tb = iprot.readString();
                struct.setTbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARTITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.partition = iprot.readString();
                struct.setPartitionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.timestamp = iprot.readString();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_files_in_partition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
        if (struct.tb != null) {
          oprot.writeFieldBegin(TB_FIELD_DESC);
          oprot.writeString(struct.tb);
          oprot.writeFieldEnd();
        }
        if (struct.partition != null) {
          oprot.writeFieldBegin(PARTITION_FIELD_DESC);
          oprot.writeString(struct.partition);
          oprot.writeFieldEnd();
        }
        if (struct.timestamp != null) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.timestamp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_files_in_partition_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_files_in_partition_argsTupleScheme getScheme() {
        return new list_files_in_partition_argsTupleScheme();
      }
    }

    private static class list_files_in_partition_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<list_files_in_partition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_files_in_partition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTb()) {
          optionals.set(1);
        }
        if (struct.isSetPartition()) {
          optionals.set(2);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDb()) {
          oprot.writeString(struct.db);
        }
        if (struct.isSetTb()) {
          oprot.writeString(struct.tb);
        }
        if (struct.isSetPartition()) {
          oprot.writeString(struct.partition);
        }
        if (struct.isSetTimestamp()) {
          oprot.writeString(struct.timestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_files_in_partition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.db = iprot.readString();
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tb = iprot.readString();
          struct.setTbIsSet(true);
        }
        if (incoming.get(2)) {
          struct.partition = iprot.readString();
          struct.setPartitionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.timestamp = iprot.readString();
          struct.setTimestampIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class list_files_in_partition_result implements org.apache.thrift.TBase<list_files_in_partition_result, list_files_in_partition_result._Fields>, java.io.Serializable, Cloneable, Comparable<list_files_in_partition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_files_in_partition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new list_files_in_partition_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new list_files_in_partition_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_files_in_partition_result.class, metaDataMap);
    }

    public list_files_in_partition_result() {
    }

    public list_files_in_partition_result(
      java.nio.ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_files_in_partition_result(list_files_in_partition_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public list_files_in_partition_result deepCopy() {
      return new list_files_in_partition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public java.nio.ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public list_files_in_partition_result setSuccess(byte[] success) {
      this.success = success == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(success.clone());
      return this;
    }

    public list_files_in_partition_result setSuccess(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          if (value instanceof byte[]) {
            setSuccess((byte[])value);
          } else {
            setSuccess((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof list_files_in_partition_result)
        return this.equals((list_files_in_partition_result)that);
      return false;
    }

    public boolean equals(list_files_in_partition_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(list_files_in_partition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("list_files_in_partition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_files_in_partition_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_files_in_partition_resultStandardScheme getScheme() {
        return new list_files_in_partition_resultStandardScheme();
      }
    }

    private static class list_files_in_partition_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<list_files_in_partition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_files_in_partition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_files_in_partition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_files_in_partition_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_files_in_partition_resultTupleScheme getScheme() {
        return new list_files_in_partition_resultTupleScheme();
      }
    }

    private static class list_files_in_partition_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<list_files_in_partition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_files_in_partition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_files_in_partition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class list_all_partitions_args implements org.apache.thrift.TBase<list_all_partitions_args, list_all_partitions_args._Fields>, java.io.Serializable, Cloneable, Comparable<list_all_partitions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_all_partitions_args");

    private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TB_FIELD_DESC = new org.apache.thrift.protocol.TField("tb", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new list_all_partitions_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new list_all_partitions_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String tb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB((short)1, "db"),
      TB((short)2, "tb");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB
            return DB;
          case 2: // TB
            return TB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TB, new org.apache.thrift.meta_data.FieldMetaData("tb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_all_partitions_args.class, metaDataMap);
    }

    public list_all_partitions_args() {
    }

    public list_all_partitions_args(
      java.lang.String db,
      java.lang.String tb)
    {
      this();
      this.db = db;
      this.tb = tb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_all_partitions_args(list_all_partitions_args other) {
      if (other.isSetDb()) {
        this.db = other.db;
      }
      if (other.isSetTb()) {
        this.tb = other.tb;
      }
    }

    public list_all_partitions_args deepCopy() {
      return new list_all_partitions_args(this);
    }

    @Override
    public void clear() {
      this.db = null;
      this.tb = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDb() {
      return this.db;
    }

    public list_all_partitions_args setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
      this.db = db;
      return this;
    }

    public void unsetDb() {
      this.db = null;
    }

    /** Returns true if field db is set (has been assigned a value) and false otherwise */
    public boolean isSetDb() {
      return this.db != null;
    }

    public void setDbIsSet(boolean value) {
      if (!value) {
        this.db = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTb() {
      return this.tb;
    }

    public list_all_partitions_args setTb(@org.apache.thrift.annotation.Nullable java.lang.String tb) {
      this.tb = tb;
      return this;
    }

    public void unsetTb() {
      this.tb = null;
    }

    /** Returns true if field tb is set (has been assigned a value) and false otherwise */
    public boolean isSetTb() {
      return this.tb != null;
    }

    public void setTbIsSet(boolean value) {
      if (!value) {
        this.tb = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DB:
        if (value == null) {
          unsetDb();
        } else {
          setDb((java.lang.String)value);
        }
        break;

      case TB:
        if (value == null) {
          unsetTb();
        } else {
          setTb((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DB:
        return getDb();

      case TB:
        return getTb();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DB:
        return isSetDb();
      case TB:
        return isSetTb();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof list_all_partitions_args)
        return this.equals((list_all_partitions_args)that);
      return false;
    }

    public boolean equals(list_all_partitions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_db = true && this.isSetDb();
      boolean that_present_db = true && that.isSetDb();
      if (this_present_db || that_present_db) {
        if (!(this_present_db && that_present_db))
          return false;
        if (!this.db.equals(that.db))
          return false;
      }

      boolean this_present_tb = true && this.isSetTb();
      boolean that_present_tb = true && that.isSetTb();
      if (this_present_tb || that_present_tb) {
        if (!(this_present_tb && that_present_tb))
          return false;
        if (!this.tb.equals(that.tb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
      if (isSetDb())
        hashCode = hashCode * 8191 + db.hashCode();

      hashCode = hashCode * 8191 + ((isSetTb()) ? 131071 : 524287);
      if (isSetTb())
        hashCode = hashCode * 8191 + tb.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(list_all_partitions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTb()).compareTo(other.isSetTb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb, other.tb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("list_all_partitions_args(");
      boolean first = true;

      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tb:");
      if (this.tb == null) {
        sb.append("null");
      } else {
        sb.append(this.tb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_all_partitions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_all_partitions_argsStandardScheme getScheme() {
        return new list_all_partitions_argsStandardScheme();
      }
    }

    private static class list_all_partitions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<list_all_partitions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_all_partitions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.db = iprot.readString();
                struct.setDbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tb = iprot.readString();
                struct.setTbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_all_partitions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.db != null) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
        if (struct.tb != null) {
          oprot.writeFieldBegin(TB_FIELD_DESC);
          oprot.writeString(struct.tb);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_all_partitions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_all_partitions_argsTupleScheme getScheme() {
        return new list_all_partitions_argsTupleScheme();
      }
    }

    private static class list_all_partitions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<list_all_partitions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_all_partitions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDb()) {
          optionals.set(0);
        }
        if (struct.isSetTb()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDb()) {
          oprot.writeString(struct.db);
        }
        if (struct.isSetTb()) {
          oprot.writeString(struct.tb);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_all_partitions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.db = iprot.readString();
          struct.setDbIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tb = iprot.readString();
          struct.setTbIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class list_all_partitions_result implements org.apache.thrift.TBase<list_all_partitions_result, list_all_partitions_result._Fields>, java.io.Serializable, Cloneable, Comparable<list_all_partitions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_all_partitions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new list_all_partitions_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new list_all_partitions_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_all_partitions_result.class, metaDataMap);
    }

    public list_all_partitions_result() {
    }

    public list_all_partitions_result(
      java.util.List<java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_all_partitions_result(list_all_partitions_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public list_all_partitions_result deepCopy() {
      return new list_all_partitions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public list_all_partitions_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof list_all_partitions_result)
        return this.equals((list_all_partitions_result)that);
      return false;
    }

    public boolean equals(list_all_partitions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(list_all_partitions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("list_all_partitions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_all_partitions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_all_partitions_resultStandardScheme getScheme() {
        return new list_all_partitions_resultStandardScheme();
      }
    }

    private static class list_all_partitions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<list_all_partitions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_all_partitions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list26.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem27;
                  for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                  {
                    _elem27 = iprot.readString();
                    struct.success.add(_elem27);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_all_partitions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter29 : struct.success)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_all_partitions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_all_partitions_resultTupleScheme getScheme() {
        return new list_all_partitions_resultTupleScheme();
      }
    }

    private static class list_all_partitions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<list_all_partitions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_all_partitions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter30 : struct.success)
            {
              oprot.writeString(_iter30);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_all_partitions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list31.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              _elem32 = iprot.readString();
              struct.success.add(_elem32);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
