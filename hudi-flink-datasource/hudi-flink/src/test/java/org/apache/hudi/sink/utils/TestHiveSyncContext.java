package org.apache.hudi.sink.utils;

import org.apache.flink.configuration.Configuration;

import org.apache.hudi.configuration.FlinkOptions;
import org.apache.hudi.hive.HiveSyncConfig;

import org.junit.jupiter.api.Test;

import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * Test cases for {@link HiveSyncContext}.
 */
public class TestHiveSyncContext {
  /**
   * Test that the file ids generated by the task can finally shuffled to itself.
   */
  @Test
  public void testBuildSyncConfig() throws Exception {
    Configuration configuration1 = new Configuration();
    Configuration configuration2 = new Configuration();
    String hiveSyncPartitionField = "hiveSyncPartitionField";
    String partitionPathField = "partitionPathField";

    configuration1.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, hiveSyncPartitionField);
    configuration1.setString(FlinkOptions.PARTITION_PATH_FIELD, partitionPathField);

    configuration2.setString(FlinkOptions.PARTITION_PATH_FIELD, partitionPathField);

    Class<?> threadClazz = Class.forName("org.apache.hudi.sink.utils.HiveSyncContext");
    Method buildSyncConfigMethod = threadClazz.getDeclaredMethod("buildSyncConfig", Configuration.class);
    buildSyncConfigMethod.setAccessible(true);

    HiveSyncConfig hiveSyncConfig1 = HiveSyncContext.buildSyncConfig(configuration1);
    HiveSyncConfig hiveSyncConfig2 = HiveSyncContext.buildSyncConfig(configuration2);

    assertTrue(hiveSyncConfig1.partitionFields.get(0).equals(hiveSyncPartitionField));
    assertTrue(hiveSyncConfig2.partitionFields.get(0).equals(partitionPathField));

  }
}